{"ast":null,"code":"const protobuf = require('./protobuf');\n\nconst protobufJS = require('@apollo/protobufjs/minimal'); // Remove Long support.  Our uint64s tend to be small (less\n// than 104 days).\n// https://github.com/protobufjs/protobuf.js/issues/1253\n\n\nprotobufJS.util.Long = undefined;\nprotobufJS.configure(); // Override the generated protobuf Traces.encode function so that it will look\n// for Traces that are already encoded to Buffer as well as unencoded\n// Traces. This amortizes the protobuf encoding time over each generated Trace\n// instead of bunching it all up at once at sendReport time. In load tests, this\n// change improved p99 end-to-end HTTP response times by a factor of 11 without\n// a casually noticeable effect on p50 times. This also makes it easier for us\n// to implement maxUncompressedReportSize as we know the encoded size of traces\n// as we go.\n\nconst originalTracesAndStatsEncode = protobuf.TracesAndStats.encode;\n\nprotobuf.TracesAndStats.encode = function (message, originalWriter) {\n  const writer = originalTracesAndStatsEncode(message, originalWriter);\n  const encodedTraces = message.encodedTraces;\n\n  if (encodedTraces != null && encodedTraces.length) {\n    for (let i = 0; i < encodedTraces.length; ++i) {\n      writer.uint32(\n      /* id 1, wireType 2 =*/\n      10);\n      writer.bytes(encodedTraces[i]);\n    }\n  }\n\n  return writer;\n};\n\nmodule.exports = protobuf;","map":{"version":3,"sources":["/Users/josephdeguzman/Documents/CSE/brainiac-app/node_modules/apollo-reporting-protobuf/dist/index.js"],"names":["protobuf","require","protobufJS","util","Long","undefined","configure","originalTracesAndStatsEncode","TracesAndStats","encode","message","originalWriter","writer","encodedTraces","length","i","uint32","bytes","module","exports"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAAC,YAAD,CAAxB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,4BAAD,CAA1B,C,CAEA;AACA;AACA;;;AACAC,UAAU,CAACC,IAAX,CAAgBC,IAAhB,GAAuBC,SAAvB;AACAH,UAAU,CAACI,SAAX,G,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,4BAA4B,GAAGP,QAAQ,CAACQ,cAAT,CAAwBC,MAA7D;;AACAT,QAAQ,CAACQ,cAAT,CAAwBC,MAAxB,GAAiC,UAASC,OAAT,EAAkBC,cAAlB,EAAkC;AACjE,QAAMC,MAAM,GAAGL,4BAA4B,CAACG,OAAD,EAAUC,cAAV,CAA3C;AACA,QAAME,aAAa,GAAGH,OAAO,CAACG,aAA9B;;AACA,MAAIA,aAAa,IAAI,IAAjB,IAAyBA,aAAa,CAACC,MAA3C,EAAmD;AACjD,SAAK,IAAIC,CAAC,GAAG,CAAb,EAAgBA,CAAC,GAAGF,aAAa,CAACC,MAAlC,EAA0C,EAAEC,CAA5C,EAA+C;AAC7CH,MAAAA,MAAM,CAACI,MAAP;AAAc;AAAwB,QAAtC;AACAJ,MAAAA,MAAM,CAACK,KAAP,CAAaJ,aAAa,CAACE,CAAD,CAA1B;AACD;AACF;;AACD,SAAOH,MAAP;AACD,CAVD;;AAYAM,MAAM,CAACC,OAAP,GAAiBnB,QAAjB","sourcesContent":["const protobuf = require('./protobuf');\nconst protobufJS = require('@apollo/protobufjs/minimal');\n\n// Remove Long support.  Our uint64s tend to be small (less\n// than 104 days).\n// https://github.com/protobufjs/protobuf.js/issues/1253\nprotobufJS.util.Long = undefined;\nprotobufJS.configure();\n\n// Override the generated protobuf Traces.encode function so that it will look\n// for Traces that are already encoded to Buffer as well as unencoded\n// Traces. This amortizes the protobuf encoding time over each generated Trace\n// instead of bunching it all up at once at sendReport time. In load tests, this\n// change improved p99 end-to-end HTTP response times by a factor of 11 without\n// a casually noticeable effect on p50 times. This also makes it easier for us\n// to implement maxUncompressedReportSize as we know the encoded size of traces\n// as we go.\nconst originalTracesAndStatsEncode = protobuf.TracesAndStats.encode;\nprotobuf.TracesAndStats.encode = function(message, originalWriter) {\n  const writer = originalTracesAndStatsEncode(message, originalWriter);\n  const encodedTraces = message.encodedTraces;\n  if (encodedTraces != null && encodedTraces.length) {\n    for (let i = 0; i < encodedTraces.length; ++i) {\n      writer.uint32(/* id 1, wireType 2 =*/ 10);\n      writer.bytes(encodedTraces[i]);\n    }\n  }\n  return writer;\n};\n\nmodule.exports = protobuf;\n"]},"metadata":{},"sourceType":"script"}