{"ast":null,"code":"var _jsxFileName = \"/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/pages/AccountPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useQuery } from '@apollo/client';\nimport { Row, Col } from 'react-bootstrap';\nimport gql from 'graphql-tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AccountPage(props) {\n  _s();\n\n  var username = props.match.params.username;\n  console.log(useQuery(FETCH_USER_QUERY, {\n    variables: {\n      username: username\n    }\n  }));\n  const {\n    loading,\n    data\n  } = useQuery(FETCH_USER_QUERY, {\n    variables: {\n      username: username\n    }\n  });\n\n  if (loading) {\n    return \"loading\";\n  } else {\n    console.log(data);\n    const user = data.getUser;\n    let userText;\n\n    if (!user) {\n      userText = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Loading user...\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 25,\n        columnNumber: 20\n      }, this);\n    } else {\n      userText = /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \" User Found\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 13\n      }, this);\n    }\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: [\" \", userText, \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Account Page\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 35,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Username: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user.username\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 37,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Email: \"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user.email\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Name:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: user.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 41,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(AccountPage, \"8sB5bqlJyq2PGsBCIwvcc2Emrno=\", false, function () {\n  return [useQuery, useQuery];\n});\n\n_c = AccountPage;\nexport default AccountPage;\nconst FETCH_USER_QUERY = gql`\n    query($username: String!) {\n        getUser(username: $username) \n        {\n            username\n            email\n            name\n            createdPlatforms\n            playedPlatforms\n        }\n    }\n`;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountPage\");","map":{"version":3,"sources":["/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/pages/AccountPage.js"],"names":["React","useContext","useQuery","Row","Col","gql","AccountPage","props","username","match","params","console","log","FETCH_USER_QUERY","variables","loading","data","user","getUser","userText","email","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAAQC,GAAR,EAAaC,GAAb,QAAuB,iBAAvB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACxB,MAAIC,QAAQ,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,QAAlC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYV,QAAQ,CAACW,gBAAD,EAAmB;AACnCC,IAAAA,SAAS,EAAE;AACPN,MAAAA,QAAQ,EAAEA;AADH;AADwB,GAAnB,CAApB;AAKA,QAAM;AAACO,IAAAA,OAAD;AAAUC,IAAAA;AAAV,MAAkBd,QAAQ,CAACW,gBAAD,EAAmB;AAC/CC,IAAAA,SAAS,EAAE;AACPN,MAAAA,QAAQ,EAAEA;AADH;AADoC,GAAnB,CAAhC;;AAKA,MAAIO,OAAJ,EAAa;AAAC,WAAO,SAAP;AAAiB,GAA/B,MACK;AACDJ,IAAAA,OAAO,CAACC,GAAR,CAAYI,IAAZ;AACA,UAAMC,IAAI,GAAGD,IAAI,CAACE,OAAlB;AAEJ,QAAIC,QAAJ;;AACA,QAAI,CAACF,IAAL,EAAW;AACPE,MAAAA,QAAQ,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAAX;AACH,KAFD,MAEO;AAEHA,MAAAA,QAAQ,gBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ;AAGH;;AACD,wBACI;AAAA,8BACI;AAAA,wBAAMA,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ,eAII;AAAA,kBAAIF,IAAI,CAACT;AAAT;AAAA;AAAA;AAAA;AAAA,cAJJ,eAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cALJ,eAMI;AAAA,kBAAIS,IAAI,CAACG;AAAT;AAAA;AAAA;AAAA;AAAA,cANJ,eAOI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAPJ,eAQI;AAAA,kBAAIH,IAAI,CAACI;AAAT;AAAA;AAAA;AAAA;AAAA,cARJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAYC;AACJ;;GAvCQf,W;UAEOJ,Q,EAKYA,Q;;;KAPnBI,W;AAyCT,eAAeA,WAAf;AAEA,MAAMO,gBAAgB,GAAGR,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA","sourcesContent":["import React, {useContext} from 'react';\nimport { useQuery } from '@apollo/client';\nimport {Row, Col} from 'react-bootstrap';\nimport gql from 'graphql-tag';\n\nfunction AccountPage(props) {\n    var username = props.match.params.username\n    console.log(useQuery(FETCH_USER_QUERY, {\n        variables: {\n            username: username\n        }\n    }));\n    const {loading, data} = useQuery(FETCH_USER_QUERY, {\n        variables: {\n            username: username\n        }\n    });\n    if (loading) {return \"loading\"}\n    else {\n        console.log(data);\n        const user = data.getUser\n\n    let userText\n    if (!user) {\n        userText = <p>Loading user...</p>\n    } else {\n\n        userText = (\n            <p> User Found</p>\n        )\n    }\n    return (\n        <div>\n            <h1> {userText} </h1>\n            <h1>Account Page</h1>\n            <p>Username: </p>\n            <p>{user.username}</p>\n            <p>Email: </p>\n            <p>{user.email}</p>\n            <p>Name:</p>\n            <p>{user.name}</p>\n        </div>\n    );\n    }\n}\n\nexport default AccountPage;\n\nconst FETCH_USER_QUERY = gql`\n    query($username: String!) {\n        getUser(username: $username) \n        {\n            username\n            email\n            name\n            createdPlatforms\n            playedPlatforms\n        }\n    }\n`"]},"metadata":{},"sourceType":"module"}