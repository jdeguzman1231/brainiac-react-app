{"ast":null,"code":"\"use strict\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SchemaReporter = exports.reportServerInfoGql = void 0;\n\nconst apollo_server_env_1 = require(\"apollo-server-env\");\n\nexports.reportServerInfoGql = `\n  mutation ReportServerInfo($info: EdgeServerInfo!, $executableSchema: String) {\n    me {\n      __typename\n      ... on ServiceMutation {\n        reportServerInfo(info: $info, executableSchema: $executableSchema) {\n          __typename\n          ... on ReportServerInfoError {\n            message\n            code\n          }\n          ... on ReportServerInfoResponse {\n            inSeconds\n            withExecutableSchema\n          }\n        }\n      }\n    }\n  }\n`;\n\nclass SchemaReporter {\n  constructor(options) {\n    this.headers = new apollo_server_env_1.Headers();\n    this.headers.set('Content-Type', 'application/json');\n    this.headers.set('x-api-key', options.apiKey);\n    this.headers.set('apollographql-client-name', 'ApolloServerPluginSchemaReporting');\n    this.headers.set('apollographql-client-version', require('../../../package.json').version);\n    this.endpointUrl = options.endpointUrl || 'https://schema-reporting.api.apollographql.com/api/graphql';\n    this.serverInfo = options.serverInfo;\n    this.executableSchemaDocument = options.schemaSdl;\n    this.isStopped = false;\n    this.logger = options.logger;\n    this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n    this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n  }\n\n  stopped() {\n    return this.isStopped;\n  }\n\n  start() {\n    this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);\n  }\n\n  stop() {\n    this.isStopped = true;\n\n    if (this.pollTimer) {\n      clearTimeout(this.pollTimer);\n      this.pollTimer = undefined;\n    }\n  }\n\n  sendOneReportAndScheduleNext(sendNextWithExecutableSchema) {\n    return __awaiter(this, void 0, void 0, function* () {\n      this.pollTimer = undefined;\n      if (this.stopped()) return;\n\n      try {\n        const result = yield this.reportServerInfo(sendNextWithExecutableSchema);\n\n        switch (result.kind) {\n          case 'next':\n            this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withExecutableSchema), result.inSeconds * 1000);\n            return;\n\n          case 'stop':\n            return;\n        }\n      } catch (error) {\n        this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);\n      }\n    });\n  }\n\n  reportServerInfo(withExecutableSchema) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const {\n        data,\n        errors\n      } = yield this.apolloQuery({\n        info: this.serverInfo,\n        executableSchema: withExecutableSchema ? this.executableSchemaDocument : null\n      });\n\n      if (errors) {\n        throw new Error((errors || []).map(x => x.message).join('\\n'));\n      }\n\n      function msgForUnexpectedResponse(data) {\n        return ['Unexpected response shape from Apollo when', 'reporting server information for schema reporting. If', 'this continues, please reach out to support@apollographql.com.', 'Received response:', JSON.stringify(data)].join(' ');\n      }\n\n      if (!data || !data.me || !data.me.__typename) {\n        throw new Error(msgForUnexpectedResponse(data));\n      }\n\n      if (data.me.__typename === 'UserMutation') {\n        this.isStopped = true;\n        throw new Error(['This server was configured with an API key for a user.', \"Only a service's API key may be used for schema reporting.\", 'Please visit the settings for this graph at', 'https://studio.apollographql.com/ to obtain an API key for a service.'].join(' '));\n      } else if (data.me.__typename === 'ServiceMutation' && data.me.reportServerInfo) {\n        if (data.me.reportServerInfo.__typename == 'ReportServerInfoResponse') {\n          return {\n            kind: 'next',\n            inSeconds: data.me.reportServerInfo.inSeconds,\n            withExecutableSchema: data.me.reportServerInfo.withExecutableSchema\n          };\n        } else {\n          this.logger.error(['Received input validation error from Apollo:', data.me.reportServerInfo.message, 'Stopping reporting. Please fix the input errors.'].join(' '));\n          this.stop();\n          return {\n            stopReporting: true,\n            kind: 'stop'\n          };\n        }\n      }\n\n      throw new Error(msgForUnexpectedResponse(data));\n    });\n  }\n\n  apolloQuery(variables) {\n    return __awaiter(this, void 0, void 0, function* () {\n      const request = {\n        query: exports.reportServerInfoGql,\n        operationName: 'ReportServerInfo',\n        variables: variables\n      };\n      const httpRequest = new apollo_server_env_1.Request(this.endpointUrl, {\n        method: 'POST',\n        headers: this.headers,\n        body: JSON.stringify(request)\n      });\n      const httpResponse = yield apollo_server_env_1.fetch(httpRequest);\n\n      if (!httpResponse.ok) {\n        throw new Error([`An unexpected HTTP status code (${httpResponse.status}) was`, 'encountered during schema reporting.'].join(' '));\n      }\n\n      try {\n        return yield httpResponse.json();\n      } catch (error) {\n        throw new Error([\"Couldn't report server info to Apollo.\", 'Parsing response as JSON failed.', 'If this continues please reach out to support@apollographql.com', error].join(' '));\n      }\n    });\n  }\n\n}\n\nexports.SchemaReporter = SchemaReporter;","map":{"version":3,"sources":["../../../src/plugin/schemaReporting/schemaReporter.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {\n    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }\n    return new (P || (P = Promise))(function (resolve, reject) {\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\n        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\n    });\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.SchemaReporter = exports.reportServerInfoGql = void 0;\nconst apollo_server_env_1 = require(\"apollo-server-env\");\nexports.reportServerInfoGql = `\n  mutation ReportServerInfo($info: EdgeServerInfo!, $executableSchema: String) {\n    me {\n      __typename\n      ... on ServiceMutation {\n        reportServerInfo(info: $info, executableSchema: $executableSchema) {\n          __typename\n          ... on ReportServerInfoError {\n            message\n            code\n          }\n          ... on ReportServerInfoResponse {\n            inSeconds\n            withExecutableSchema\n          }\n        }\n      }\n    }\n  }\n`;\nclass SchemaReporter {\n    constructor(options) {\n        this.headers = new apollo_server_env_1.Headers();\n        this.headers.set('Content-Type', 'application/json');\n        this.headers.set('x-api-key', options.apiKey);\n        this.headers.set('apollographql-client-name', 'ApolloServerPluginSchemaReporting');\n        this.headers.set('apollographql-client-version', require('../../../package.json').version);\n        this.endpointUrl =\n            options.endpointUrl ||\n                'https://schema-reporting.api.apollographql.com/api/graphql';\n        this.serverInfo = options.serverInfo;\n        this.executableSchemaDocument = options.schemaSdl;\n        this.isStopped = false;\n        this.logger = options.logger;\n        this.initialReportingDelayInMs = options.initialReportingDelayInMs;\n        this.fallbackReportingDelayInMs = options.fallbackReportingDelayInMs;\n    }\n    stopped() {\n        return this.isStopped;\n    }\n    start() {\n        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.initialReportingDelayInMs);\n    }\n    stop() {\n        this.isStopped = true;\n        if (this.pollTimer) {\n            clearTimeout(this.pollTimer);\n            this.pollTimer = undefined;\n        }\n    }\n    sendOneReportAndScheduleNext(sendNextWithExecutableSchema) {\n        return __awaiter(this, void 0, void 0, function* () {\n            this.pollTimer = undefined;\n            if (this.stopped())\n                return;\n            try {\n                const result = yield this.reportServerInfo(sendNextWithExecutableSchema);\n                switch (result.kind) {\n                    case 'next':\n                        this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(result.withExecutableSchema), result.inSeconds * 1000);\n                        return;\n                    case 'stop':\n                        return;\n                }\n            }\n            catch (error) {\n                this.logger.error(`Error reporting server info to Apollo during schema reporting: ${error}`);\n                this.pollTimer = setTimeout(() => this.sendOneReportAndScheduleNext(false), this.fallbackReportingDelayInMs);\n            }\n        });\n    }\n    reportServerInfo(withExecutableSchema) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const { data, errors } = yield this.apolloQuery({\n                info: this.serverInfo,\n                executableSchema: withExecutableSchema\n                    ? this.executableSchemaDocument\n                    : null,\n            });\n            if (errors) {\n                throw new Error((errors || []).map((x) => x.message).join('\\n'));\n            }\n            function msgForUnexpectedResponse(data) {\n                return [\n                    'Unexpected response shape from Apollo when',\n                    'reporting server information for schema reporting. If',\n                    'this continues, please reach out to support@apollographql.com.',\n                    'Received response:',\n                    JSON.stringify(data),\n                ].join(' ');\n            }\n            if (!data || !data.me || !data.me.__typename) {\n                throw new Error(msgForUnexpectedResponse(data));\n            }\n            if (data.me.__typename === 'UserMutation') {\n                this.isStopped = true;\n                throw new Error([\n                    'This server was configured with an API key for a user.',\n                    \"Only a service's API key may be used for schema reporting.\",\n                    'Please visit the settings for this graph at',\n                    'https://studio.apollographql.com/ to obtain an API key for a service.',\n                ].join(' '));\n            }\n            else if (data.me.__typename === 'ServiceMutation' &&\n                data.me.reportServerInfo) {\n                if (data.me.reportServerInfo.__typename == 'ReportServerInfoResponse') {\n                    return {\n                        kind: 'next',\n                        inSeconds: data.me.reportServerInfo.inSeconds,\n                        withExecutableSchema: data.me.reportServerInfo.withExecutableSchema,\n                    };\n                }\n                else {\n                    this.logger.error([\n                        'Received input validation error from Apollo:',\n                        data.me.reportServerInfo.message,\n                        'Stopping reporting. Please fix the input errors.',\n                    ].join(' '));\n                    this.stop();\n                    return {\n                        stopReporting: true,\n                        kind: 'stop',\n                    };\n                }\n            }\n            throw new Error(msgForUnexpectedResponse(data));\n        });\n    }\n    apolloQuery(variables) {\n        return __awaiter(this, void 0, void 0, function* () {\n            const request = {\n                query: exports.reportServerInfoGql,\n                operationName: 'ReportServerInfo',\n                variables: variables,\n            };\n            const httpRequest = new apollo_server_env_1.Request(this.endpointUrl, {\n                method: 'POST',\n                headers: this.headers,\n                body: JSON.stringify(request),\n            });\n            const httpResponse = yield apollo_server_env_1.fetch(httpRequest);\n            if (!httpResponse.ok) {\n                throw new Error([\n                    `An unexpected HTTP status code (${httpResponse.status}) was`,\n                    'encountered during schema reporting.',\n                ].join(' '));\n            }\n            try {\n                return yield httpResponse.json();\n            }\n            catch (error) {\n                throw new Error([\n                    \"Couldn't report server info to Apollo.\",\n                    'Parsing response as JSON failed.',\n                    'If this continues please reach out to support@apollographql.com',\n                    error,\n                ].join(' '));\n            }\n        });\n    }\n}\nexports.SchemaReporter = SchemaReporter;\n//# sourceMappingURL=schemaReporter.js.map"]},"metadata":{},"sourceType":"script"}