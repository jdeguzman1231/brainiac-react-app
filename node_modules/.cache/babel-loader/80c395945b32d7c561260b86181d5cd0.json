{"ast":null,"code":"var _jsxFileName = \"/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/context/auth.js\",\n    _s = $RefreshSig$();\n\nimport React, { useReducer, createContext } from 'react';\nimport jwtDecode from 'jwt-decode';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst initialState = {\n  user: null\n};\n\nif (localStorage.getItem(\"jwtToken\")) {\n  const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\n\n  if (decodedToken.exp * 1000 < Date.now()) {\n    localStorage.removeItem('jwtToken');\n  } else {\n    initialState.user = decodedToken;\n  }\n}\n\nconst AuthContext = /*#__PURE__*/createContext({\n  user: null,\n  login: userData => {},\n  logout: () => {}\n});\n\nfunction authReducer(state, action) {\n  switch (action.type) {\n    case 'LOGIN':\n      return { ...state,\n        user: action.payload\n      };\n\n    case 'LOGOUT':\n      return { ...state,\n        user: null\n      };\n\n    default:\n      return state;\n  }\n}\n\nfunction AuthProvider(props) {\n  _s();\n\n  const [state, dispatch] = useReducer(authReducer, initialState);\n\n  function login(userData) {\n    localStorage.setItem(\"jwtToken\", userData.token);\n    dispatch({\n      type: 'LOGIN',\n      payload: userData\n    });\n  }\n\n  function logout() {\n    localStorage.removeItem(\"jwtToken\");\n    dispatch({\n      type: 'LOGOUT'\n    });\n  }\n\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: {\n      user: state.user,\n      login,\n      logout\n    },\n    ...props\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 60,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AuthProvider, \"6JWkGZ32UPfojeNx+xqn8ZU8A0Q=\");\n\n_c = AuthProvider;\nexport { AuthContext, AuthProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"sources":["/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/context/auth.js"],"names":["React","useReducer","createContext","jwtDecode","initialState","user","localStorage","getItem","decodedToken","exp","Date","now","removeItem","AuthContext","login","userData","logout","authReducer","state","action","type","payload","AuthProvider","props","dispatch","setItem","token"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,EAA2BC,aAA3B,QAA+C,OAA/C;AACA,OAAOC,SAAP,MAAsB,YAAtB;;AAEA,MAAMC,YAAY,GAAG;AACjBC,EAAAA,IAAI,EAAE;AADW,CAArB;;AAIA,IAAGC,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAH,EAAqC;AACjC,QAAMC,YAAY,GAAGL,SAAS,CAACG,YAAY,CAACC,OAAb,CAAqB,UAArB,CAAD,CAA9B;;AACA,MAAGC,YAAY,CAACC,GAAb,GAAmB,IAAnB,GAA0BC,IAAI,CAACC,GAAL,EAA7B,EAAwC;AACpCL,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACH,GAFD,MAGK;AACDR,IAAAA,YAAY,CAACC,IAAb,GAAoBG,YAApB;AACH;AACJ;;AAED,MAAMK,WAAW,gBAAGX,aAAa,CAAC;AAC9BG,EAAAA,IAAI,EAAE,IADwB;AAE9BS,EAAAA,KAAK,EAAGC,QAAD,IAAc,CAAE,CAFO;AAG9BC,EAAAA,MAAM,EAAE,MAAM,CAAE;AAHc,CAAD,CAAjC;;AAMA,SAASC,WAAT,CAAqBC,KAArB,EAA4BC,MAA5B,EAAoC;AAChC,UAAOA,MAAM,CAACC,IAAd;AACI,SAAK,OAAL;AACI,aAAO,EACH,GAAGF,KADA;AAEHb,QAAAA,IAAI,EAAEc,MAAM,CAACE;AAFV,OAAP;;AAIJ,SAAK,QAAL;AACI,aAAO,EACH,GAAGH,KADA;AAEHb,QAAAA,IAAI,EAAE;AAFH,OAAP;;AAIJ;AACI,aAAOa,KAAP;AAZR;AAcH;;AAED,SAASI,YAAT,CAAsBC,KAAtB,EAA4B;AAAA;;AACxB,QAAM,CAACL,KAAD,EAAQM,QAAR,IAAoBvB,UAAU,CAACgB,WAAD,EAAcb,YAAd,CAApC;;AAEA,WAASU,KAAT,CAAeC,QAAf,EAAwB;AACpBT,IAAAA,YAAY,CAACmB,OAAb,CAAqB,UAArB,EAAiCV,QAAQ,CAACW,KAA1C;AACAF,IAAAA,QAAQ,CAAC;AACLJ,MAAAA,IAAI,EAAE,OADD;AAELC,MAAAA,OAAO,EAAEN;AAFJ,KAAD,CAAR;AAIH;;AAED,WAASC,MAAT,GAAiB;AACbV,IAAAA,YAAY,CAACM,UAAb,CAAwB,UAAxB;AACAY,IAAAA,QAAQ,CAAC;AACLJ,MAAAA,IAAI,EAAE;AADD,KAAD,CAAR;AAGH;;AAED,sBACI,QAAC,WAAD,CAAa,QAAb;AACI,IAAA,KAAK,EAAE;AAAEf,MAAAA,IAAI,EAAEa,KAAK,CAACb,IAAd;AAAoBS,MAAAA,KAApB;AAA2BE,MAAAA;AAA3B,KADX;AAAA,OAEQO;AAFR;AAAA;AAAA;AAAA;AAAA,UADJ;AAMH;;GAxBQD,Y;;KAAAA,Y;AA0BT,SAAQT,WAAR,EAAqBS,YAArB","sourcesContent":["import React, {useReducer, createContext} from 'react'\nimport jwtDecode from 'jwt-decode'\n\nconst initialState = {\n    user: null\n}\n\nif(localStorage.getItem(\"jwtToken\")) {\n    const decodedToken = jwtDecode(localStorage.getItem(\"jwtToken\"));\n    if(decodedToken.exp * 1000 < Date.now()){\n        localStorage.removeItem('jwtToken')\n    }\n    else {\n        initialState.user = decodedToken;\n    }\n}\n\nconst AuthContext = createContext({\n    user: null,\n    login: (userData) => {}, \n    logout: () => {},\n})\n\nfunction authReducer(state, action) {\n    switch(action.type) {\n        case 'LOGIN':\n            return {\n                ...state,\n                user: action.payload\n            }\n        case 'LOGOUT': \n            return {\n                ...state, \n                user: null\n            }\n        default: \n            return state;\n    }\n} \n\nfunction AuthProvider(props){\n    const [state, dispatch] = useReducer(authReducer, initialState);\n\n    function login(userData){\n        localStorage.setItem(\"jwtToken\", userData.token);\n        dispatch({\n            type: 'LOGIN',\n            payload: userData\n        })\n    }\n\n    function logout(){\n        localStorage.removeItem(\"jwtToken\");\n        dispatch({\n            type: 'LOGOUT'\n        })\n    }\n\n    return(\n        <AuthContext.Provider \n            value={{ user: state.user, login, logout}}\n            {...props}\n        />\n    )\n}\n\nexport {AuthContext, AuthProvider}"]},"metadata":{},"sourceType":"module"}