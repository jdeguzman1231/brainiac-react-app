{"ast":null,"code":"var _jsxFileName = \"/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/pages/AccountPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext } from 'react';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction AccountPage(props) {\n  _s();\n\n  var username = props.match.params.username;\n  console.log(useQuery(FETCH_USER_QUERY, {\n    variables: {\n      username: username\n    }\n  }));\n  const [getUser, {\n    loading\n  }] = useQuery(FETCH_USER_QUERY, {\n    variables: {\n      username: username\n    }\n  });\n  const data = user.data.getUser;\n  let userText;\n\n  if (!user) {\n    userText = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading user...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 21,\n      columnNumber: 20\n    }, this);\n  } else {\n    userText = /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \" User Found\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 25,\n      columnNumber: 13\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: [\" \", userText, \" \"]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Account Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 31,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Username: \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: data.username\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 29,\n    columnNumber: 9\n  }, this);\n}\n\n_s(AccountPage, \"s9EW+J8gCpqzt1b2RP8SoFHDQv0=\", false, function () {\n  return [useQuery, useQuery];\n});\n\n_c = AccountPage;\nexport default AccountPage;\nconst FETCH_USER_QUERY = gql`\n    query($username: String!) {\n        getUser(username: $username) \n        {\n            username\n            email\n            name\n            createdPlatforms\n            playedPlatforms\n        }\n    }\n`;\n\nvar _c;\n\n$RefreshReg$(_c, \"AccountPage\");","map":{"version":3,"sources":["/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/pages/AccountPage.js"],"names":["React","useContext","useQuery","gql","AccountPage","props","username","match","params","console","log","FETCH_USER_QUERY","variables","getUser","loading","data","user","userText"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,UAAf,QAAgC,OAAhC;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,OAAOC,GAAP,MAAgB,aAAhB;;;AAEA,SAASC,WAAT,CAAqBC,KAArB,EAA4B;AAAA;;AACxB,MAAIC,QAAQ,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBF,QAAlC;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACS,gBAAD,EAAmB;AACnCC,IAAAA,SAAS,EAAE;AACPN,MAAAA,QAAQ,EAAEA;AADH;AADwB,GAAnB,CAApB;AAKA,QAAM,CAACO,OAAD,EAAU;AAACC,IAAAA;AAAD,GAAV,IAAuBZ,QAAQ,CAACS,gBAAD,EAAmB;AACpDC,IAAAA,SAAS,EAAE;AACPN,MAAAA,QAAQ,EAAEA;AADH;AADyC,GAAnB,CAArC;AAKA,QAAMS,IAAI,GAAGC,IAAI,CAACD,IAAL,CAAUF,OAAvB;AAEA,MAAII,QAAJ;;AACA,MAAI,CAACD,IAAL,EAAW;AACPC,IAAAA,QAAQ,gBAAG;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAAX;AACH,GAFD,MAEO;AAEHA,IAAAA,QAAQ,gBACJ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAGH;;AACD,sBACI;AAAA,4BACI;AAAA,sBAAMA,QAAN;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ,eAII;AAAA,gBAAIF,IAAI,CAACT;AAAT;AAAA;AAAA;AAAA;AAAA,YAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAQH;;GA/BQF,W;UAEOF,Q,EAKiBA,Q;;;KAPxBE,W;AAiCT,eAAeA,WAAf;AAEA,MAAMO,gBAAgB,GAAGR,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAXA","sourcesContent":["import React, {useContext} from 'react';\nimport { useQuery } from '@apollo/client';\nimport gql from 'graphql-tag';\n\nfunction AccountPage(props) {\n    var username = props.match.params.username\n    console.log(useQuery(FETCH_USER_QUERY, {\n        variables: {\n            username: username\n        }\n    }));\n    const [getUser, {loading}] = useQuery(FETCH_USER_QUERY, {\n        variables: {\n            username: username\n        }\n    });\n    const data = user.data.getUser;\n\n    let userText\n    if (!user) {\n        userText = <p>Loading user...</p>\n    } else {\n\n        userText = (\n            <p> User Found</p>\n        )\n    }\n    return (\n        <div>\n            <h1> {userText} </h1>\n            <h1>Account Page</h1>\n            <p>Username: </p>\n            <p>{data.username}</p>\n        </div>\n    );\n}\n\nexport default AccountPage;\n\nconst FETCH_USER_QUERY = gql`\n    query($username: String!) {\n        getUser(username: $username) \n        {\n            username\n            email\n            name\n            createdPlatforms\n            playedPlatforms\n        }\n    }\n`"]},"metadata":{},"sourceType":"module"}