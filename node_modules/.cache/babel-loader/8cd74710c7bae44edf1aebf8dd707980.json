{"ast":null,"code":"var _jsxFileName = \"/Users/darrenjiang/Desktop/brainiac Client/src/pages/PlatformPage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { Container, Col, Row, Nav } from 'react-bootstrap';\nimport GameCard from '../components/GameCard';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlatformPage(props) {\n  _s();\n\n  const pplatformID = props.match.params.platformID;\n  var platformID = parseInt(pplatformID, 10);\n  const {\n    loading,\n    data: pdata\n  } = useQuery(FETCH_PLATFORM_QUERY, {\n    variables: {\n      platformID: platformID\n    }\n  });\n\n  if (loading) {\n    return \"loading\";\n  } else {\n    console.log(pdata);\n    const platform = pdata.getPlatform;\n    const platform_settings = '/platform' + pplatformID + '/settings';\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: platform.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 21,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"created by \", platform.creatorName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 22,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Nav, {\n        variant: \"pills\",\n        children: /*#__PURE__*/_jsxDEV(Nav.item, {\n          children: /*#__PURE__*/_jsxDEV(Nav.Link, {\n            href: platform_settings,\n            children: \"Settings\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 25,\n            columnNumber: 25\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 24,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 23,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: \"Games:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 28,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: /*#__PURE__*/_jsxDEV(Row, {\n          children: loading ? /*#__PURE__*/_jsxDEV(\"h1\", {\n            children: \"Loading...\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 30,\n            columnNumber: 38\n          }, this) : platform.games && platform.games.map(gameID => /*#__PURE__*/_jsxDEV(Col, {\n            children: /*#__PURE__*/_jsxDEV(GameCard, {\n              gameID: gameID\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 33,\n              columnNumber: 33\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 32,\n            columnNumber: 29\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 30,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 29,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(PlatformPage, \"v9ZsAleX3ViZdvWIGVRzU55zzM8=\", false, function () {\n  return [useQuery];\n});\n\n_c = PlatformPage;\nconst FETCH_PLATFORM_QUERY = gql`\n    query($platformID: Int!){\n        getPlatform(platformID: $platformID){\n            name\n            creatorName\n            description\n            games\n        }\n    }  \n`;\nexport default PlatformPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlatformPage\");","map":{"version":3,"sources":["/Users/darrenjiang/Desktop/brainiac Client/src/pages/PlatformPage.js"],"names":["React","gql","useQuery","Container","Col","Row","Nav","GameCard","PlatformPage","props","pplatformID","match","params","platformID","parseInt","loading","data","pdata","FETCH_PLATFORM_QUERY","variables","console","log","platform","getPlatform","platform_settings","name","creatorName","games","map","gameID"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAASC,QAAT,QAAyB,gBAAzB;AACA,SAASC,SAAT,EAAoBC,GAApB,EAAyBC,GAAzB,EAA8BC,GAA9B,QAAyC,iBAAzC;AACA,OAAOC,QAAP,MAAqB,wBAArB;;;AAEA,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AACzB,QAAMC,WAAW,GAAGD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,UAAvC;AACA,MAAIA,UAAU,GAAGC,QAAQ,CAACJ,WAAD,EAAc,EAAd,CAAzB;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA,IAAI,EAAEC;AAAjB,MAA2Bf,QAAQ,CAACgB,oBAAD,EAAuB;AAC5DC,IAAAA,SAAS,EAAE;AAAEN,MAAAA,UAAU,EAAEA;AAAd;AADiD,GAAvB,CAAzC;;AAIA,MAAIE,OAAJ,EAAa;AAAE,WAAO,SAAP;AAAkB,GAAjC,MACK;AACDK,IAAAA,OAAO,CAACC,GAAR,CAAYJ,KAAZ;AACA,UAAMK,QAAQ,GAAGL,KAAK,CAACM,WAAvB;AACA,UAAMC,iBAAiB,GAAG,cAAcd,WAAd,GAA4B,WAAtD;AACA,wBACI;AAAA,8BACI;AAAA,kBAAKY,QAAQ,CAACG;AAAd;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kCAAeH,QAAQ,CAACI,WAAxB;AAAA;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI,QAAC,GAAD;AAAK,QAAA,OAAO,EAAC,OAAb;AAAA,+BACI,QAAC,GAAD,CAAK,IAAL;AAAA,iCACI,QAAC,GAAD,CAAK,IAAL;AAAU,YAAA,IAAI,EAAEF,iBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cAHJ,eAQI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cARJ,eASI,QAAC,SAAD;AAAA,+BACI,QAAC,GAAD;AAAA,oBAAMT,OAAO,gBAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAAJ,GACTO,QAAQ,CAACK,KAAT,IAAkBL,QAAQ,CAACK,KAAT,CAAeC,GAAf,CAAoBC,MAAD,iBACjC,QAAC,GAAD;AAAA,mCACI,QAAC,QAAD;AAAU,cAAA,MAAM,EAAEA;AAAlB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,kBADc;AADtB;AAAA;AAAA;AAAA;AAAA;AADJ;AAAA;AAAA;AAAA;AAAA,cATJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAsBH;AACJ;;GAnCQrB,Y;UAG4BN,Q;;;KAH5BM,Y;AAqCT,MAAMU,oBAAoB,GAAGjB,GAAI;AACjC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,eAAeO,YAAf","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag'\nimport { useQuery } from '@apollo/client'\nimport { Container, Col, Row, Nav } from 'react-bootstrap'\nimport GameCard from '../components/GameCard'\n\nfunction PlatformPage(props) {\n    const pplatformID = props.match.params.platformID;\n    var platformID = parseInt(pplatformID, 10);\n    const { loading, data: pdata } = useQuery(FETCH_PLATFORM_QUERY, {\n        variables: { platformID: platformID },\n    });\n\n    if (loading) { return \"loading\" }\n    else {\n        console.log(pdata)\n        const platform = pdata.getPlatform\n        const platform_settings = '/platform' + pplatformID + '/settings';\n        return (\n            <div>\n                <h1>{platform.name}</h1>\n                <p>created by {platform.creatorName}</p>\n                <Nav variant=\"pills\">\n                    <Nav.item>\n                        <Nav.Link href={platform_settings}>Settings</Nav.Link>\n                    </Nav.item>\n                </Nav>\n                <h3>Games:</h3>\n                <Container>\n                    <Row>{loading ? (<h1>Loading...</h1>) : (\n                        platform.games && platform.games.map((gameID) => (\n                            <Col >\n                                <GameCard gameID={gameID} />\n                            </Col>\n                        ))\n                    )}\n                    </Row>\n                </Container>\n            </div>\n        )\n    }\n}\n\nconst FETCH_PLATFORM_QUERY = gql`\n    query($platformID: Int!){\n        getPlatform(platformID: $platformID){\n            name\n            creatorName\n            description\n            games\n        }\n    }  \n`;\n\nexport default PlatformPage;"]},"metadata":{},"sourceType":"module"}