{"ast":null,"code":"/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"@apollo/protobufjs/minimal\"); // Common aliases\n\n\nvar $Reader = $protobuf.Reader,\n    $Writer = $protobuf.Writer,\n    $util = $protobuf.util; // Exported root namespace\n\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.Trace = function () {\n  /**\n   * Properties of a Trace.\n   * @exports ITrace\n   * @interface ITrace\n   * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n   * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n   * @property {number|null} [durationNs] Trace durationNs\n   * @property {Trace.INode|null} [root] Trace root\n   * @property {string|null} [signature] Trace signature\n   * @property {string|null} [unexecutedOperationBody] Trace unexecutedOperationBody\n   * @property {string|null} [unexecutedOperationName] Trace unexecutedOperationName\n   * @property {Trace.IDetails|null} [details] Trace details\n   * @property {string|null} [clientName] Trace clientName\n   * @property {string|null} [clientVersion] Trace clientVersion\n   * @property {string|null} [clientAddress] Trace clientAddress\n   * @property {string|null} [clientReferenceId] Trace clientReferenceId\n   * @property {Trace.IHTTP|null} [http] Trace http\n   * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n   * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n   * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n   * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n   * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n   * @property {boolean|null} [registeredOperation] Trace registeredOperation\n   * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n   * @property {string|null} [legacySignatureNeedsResigning] Trace legacySignatureNeedsResigning\n   */\n\n  /**\n   * Constructs a new Trace.\n   * @exports Trace\n   * @classdesc Represents a Trace.\n   * @implements ITrace\n   * @constructor\n   * @param {ITrace=} [properties] Properties to set\n   */\n  function Trace(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * Trace startTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} startTime\n   * @memberof Trace\n   * @instance\n   */\n\n\n  Trace.prototype.startTime = null;\n  /**\n   * Trace endTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} endTime\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.endTime = null;\n  /**\n   * Trace durationNs.\n   * @member {number} durationNs\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.durationNs = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Trace root.\n   * @member {Trace.INode|null|undefined} root\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.root = null;\n  /**\n   * Trace signature.\n   * @member {string} signature\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.signature = \"\";\n  /**\n   * Trace unexecutedOperationBody.\n   * @member {string} unexecutedOperationBody\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.unexecutedOperationBody = \"\";\n  /**\n   * Trace unexecutedOperationName.\n   * @member {string} unexecutedOperationName\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.unexecutedOperationName = \"\";\n  /**\n   * Trace details.\n   * @member {Trace.IDetails|null|undefined} details\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.details = null;\n  /**\n   * Trace clientName.\n   * @member {string} clientName\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.clientName = \"\";\n  /**\n   * Trace clientVersion.\n   * @member {string} clientVersion\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.clientVersion = \"\";\n  /**\n   * Trace clientAddress.\n   * @member {string} clientAddress\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.clientAddress = \"\";\n  /**\n   * Trace clientReferenceId.\n   * @member {string} clientReferenceId\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.clientReferenceId = \"\";\n  /**\n   * Trace http.\n   * @member {Trace.IHTTP|null|undefined} http\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.http = null;\n  /**\n   * Trace cachePolicy.\n   * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.cachePolicy = null;\n  /**\n   * Trace queryPlan.\n   * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.queryPlan = null;\n  /**\n   * Trace fullQueryCacheHit.\n   * @member {boolean} fullQueryCacheHit\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.fullQueryCacheHit = false;\n  /**\n   * Trace persistedQueryHit.\n   * @member {boolean} persistedQueryHit\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.persistedQueryHit = false;\n  /**\n   * Trace persistedQueryRegister.\n   * @member {boolean} persistedQueryRegister\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.persistedQueryRegister = false;\n  /**\n   * Trace registeredOperation.\n   * @member {boolean} registeredOperation\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.registeredOperation = false;\n  /**\n   * Trace forbiddenOperation.\n   * @member {boolean} forbiddenOperation\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.forbiddenOperation = false;\n  /**\n   * Trace legacySignatureNeedsResigning.\n   * @member {string} legacySignatureNeedsResigning\n   * @memberof Trace\n   * @instance\n   */\n\n  Trace.prototype.legacySignatureNeedsResigning = \"\";\n  /**\n   * Creates a new Trace instance using the specified properties.\n   * @function create\n   * @memberof Trace\n   * @static\n   * @param {ITrace=} [properties] Properties to set\n   * @returns {Trace} Trace instance\n   */\n\n  Trace.create = function create(properties) {\n    return new Trace(properties);\n  };\n  /**\n   * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n   * @function encode\n   * @memberof Trace\n   * @static\n   * @param {ITrace} message Trace message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Trace.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\")) $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).fork()).ldelim();\n    if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\")) $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(\n    /* id 4, wireType 2 =*/\n    34).fork()).ldelim();\n    if (message.legacySignatureNeedsResigning != null && Object.hasOwnProperty.call(message, \"legacySignatureNeedsResigning\")) writer.uint32(\n    /* id 5, wireType 2 =*/\n    42).string(message.legacySignatureNeedsResigning);\n    if (message.details != null && Object.hasOwnProperty.call(message, \"details\")) $root.Trace.Details.encode(message.details, writer.uint32(\n    /* id 6, wireType 2 =*/\n    50).fork()).ldelim();\n    if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\")) writer.uint32(\n    /* id 7, wireType 2 =*/\n    58).string(message.clientName);\n    if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\")) writer.uint32(\n    /* id 8, wireType 2 =*/\n    66).string(message.clientVersion);\n    if (message.clientAddress != null && Object.hasOwnProperty.call(message, \"clientAddress\")) writer.uint32(\n    /* id 9, wireType 2 =*/\n    74).string(message.clientAddress);\n    if (message.http != null && Object.hasOwnProperty.call(message, \"http\")) $root.Trace.HTTP.encode(message.http, writer.uint32(\n    /* id 10, wireType 2 =*/\n    82).fork()).ldelim();\n    if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\")) writer.uint32(\n    /* id 11, wireType 0 =*/\n    88).uint64(message.durationNs);\n    if (message.root != null && Object.hasOwnProperty.call(message, \"root\")) $root.Trace.Node.encode(message.root, writer.uint32(\n    /* id 14, wireType 2 =*/\n    114).fork()).ldelim();\n    if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\")) $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(\n    /* id 18, wireType 2 =*/\n    146).fork()).ldelim();\n    if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\")) writer.uint32(\n    /* id 19, wireType 2 =*/\n    154).string(message.signature);\n    if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\")) writer.uint32(\n    /* id 20, wireType 0 =*/\n    160).bool(message.fullQueryCacheHit);\n    if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\")) writer.uint32(\n    /* id 21, wireType 0 =*/\n    168).bool(message.persistedQueryHit);\n    if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\")) writer.uint32(\n    /* id 22, wireType 0 =*/\n    176).bool(message.persistedQueryRegister);\n    if (message.clientReferenceId != null && Object.hasOwnProperty.call(message, \"clientReferenceId\")) writer.uint32(\n    /* id 23, wireType 2 =*/\n    186).string(message.clientReferenceId);\n    if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\")) writer.uint32(\n    /* id 24, wireType 0 =*/\n    192).bool(message.registeredOperation);\n    if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\")) writer.uint32(\n    /* id 25, wireType 0 =*/\n    200).bool(message.forbiddenOperation);\n    if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\")) $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(\n    /* id 26, wireType 2 =*/\n    210).fork()).ldelim();\n    if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, \"unexecutedOperationBody\")) writer.uint32(\n    /* id 27, wireType 2 =*/\n    218).string(message.unexecutedOperationBody);\n    if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, \"unexecutedOperationName\")) writer.uint32(\n    /* id 28, wireType 2 =*/\n    226).string(message.unexecutedOperationName);\n    return writer;\n  };\n  /**\n   * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Trace\n   * @static\n   * @param {ITrace} message Trace message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Trace.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a Trace message from the specified reader or buffer.\n   * @function decode\n   * @memberof Trace\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Trace} Trace\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Trace.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Trace();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 4:\n          message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n\n        case 11:\n          message.durationNs = reader.uint64();\n          break;\n\n        case 14:\n          message.root = $root.Trace.Node.decode(reader, reader.uint32());\n          break;\n\n        case 19:\n          message.signature = reader.string();\n          break;\n\n        case 27:\n          message.unexecutedOperationBody = reader.string();\n          break;\n\n        case 28:\n          message.unexecutedOperationName = reader.string();\n          break;\n\n        case 6:\n          message.details = $root.Trace.Details.decode(reader, reader.uint32());\n          break;\n\n        case 7:\n          message.clientName = reader.string();\n          break;\n\n        case 8:\n          message.clientVersion = reader.string();\n          break;\n\n        case 9:\n          message.clientAddress = reader.string();\n          break;\n\n        case 23:\n          message.clientReferenceId = reader.string();\n          break;\n\n        case 10:\n          message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n          break;\n\n        case 18:\n          message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n          break;\n\n        case 26:\n          message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n          break;\n\n        case 20:\n          message.fullQueryCacheHit = reader.bool();\n          break;\n\n        case 21:\n          message.persistedQueryHit = reader.bool();\n          break;\n\n        case 22:\n          message.persistedQueryRegister = reader.bool();\n          break;\n\n        case 24:\n          message.registeredOperation = reader.bool();\n          break;\n\n        case 25:\n          message.forbiddenOperation = reader.bool();\n          break;\n\n        case 5:\n          message.legacySignatureNeedsResigning = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a Trace message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Trace\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Trace} Trace\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Trace.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a Trace message.\n   * @function verify\n   * @memberof Trace\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  Trace.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n      if (error) return \"startTime.\" + error;\n    }\n\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n      if (error) return \"endTime.\" + error;\n    }\n\n    if (message.durationNs != null && message.hasOwnProperty(\"durationNs\")) if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high))) return \"durationNs: integer|Long expected\";\n\n    if (message.root != null && message.hasOwnProperty(\"root\")) {\n      var error = $root.Trace.Node.verify(message.root);\n      if (error) return \"root.\" + error;\n    }\n\n    if (message.signature != null && message.hasOwnProperty(\"signature\")) if (!$util.isString(message.signature)) return \"signature: string expected\";\n    if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\")) if (!$util.isString(message.unexecutedOperationBody)) return \"unexecutedOperationBody: string expected\";\n    if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\")) if (!$util.isString(message.unexecutedOperationName)) return \"unexecutedOperationName: string expected\";\n\n    if (message.details != null && message.hasOwnProperty(\"details\")) {\n      var error = $root.Trace.Details.verify(message.details);\n      if (error) return \"details.\" + error;\n    }\n\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) if (!$util.isString(message.clientName)) return \"clientName: string expected\";\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) if (!$util.isString(message.clientVersion)) return \"clientVersion: string expected\";\n    if (message.clientAddress != null && message.hasOwnProperty(\"clientAddress\")) if (!$util.isString(message.clientAddress)) return \"clientAddress: string expected\";\n    if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\")) if (!$util.isString(message.clientReferenceId)) return \"clientReferenceId: string expected\";\n\n    if (message.http != null && message.hasOwnProperty(\"http\")) {\n      var error = $root.Trace.HTTP.verify(message.http);\n      if (error) return \"http.\" + error;\n    }\n\n    if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n      var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n      if (error) return \"cachePolicy.\" + error;\n    }\n\n    if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n      var error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n      if (error) return \"queryPlan.\" + error;\n    }\n\n    if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\")) if (typeof message.fullQueryCacheHit !== \"boolean\") return \"fullQueryCacheHit: boolean expected\";\n    if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\")) if (typeof message.persistedQueryHit !== \"boolean\") return \"persistedQueryHit: boolean expected\";\n    if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\")) if (typeof message.persistedQueryRegister !== \"boolean\") return \"persistedQueryRegister: boolean expected\";\n    if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\")) if (typeof message.registeredOperation !== \"boolean\") return \"registeredOperation: boolean expected\";\n    if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\")) if (typeof message.forbiddenOperation !== \"boolean\") return \"forbiddenOperation: boolean expected\";\n    if (message.legacySignatureNeedsResigning != null && message.hasOwnProperty(\"legacySignatureNeedsResigning\")) if (!$util.isString(message.legacySignatureNeedsResigning)) return \"legacySignatureNeedsResigning: string expected\";\n    return null;\n  };\n  /**\n   * Creates a Trace message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Trace\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Trace} Trace\n   */\n\n\n  Trace.fromObject = function fromObject(object) {\n    if (object instanceof $root.Trace) return object;\n    var message = new $root.Trace();\n\n    if (object.startTime != null) {\n      if (typeof object.startTime !== \"object\") throw TypeError(\".Trace.startTime: object expected\");\n      message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);\n    }\n\n    if (object.endTime != null) {\n      if (typeof object.endTime !== \"object\") throw TypeError(\".Trace.endTime: object expected\");\n      message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);\n    }\n\n    if (object.durationNs != null) if ($util.Long) (message.durationNs = $util.Long.fromValue(object.durationNs)).unsigned = true;else if (typeof object.durationNs === \"string\") message.durationNs = parseInt(object.durationNs, 10);else if (typeof object.durationNs === \"number\") message.durationNs = object.durationNs;else if (typeof object.durationNs === \"object\") message.durationNs = new $util.LongBits(object.durationNs.low >>> 0, object.durationNs.high >>> 0).toNumber(true);\n\n    if (object.root != null) {\n      if (typeof object.root !== \"object\") throw TypeError(\".Trace.root: object expected\");\n      message.root = $root.Trace.Node.fromObject(object.root);\n    }\n\n    if (object.signature != null) message.signature = String(object.signature);\n    if (object.unexecutedOperationBody != null) message.unexecutedOperationBody = String(object.unexecutedOperationBody);\n    if (object.unexecutedOperationName != null) message.unexecutedOperationName = String(object.unexecutedOperationName);\n\n    if (object.details != null) {\n      if (typeof object.details !== \"object\") throw TypeError(\".Trace.details: object expected\");\n      message.details = $root.Trace.Details.fromObject(object.details);\n    }\n\n    if (object.clientName != null) message.clientName = String(object.clientName);\n    if (object.clientVersion != null) message.clientVersion = String(object.clientVersion);\n    if (object.clientAddress != null) message.clientAddress = String(object.clientAddress);\n    if (object.clientReferenceId != null) message.clientReferenceId = String(object.clientReferenceId);\n\n    if (object.http != null) {\n      if (typeof object.http !== \"object\") throw TypeError(\".Trace.http: object expected\");\n      message.http = $root.Trace.HTTP.fromObject(object.http);\n    }\n\n    if (object.cachePolicy != null) {\n      if (typeof object.cachePolicy !== \"object\") throw TypeError(\".Trace.cachePolicy: object expected\");\n      message.cachePolicy = $root.Trace.CachePolicy.fromObject(object.cachePolicy);\n    }\n\n    if (object.queryPlan != null) {\n      if (typeof object.queryPlan !== \"object\") throw TypeError(\".Trace.queryPlan: object expected\");\n      message.queryPlan = $root.Trace.QueryPlanNode.fromObject(object.queryPlan);\n    }\n\n    if (object.fullQueryCacheHit != null) message.fullQueryCacheHit = Boolean(object.fullQueryCacheHit);\n    if (object.persistedQueryHit != null) message.persistedQueryHit = Boolean(object.persistedQueryHit);\n    if (object.persistedQueryRegister != null) message.persistedQueryRegister = Boolean(object.persistedQueryRegister);\n    if (object.registeredOperation != null) message.registeredOperation = Boolean(object.registeredOperation);\n    if (object.forbiddenOperation != null) message.forbiddenOperation = Boolean(object.forbiddenOperation);\n    if (object.legacySignatureNeedsResigning != null) message.legacySignatureNeedsResigning = String(object.legacySignatureNeedsResigning);\n    return message;\n  };\n  /**\n   * Creates a plain object from a Trace message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Trace\n   * @static\n   * @param {Trace} message Trace\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Trace.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.endTime = null;\n      object.startTime = null;\n      object.legacySignatureNeedsResigning = \"\";\n      object.details = null;\n      object.clientName = \"\";\n      object.clientVersion = \"\";\n      object.clientAddress = \"\";\n      object.http = null;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.durationNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.durationNs = options.longs === String ? \"0\" : 0;\n\n      object.root = null;\n      object.cachePolicy = null;\n      object.signature = \"\";\n      object.fullQueryCacheHit = false;\n      object.persistedQueryHit = false;\n      object.persistedQueryRegister = false;\n      object.clientReferenceId = \"\";\n      object.registeredOperation = false;\n      object.forbiddenOperation = false;\n      object.queryPlan = null;\n      object.unexecutedOperationBody = \"\";\n      object.unexecutedOperationName = \"\";\n    }\n\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n    if (message.startTime != null && message.hasOwnProperty(\"startTime\")) object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n    if (message.legacySignatureNeedsResigning != null && message.hasOwnProperty(\"legacySignatureNeedsResigning\")) object.legacySignatureNeedsResigning = message.legacySignatureNeedsResigning;\n    if (message.details != null && message.hasOwnProperty(\"details\")) object.details = $root.Trace.Details.toObject(message.details, options);\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) object.clientName = message.clientName;\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) object.clientVersion = message.clientVersion;\n    if (message.clientAddress != null && message.hasOwnProperty(\"clientAddress\")) object.clientAddress = message.clientAddress;\n    if (message.http != null && message.hasOwnProperty(\"http\")) object.http = $root.Trace.HTTP.toObject(message.http, options);\n    if (message.durationNs != null && message.hasOwnProperty(\"durationNs\")) if (typeof message.durationNs === \"number\") object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;else object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n    if (message.root != null && message.hasOwnProperty(\"root\")) object.root = $root.Trace.Node.toObject(message.root, options);\n    if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n    if (message.signature != null && message.hasOwnProperty(\"signature\")) object.signature = message.signature;\n    if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\")) object.fullQueryCacheHit = message.fullQueryCacheHit;\n    if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\")) object.persistedQueryHit = message.persistedQueryHit;\n    if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\")) object.persistedQueryRegister = message.persistedQueryRegister;\n    if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\")) object.clientReferenceId = message.clientReferenceId;\n    if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\")) object.registeredOperation = message.registeredOperation;\n    if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\")) object.forbiddenOperation = message.forbiddenOperation;\n    if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n    if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\")) object.unexecutedOperationBody = message.unexecutedOperationBody;\n    if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\")) object.unexecutedOperationName = message.unexecutedOperationName;\n    return object;\n  };\n  /**\n   * Converts this Trace to JSON.\n   * @function toJSON\n   * @memberof Trace\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Trace.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  Trace.CachePolicy = function () {\n    /**\n     * Properties of a CachePolicy.\n     * @memberof Trace\n     * @interface ICachePolicy\n     * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n     * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n     */\n\n    /**\n     * Constructs a new CachePolicy.\n     * @memberof Trace\n     * @classdesc Represents a CachePolicy.\n     * @implements ICachePolicy\n     * @constructor\n     * @param {Trace.ICachePolicy=} [properties] Properties to set\n     */\n    function CachePolicy(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * CachePolicy scope.\n     * @member {Trace.CachePolicy.Scope} scope\n     * @memberof Trace.CachePolicy\n     * @instance\n     */\n\n\n    CachePolicy.prototype.scope = 0;\n    /**\n     * CachePolicy maxAgeNs.\n     * @member {number} maxAgeNs\n     * @memberof Trace.CachePolicy\n     * @instance\n     */\n\n    CachePolicy.prototype.maxAgeNs = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n    /**\n     * Creates a new CachePolicy instance using the specified properties.\n     * @function create\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.ICachePolicy=} [properties] Properties to set\n     * @returns {Trace.CachePolicy} CachePolicy instance\n     */\n\n    CachePolicy.create = function create(properties) {\n      return new CachePolicy(properties);\n    };\n    /**\n     * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CachePolicy.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\")) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).int32(message.scope);\n      if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\")) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).int64(message.maxAgeNs);\n      return writer;\n    };\n    /**\n     * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a CachePolicy message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.CachePolicy} CachePolicy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CachePolicy.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.CachePolicy();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.scope = reader.int32();\n            break;\n\n          case 2:\n            message.maxAgeNs = reader.int64();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.CachePolicy} CachePolicy\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a CachePolicy message.\n     * @function verify\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    CachePolicy.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.scope != null && message.hasOwnProperty(\"scope\")) switch (message.scope) {\n        default:\n          return \"scope: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n          break;\n      }\n      if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\")) if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high))) return \"maxAgeNs: integer|Long expected\";\n      return null;\n    };\n    /**\n     * Creates a CachePolicy message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.CachePolicy} CachePolicy\n     */\n\n\n    CachePolicy.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.CachePolicy) return object;\n      var message = new $root.Trace.CachePolicy();\n\n      switch (object.scope) {\n        case \"UNKNOWN\":\n        case 0:\n          message.scope = 0;\n          break;\n\n        case \"PUBLIC\":\n        case 1:\n          message.scope = 1;\n          break;\n\n        case \"PRIVATE\":\n        case 2:\n          message.scope = 2;\n          break;\n      }\n\n      if (object.maxAgeNs != null) if ($util.Long) (message.maxAgeNs = $util.Long.fromValue(object.maxAgeNs)).unsigned = false;else if (typeof object.maxAgeNs === \"string\") message.maxAgeNs = parseInt(object.maxAgeNs, 10);else if (typeof object.maxAgeNs === \"number\") message.maxAgeNs = object.maxAgeNs;else if (typeof object.maxAgeNs === \"object\") message.maxAgeNs = new $util.LongBits(object.maxAgeNs.low >>> 0, object.maxAgeNs.high >>> 0).toNumber();\n      return message;\n    };\n    /**\n     * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.CachePolicy\n     * @static\n     * @param {Trace.CachePolicy} message CachePolicy\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    CachePolicy.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, false);\n          object.maxAgeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.maxAgeNs = options.longs === String ? \"0\" : 0;\n      }\n\n      if (message.scope != null && message.hasOwnProperty(\"scope\")) object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n      if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\")) if (typeof message.maxAgeNs === \"number\") object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;else object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n      return object;\n    };\n    /**\n     * Converts this CachePolicy to JSON.\n     * @function toJSON\n     * @memberof Trace.CachePolicy\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    CachePolicy.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n    /**\n     * Scope enum.\n     * @name Trace.CachePolicy.Scope\n     * @enum {string}\n     * @property {number} UNKNOWN=0 UNKNOWN value\n     * @property {number} PUBLIC=1 PUBLIC value\n     * @property {number} PRIVATE=2 PRIVATE value\n     */\n\n\n    CachePolicy.Scope = function () {\n      var valuesById = {},\n          values = Object.create(valuesById);\n      values[valuesById[0] = \"UNKNOWN\"] = 0;\n      values[valuesById[1] = \"PUBLIC\"] = 1;\n      values[valuesById[2] = \"PRIVATE\"] = 2;\n      return values;\n    }();\n\n    return CachePolicy;\n  }();\n\n  Trace.Details = function () {\n    /**\n     * Properties of a Details.\n     * @memberof Trace\n     * @interface IDetails\n     * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n     * @property {Object.<string,Uint8Array>|null} [deprecatedVariables] Details deprecatedVariables\n     * @property {string|null} [operationName] Details operationName\n     */\n\n    /**\n     * Constructs a new Details.\n     * @memberof Trace\n     * @classdesc Represents a Details.\n     * @implements IDetails\n     * @constructor\n     * @param {Trace.IDetails=} [properties] Properties to set\n     */\n    function Details(properties) {\n      this.variablesJson = {};\n      this.deprecatedVariables = {};\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Details variablesJson.\n     * @member {Object.<string,string>} variablesJson\n     * @memberof Trace.Details\n     * @instance\n     */\n\n\n    Details.prototype.variablesJson = $util.emptyObject;\n    /**\n     * Details deprecatedVariables.\n     * @member {Object.<string,Uint8Array>} deprecatedVariables\n     * @memberof Trace.Details\n     * @instance\n     */\n\n    Details.prototype.deprecatedVariables = $util.emptyObject;\n    /**\n     * Details operationName.\n     * @member {string} operationName\n     * @memberof Trace.Details\n     * @instance\n     */\n\n    Details.prototype.operationName = \"\";\n    /**\n     * Creates a new Details instance using the specified properties.\n     * @function create\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.IDetails=} [properties] Properties to set\n     * @returns {Trace.Details} Details instance\n     */\n\n    Details.create = function create(properties) {\n      return new Details(properties);\n    };\n    /**\n     * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.IDetails} message Details message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Details.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.deprecatedVariables != null && Object.hasOwnProperty.call(message, \"deprecatedVariables\")) for (var keys = Object.keys(message.deprecatedVariables), i = 0; i < keys.length; ++i) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]).uint32(\n      /* id 2, wireType 2 =*/\n      18).bytes(message.deprecatedVariables[keys[i]]).ldelim();\n      if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\")) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.operationName);\n      if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\")) for (var keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i) writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]).uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.variablesJson[keys[i]]).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.IDetails} message Details message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Details.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Details message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Details\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Details} Details\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Details.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.Details(),\n          key;\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 4:\n            reader.skip().pos++;\n            if (message.variablesJson === $util.emptyObject) message.variablesJson = {};\n            key = reader.string();\n            reader.pos++;\n            message.variablesJson[key] = reader.string();\n            break;\n\n          case 1:\n            reader.skip().pos++;\n            if (message.deprecatedVariables === $util.emptyObject) message.deprecatedVariables = {};\n            key = reader.string();\n            reader.pos++;\n            message.deprecatedVariables[key] = reader.bytes();\n            break;\n\n          case 3:\n            message.operationName = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Details message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Details\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Details} Details\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Details.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Details message.\n     * @function verify\n     * @memberof Trace.Details\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Details.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n      if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n        if (!$util.isObject(message.variablesJson)) return \"variablesJson: object expected\";\n        var key = Object.keys(message.variablesJson);\n\n        for (var i = 0; i < key.length; ++i) if (!$util.isString(message.variablesJson[key[i]])) return \"variablesJson: string{k:string} expected\";\n      }\n\n      if (message.deprecatedVariables != null && message.hasOwnProperty(\"deprecatedVariables\")) {\n        if (!$util.isObject(message.deprecatedVariables)) return \"deprecatedVariables: object expected\";\n        var key = Object.keys(message.deprecatedVariables);\n\n        for (var i = 0; i < key.length; ++i) if (!(message.deprecatedVariables[key[i]] && typeof message.deprecatedVariables[key[i]].length === \"number\" || $util.isString(message.deprecatedVariables[key[i]]))) return \"deprecatedVariables: buffer{k:string} expected\";\n      }\n\n      if (message.operationName != null && message.hasOwnProperty(\"operationName\")) if (!$util.isString(message.operationName)) return \"operationName: string expected\";\n      return null;\n    };\n    /**\n     * Creates a Details message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.Details\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.Details} Details\n     */\n\n\n    Details.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.Details) return object;\n      var message = new $root.Trace.Details();\n\n      if (object.variablesJson) {\n        if (typeof object.variablesJson !== \"object\") throw TypeError(\".Trace.Details.variablesJson: object expected\");\n        message.variablesJson = {};\n\n        for (var keys = Object.keys(object.variablesJson), i = 0; i < keys.length; ++i) message.variablesJson[keys[i]] = String(object.variablesJson[keys[i]]);\n      }\n\n      if (object.deprecatedVariables) {\n        if (typeof object.deprecatedVariables !== \"object\") throw TypeError(\".Trace.Details.deprecatedVariables: object expected\");\n        message.deprecatedVariables = {};\n\n        for (var keys = Object.keys(object.deprecatedVariables), i = 0; i < keys.length; ++i) if (typeof object.deprecatedVariables[keys[i]] === \"string\") $util.base64.decode(object.deprecatedVariables[keys[i]], message.deprecatedVariables[keys[i]] = $util.newBuffer($util.base64.length(object.deprecatedVariables[keys[i]])), 0);else if (object.deprecatedVariables[keys[i]].length) message.deprecatedVariables[keys[i]] = object.deprecatedVariables[keys[i]];\n      }\n\n      if (object.operationName != null) message.operationName = String(object.operationName);\n      return message;\n    };\n    /**\n     * Creates a plain object from a Details message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Details\n     * @static\n     * @param {Trace.Details} message Details\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Details.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.objects || options.defaults) {\n        object.deprecatedVariables = {};\n        object.variablesJson = {};\n      }\n\n      if (options.defaults) object.operationName = \"\";\n      var keys2;\n\n      if (message.deprecatedVariables && (keys2 = Object.keys(message.deprecatedVariables)).length) {\n        object.deprecatedVariables = {};\n\n        for (var j = 0; j < keys2.length; ++j) object.deprecatedVariables[keys2[j]] = options.bytes === String ? $util.base64.encode(message.deprecatedVariables[keys2[j]], 0, message.deprecatedVariables[keys2[j]].length) : options.bytes === Array ? Array.prototype.slice.call(message.deprecatedVariables[keys2[j]]) : message.deprecatedVariables[keys2[j]];\n      }\n\n      if (message.operationName != null && message.hasOwnProperty(\"operationName\")) object.operationName = message.operationName;\n\n      if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n        object.variablesJson = {};\n\n        for (var j = 0; j < keys2.length; ++j) object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n      }\n\n      return object;\n    };\n    /**\n     * Converts this Details to JSON.\n     * @function toJSON\n     * @memberof Trace.Details\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Details.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Details;\n  }();\n\n  Trace.Error = function () {\n    /**\n     * Properties of an Error.\n     * @memberof Trace\n     * @interface IError\n     * @property {string|null} [message] Error message\n     * @property {Array.<Trace.ILocation>|null} [location] Error location\n     * @property {number|null} [timeNs] Error timeNs\n     * @property {string|null} [json] Error json\n     */\n\n    /**\n     * Constructs a new Error.\n     * @memberof Trace\n     * @classdesc Represents an Error.\n     * @implements IError\n     * @constructor\n     * @param {Trace.IError=} [properties] Properties to set\n     */\n    function Error(properties) {\n      this.location = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Error message.\n     * @member {string} message\n     * @memberof Trace.Error\n     * @instance\n     */\n\n\n    Error.prototype.message = \"\";\n    /**\n     * Error location.\n     * @member {Array.<Trace.ILocation>} location\n     * @memberof Trace.Error\n     * @instance\n     */\n\n    Error.prototype.location = $util.emptyArray;\n    /**\n     * Error timeNs.\n     * @member {number} timeNs\n     * @memberof Trace.Error\n     * @instance\n     */\n\n    Error.prototype.timeNs = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n    /**\n     * Error json.\n     * @member {string} json\n     * @memberof Trace.Error\n     * @instance\n     */\n\n    Error.prototype.json = \"\";\n    /**\n     * Creates a new Error instance using the specified properties.\n     * @function create\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.IError=} [properties] Properties to set\n     * @returns {Trace.Error} Error instance\n     */\n\n    Error.create = function create(properties) {\n      return new Error(properties);\n    };\n    /**\n     * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Error.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.message != null && Object.hasOwnProperty.call(message, \"message\")) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.message);\n      if (message.location != null && message.location.length) for (var i = 0; i < message.location.length; ++i) $root.Trace.Location.encode(message.location[i], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\")) writer.uint32(\n      /* id 3, wireType 0 =*/\n      24).uint64(message.timeNs);\n      if (message.json != null && Object.hasOwnProperty.call(message, \"json\")) writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).string(message.json);\n      return writer;\n    };\n    /**\n     * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.IError} message Error message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Error.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes an Error message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Error.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.Error();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.message = reader.string();\n            break;\n\n          case 2:\n            if (!(message.location && message.location.length)) message.location = [];\n            message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n            break;\n\n          case 3:\n            message.timeNs = reader.uint64();\n            break;\n\n          case 4:\n            message.json = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes an Error message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Error\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Error} Error\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Error.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies an Error message.\n     * @function verify\n     * @memberof Trace.Error\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Error.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.message != null && message.hasOwnProperty(\"message\")) if (!$util.isString(message.message)) return \"message: string expected\";\n\n      if (message.location != null && message.hasOwnProperty(\"location\")) {\n        if (!Array.isArray(message.location)) return \"location: array expected\";\n\n        for (var i = 0; i < message.location.length; ++i) {\n          var error = $root.Trace.Location.verify(message.location[i]);\n          if (error) return \"location.\" + error;\n        }\n      }\n\n      if (message.timeNs != null && message.hasOwnProperty(\"timeNs\")) if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high))) return \"timeNs: integer|Long expected\";\n      if (message.json != null && message.hasOwnProperty(\"json\")) if (!$util.isString(message.json)) return \"json: string expected\";\n      return null;\n    };\n    /**\n     * Creates an Error message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.Error\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.Error} Error\n     */\n\n\n    Error.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.Error) return object;\n      var message = new $root.Trace.Error();\n      if (object.message != null) message.message = String(object.message);\n\n      if (object.location) {\n        if (!Array.isArray(object.location)) throw TypeError(\".Trace.Error.location: array expected\");\n        message.location = [];\n\n        for (var i = 0; i < object.location.length; ++i) {\n          if (typeof object.location[i] !== \"object\") throw TypeError(\".Trace.Error.location: object expected\");\n          message.location[i] = $root.Trace.Location.fromObject(object.location[i]);\n        }\n      }\n\n      if (object.timeNs != null) if ($util.Long) (message.timeNs = $util.Long.fromValue(object.timeNs)).unsigned = true;else if (typeof object.timeNs === \"string\") message.timeNs = parseInt(object.timeNs, 10);else if (typeof object.timeNs === \"number\") message.timeNs = object.timeNs;else if (typeof object.timeNs === \"object\") message.timeNs = new $util.LongBits(object.timeNs.low >>> 0, object.timeNs.high >>> 0).toNumber(true);\n      if (object.json != null) message.json = String(object.json);\n      return message;\n    };\n    /**\n     * Creates a plain object from an Error message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Error\n     * @static\n     * @param {Trace.Error} message Error\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Error.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n      if (options.arrays || options.defaults) object.location = [];\n\n      if (options.defaults) {\n        object.message = \"\";\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, true);\n          object.timeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.timeNs = options.longs === String ? \"0\" : 0;\n\n        object.json = \"\";\n      }\n\n      if (message.message != null && message.hasOwnProperty(\"message\")) object.message = message.message;\n\n      if (message.location && message.location.length) {\n        object.location = [];\n\n        for (var j = 0; j < message.location.length; ++j) object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n      }\n\n      if (message.timeNs != null && message.hasOwnProperty(\"timeNs\")) if (typeof message.timeNs === \"number\") object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;else object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n      if (message.json != null && message.hasOwnProperty(\"json\")) object.json = message.json;\n      return object;\n    };\n    /**\n     * Converts this Error to JSON.\n     * @function toJSON\n     * @memberof Trace.Error\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Error.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Error;\n  }();\n\n  Trace.HTTP = function () {\n    /**\n     * Properties of a HTTP.\n     * @memberof Trace\n     * @interface IHTTP\n     * @property {Trace.HTTP.Method|null} [method] HTTP method\n     * @property {string|null} [host] HTTP host\n     * @property {string|null} [path] HTTP path\n     * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n     * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n     * @property {number|null} [statusCode] HTTP statusCode\n     * @property {boolean|null} [secure] HTTP secure\n     * @property {string|null} [protocol] HTTP protocol\n     */\n\n    /**\n     * Constructs a new HTTP.\n     * @memberof Trace\n     * @classdesc Represents a HTTP.\n     * @implements IHTTP\n     * @constructor\n     * @param {Trace.IHTTP=} [properties] Properties to set\n     */\n    function HTTP(properties) {\n      this.requestHeaders = {};\n      this.responseHeaders = {};\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * HTTP method.\n     * @member {Trace.HTTP.Method} method\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n\n    HTTP.prototype.method = 0;\n    /**\n     * HTTP host.\n     * @member {string} host\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.host = \"\";\n    /**\n     * HTTP path.\n     * @member {string} path\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.path = \"\";\n    /**\n     * HTTP requestHeaders.\n     * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.requestHeaders = $util.emptyObject;\n    /**\n     * HTTP responseHeaders.\n     * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.responseHeaders = $util.emptyObject;\n    /**\n     * HTTP statusCode.\n     * @member {number} statusCode\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.statusCode = 0;\n    /**\n     * HTTP secure.\n     * @member {boolean} secure\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.secure = false;\n    /**\n     * HTTP protocol.\n     * @member {string} protocol\n     * @memberof Trace.HTTP\n     * @instance\n     */\n\n    HTTP.prototype.protocol = \"\";\n    /**\n     * Creates a new HTTP instance using the specified properties.\n     * @function create\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.IHTTP=} [properties] Properties to set\n     * @returns {Trace.HTTP} HTTP instance\n     */\n\n    HTTP.create = function create(properties) {\n      return new HTTP(properties);\n    };\n    /**\n     * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.IHTTP} message HTTP message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    HTTP.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.method != null && Object.hasOwnProperty.call(message, \"method\")) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).int32(message.method);\n      if (message.host != null && Object.hasOwnProperty.call(message, \"host\")) writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).string(message.host);\n      if (message.path != null && Object.hasOwnProperty.call(message, \"path\")) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.path);\n      if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\")) for (var keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n        writer.uint32(\n        /* id 4, wireType 2 =*/\n        34).fork().uint32(\n        /* id 1, wireType 2 =*/\n        10).string(keys[i]);\n        $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).fork()).ldelim().ldelim();\n      }\n      if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\")) for (var keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n        writer.uint32(\n        /* id 5, wireType 2 =*/\n        42).fork().uint32(\n        /* id 1, wireType 2 =*/\n        10).string(keys[i]);\n        $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).fork()).ldelim().ldelim();\n      }\n      if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\")) writer.uint32(\n      /* id 6, wireType 0 =*/\n      48).uint32(message.statusCode);\n      if (message.secure != null && Object.hasOwnProperty.call(message, \"secure\")) writer.uint32(\n      /* id 8, wireType 0 =*/\n      64).bool(message.secure);\n      if (message.protocol != null && Object.hasOwnProperty.call(message, \"protocol\")) writer.uint32(\n      /* id 9, wireType 2 =*/\n      74).string(message.protocol);\n      return writer;\n    };\n    /**\n     * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.IHTTP} message HTTP message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a HTTP message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.HTTP\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.HTTP} HTTP\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    HTTP.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.HTTP(),\n          key;\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.method = reader.int32();\n            break;\n\n          case 2:\n            message.host = reader.string();\n            break;\n\n          case 3:\n            message.path = reader.string();\n            break;\n\n          case 4:\n            reader.skip().pos++;\n            if (message.requestHeaders === $util.emptyObject) message.requestHeaders = {};\n            key = reader.string();\n            reader.pos++;\n            message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n            break;\n\n          case 5:\n            reader.skip().pos++;\n            if (message.responseHeaders === $util.emptyObject) message.responseHeaders = {};\n            key = reader.string();\n            reader.pos++;\n            message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n            break;\n\n          case 6:\n            message.statusCode = reader.uint32();\n            break;\n\n          case 8:\n            message.secure = reader.bool();\n            break;\n\n          case 9:\n            message.protocol = reader.string();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a HTTP message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.HTTP\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.HTTP} HTTP\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    HTTP.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a HTTP message.\n     * @function verify\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    HTTP.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.method != null && message.hasOwnProperty(\"method\")) switch (message.method) {\n        default:\n          return \"method: enum value expected\";\n\n        case 0:\n        case 1:\n        case 2:\n        case 3:\n        case 4:\n        case 5:\n        case 6:\n        case 7:\n        case 8:\n        case 9:\n          break;\n      }\n      if (message.host != null && message.hasOwnProperty(\"host\")) if (!$util.isString(message.host)) return \"host: string expected\";\n      if (message.path != null && message.hasOwnProperty(\"path\")) if (!$util.isString(message.path)) return \"path: string expected\";\n\n      if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n        if (!$util.isObject(message.requestHeaders)) return \"requestHeaders: object expected\";\n        var key = Object.keys(message.requestHeaders);\n\n        for (var i = 0; i < key.length; ++i) {\n          var error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n          if (error) return \"requestHeaders.\" + error;\n        }\n      }\n\n      if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n        if (!$util.isObject(message.responseHeaders)) return \"responseHeaders: object expected\";\n        var key = Object.keys(message.responseHeaders);\n\n        for (var i = 0; i < key.length; ++i) {\n          var error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n          if (error) return \"responseHeaders.\" + error;\n        }\n      }\n\n      if (message.statusCode != null && message.hasOwnProperty(\"statusCode\")) if (!$util.isInteger(message.statusCode)) return \"statusCode: integer expected\";\n      if (message.secure != null && message.hasOwnProperty(\"secure\")) if (typeof message.secure !== \"boolean\") return \"secure: boolean expected\";\n      if (message.protocol != null && message.hasOwnProperty(\"protocol\")) if (!$util.isString(message.protocol)) return \"protocol: string expected\";\n      return null;\n    };\n    /**\n     * Creates a HTTP message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.HTTP} HTTP\n     */\n\n\n    HTTP.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.HTTP) return object;\n      var message = new $root.Trace.HTTP();\n\n      switch (object.method) {\n        case \"UNKNOWN\":\n        case 0:\n          message.method = 0;\n          break;\n\n        case \"OPTIONS\":\n        case 1:\n          message.method = 1;\n          break;\n\n        case \"GET\":\n        case 2:\n          message.method = 2;\n          break;\n\n        case \"HEAD\":\n        case 3:\n          message.method = 3;\n          break;\n\n        case \"POST\":\n        case 4:\n          message.method = 4;\n          break;\n\n        case \"PUT\":\n        case 5:\n          message.method = 5;\n          break;\n\n        case \"DELETE\":\n        case 6:\n          message.method = 6;\n          break;\n\n        case \"TRACE\":\n        case 7:\n          message.method = 7;\n          break;\n\n        case \"CONNECT\":\n        case 8:\n          message.method = 8;\n          break;\n\n        case \"PATCH\":\n        case 9:\n          message.method = 9;\n          break;\n      }\n\n      if (object.host != null) message.host = String(object.host);\n      if (object.path != null) message.path = String(object.path);\n\n      if (object.requestHeaders) {\n        if (typeof object.requestHeaders !== \"object\") throw TypeError(\".Trace.HTTP.requestHeaders: object expected\");\n        message.requestHeaders = {};\n\n        for (var keys = Object.keys(object.requestHeaders), i = 0; i < keys.length; ++i) {\n          if (typeof object.requestHeaders[keys[i]] !== \"object\") throw TypeError(\".Trace.HTTP.requestHeaders: object expected\");\n          message.requestHeaders[keys[i]] = $root.Trace.HTTP.Values.fromObject(object.requestHeaders[keys[i]]);\n        }\n      }\n\n      if (object.responseHeaders) {\n        if (typeof object.responseHeaders !== \"object\") throw TypeError(\".Trace.HTTP.responseHeaders: object expected\");\n        message.responseHeaders = {};\n\n        for (var keys = Object.keys(object.responseHeaders), i = 0; i < keys.length; ++i) {\n          if (typeof object.responseHeaders[keys[i]] !== \"object\") throw TypeError(\".Trace.HTTP.responseHeaders: object expected\");\n          message.responseHeaders[keys[i]] = $root.Trace.HTTP.Values.fromObject(object.responseHeaders[keys[i]]);\n        }\n      }\n\n      if (object.statusCode != null) message.statusCode = object.statusCode >>> 0;\n      if (object.secure != null) message.secure = Boolean(object.secure);\n      if (object.protocol != null) message.protocol = String(object.protocol);\n      return message;\n    };\n    /**\n     * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.HTTP\n     * @static\n     * @param {Trace.HTTP} message HTTP\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    HTTP.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.objects || options.defaults) {\n        object.requestHeaders = {};\n        object.responseHeaders = {};\n      }\n\n      if (options.defaults) {\n        object.method = options.enums === String ? \"UNKNOWN\" : 0;\n        object.host = \"\";\n        object.path = \"\";\n        object.statusCode = 0;\n        object.secure = false;\n        object.protocol = \"\";\n      }\n\n      if (message.method != null && message.hasOwnProperty(\"method\")) object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n      if (message.host != null && message.hasOwnProperty(\"host\")) object.host = message.host;\n      if (message.path != null && message.hasOwnProperty(\"path\")) object.path = message.path;\n      var keys2;\n\n      if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n        object.requestHeaders = {};\n\n        for (var j = 0; j < keys2.length; ++j) object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n      }\n\n      if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n        object.responseHeaders = {};\n\n        for (var j = 0; j < keys2.length; ++j) object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n      }\n\n      if (message.statusCode != null && message.hasOwnProperty(\"statusCode\")) object.statusCode = message.statusCode;\n      if (message.secure != null && message.hasOwnProperty(\"secure\")) object.secure = message.secure;\n      if (message.protocol != null && message.hasOwnProperty(\"protocol\")) object.protocol = message.protocol;\n      return object;\n    };\n    /**\n     * Converts this HTTP to JSON.\n     * @function toJSON\n     * @memberof Trace.HTTP\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    HTTP.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    HTTP.Values = function () {\n      /**\n       * Properties of a Values.\n       * @memberof Trace.HTTP\n       * @interface IValues\n       * @property {Array.<string>|null} [value] Values value\n       */\n\n      /**\n       * Constructs a new Values.\n       * @memberof Trace.HTTP\n       * @classdesc Represents a Values.\n       * @implements IValues\n       * @constructor\n       * @param {Trace.HTTP.IValues=} [properties] Properties to set\n       */\n      function Values(properties) {\n        this.value = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Values value.\n       * @member {Array.<string>} value\n       * @memberof Trace.HTTP.Values\n       * @instance\n       */\n\n\n      Values.prototype.value = $util.emptyArray;\n      /**\n       * Creates a new Values instance using the specified properties.\n       * @function create\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.IValues=} [properties] Properties to set\n       * @returns {Trace.HTTP.Values} Values instance\n       */\n\n      Values.create = function create(properties) {\n        return new Values(properties);\n      };\n      /**\n       * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Values.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.value != null && message.value.length) for (var i = 0; i < message.value.length; ++i) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).string(message.value[i]);\n        return writer;\n      };\n      /**\n       * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Values.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Values message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.HTTP.Values} Values\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Values.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.HTTP.Values();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.value && message.value.length)) message.value = [];\n              message.value.push(reader.string());\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Values message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.HTTP.Values} Values\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Values.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Values message.\n       * @function verify\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Values.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.value != null && message.hasOwnProperty(\"value\")) {\n          if (!Array.isArray(message.value)) return \"value: array expected\";\n\n          for (var i = 0; i < message.value.length; ++i) if (!$util.isString(message.value[i])) return \"value: string[] expected\";\n        }\n\n        return null;\n      };\n      /**\n       * Creates a Values message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.HTTP.Values} Values\n       */\n\n\n      Values.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.HTTP.Values) return object;\n        var message = new $root.Trace.HTTP.Values();\n\n        if (object.value) {\n          if (!Array.isArray(object.value)) throw TypeError(\".Trace.HTTP.Values.value: array expected\");\n          message.value = [];\n\n          for (var i = 0; i < object.value.length; ++i) message.value[i] = String(object.value[i]);\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a Values message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.HTTP.Values\n       * @static\n       * @param {Trace.HTTP.Values} message Values\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Values.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.value = [];\n\n        if (message.value && message.value.length) {\n          object.value = [];\n\n          for (var j = 0; j < message.value.length; ++j) object.value[j] = message.value[j];\n        }\n\n        return object;\n      };\n      /**\n       * Converts this Values to JSON.\n       * @function toJSON\n       * @memberof Trace.HTTP.Values\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Values.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Values;\n    }();\n    /**\n     * Method enum.\n     * @name Trace.HTTP.Method\n     * @enum {string}\n     * @property {number} UNKNOWN=0 UNKNOWN value\n     * @property {number} OPTIONS=1 OPTIONS value\n     * @property {number} GET=2 GET value\n     * @property {number} HEAD=3 HEAD value\n     * @property {number} POST=4 POST value\n     * @property {number} PUT=5 PUT value\n     * @property {number} DELETE=6 DELETE value\n     * @property {number} TRACE=7 TRACE value\n     * @property {number} CONNECT=8 CONNECT value\n     * @property {number} PATCH=9 PATCH value\n     */\n\n\n    HTTP.Method = function () {\n      var valuesById = {},\n          values = Object.create(valuesById);\n      values[valuesById[0] = \"UNKNOWN\"] = 0;\n      values[valuesById[1] = \"OPTIONS\"] = 1;\n      values[valuesById[2] = \"GET\"] = 2;\n      values[valuesById[3] = \"HEAD\"] = 3;\n      values[valuesById[4] = \"POST\"] = 4;\n      values[valuesById[5] = \"PUT\"] = 5;\n      values[valuesById[6] = \"DELETE\"] = 6;\n      values[valuesById[7] = \"TRACE\"] = 7;\n      values[valuesById[8] = \"CONNECT\"] = 8;\n      values[valuesById[9] = \"PATCH\"] = 9;\n      return values;\n    }();\n\n    return HTTP;\n  }();\n\n  Trace.Location = function () {\n    /**\n     * Properties of a Location.\n     * @memberof Trace\n     * @interface ILocation\n     * @property {number|null} [line] Location line\n     * @property {number|null} [column] Location column\n     */\n\n    /**\n     * Constructs a new Location.\n     * @memberof Trace\n     * @classdesc Represents a Location.\n     * @implements ILocation\n     * @constructor\n     * @param {Trace.ILocation=} [properties] Properties to set\n     */\n    function Location(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Location line.\n     * @member {number} line\n     * @memberof Trace.Location\n     * @instance\n     */\n\n\n    Location.prototype.line = 0;\n    /**\n     * Location column.\n     * @member {number} column\n     * @memberof Trace.Location\n     * @instance\n     */\n\n    Location.prototype.column = 0;\n    /**\n     * Creates a new Location instance using the specified properties.\n     * @function create\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.ILocation=} [properties] Properties to set\n     * @returns {Trace.Location} Location instance\n     */\n\n    Location.create = function create(properties) {\n      return new Location(properties);\n    };\n    /**\n     * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.ILocation} message Location message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Location.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.line != null && Object.hasOwnProperty.call(message, \"line\")) writer.uint32(\n      /* id 1, wireType 0 =*/\n      8).uint32(message.line);\n      if (message.column != null && Object.hasOwnProperty.call(message, \"column\")) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).uint32(message.column);\n      return writer;\n    };\n    /**\n     * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.ILocation} message Location message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Location.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Location message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Location\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Location} Location\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Location.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.Location();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.line = reader.uint32();\n            break;\n\n          case 2:\n            message.column = reader.uint32();\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Location message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Location\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Location} Location\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Location.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Location message.\n     * @function verify\n     * @memberof Trace.Location\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Location.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      if (message.line != null && message.hasOwnProperty(\"line\")) if (!$util.isInteger(message.line)) return \"line: integer expected\";\n      if (message.column != null && message.hasOwnProperty(\"column\")) if (!$util.isInteger(message.column)) return \"column: integer expected\";\n      return null;\n    };\n    /**\n     * Creates a Location message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.Location\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.Location} Location\n     */\n\n\n    Location.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.Location) return object;\n      var message = new $root.Trace.Location();\n      if (object.line != null) message.line = object.line >>> 0;\n      if (object.column != null) message.column = object.column >>> 0;\n      return message;\n    };\n    /**\n     * Creates a plain object from a Location message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Location\n     * @static\n     * @param {Trace.Location} message Location\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Location.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.defaults) {\n        object.line = 0;\n        object.column = 0;\n      }\n\n      if (message.line != null && message.hasOwnProperty(\"line\")) object.line = message.line;\n      if (message.column != null && message.hasOwnProperty(\"column\")) object.column = message.column;\n      return object;\n    };\n    /**\n     * Converts this Location to JSON.\n     * @function toJSON\n     * @memberof Trace.Location\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Location.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Location;\n  }();\n\n  Trace.Node = function () {\n    /**\n     * Properties of a Node.\n     * @memberof Trace\n     * @interface INode\n     * @property {string|null} [responseName] Node responseName\n     * @property {number|null} [index] Node index\n     * @property {string|null} [originalFieldName] Node originalFieldName\n     * @property {string|null} [type] Node type\n     * @property {string|null} [parentType] Node parentType\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n     * @property {number|null} [startTime] Node startTime\n     * @property {number|null} [endTime] Node endTime\n     * @property {Array.<Trace.IError>|null} [error] Node error\n     * @property {Array.<Trace.INode>|null} [child] Node child\n     */\n\n    /**\n     * Constructs a new Node.\n     * @memberof Trace\n     * @classdesc Represents a Node.\n     * @implements INode\n     * @constructor\n     * @param {Trace.INode=} [properties] Properties to set\n     */\n    function Node(properties) {\n      this.error = [];\n      this.child = [];\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * Node responseName.\n     * @member {string} responseName\n     * @memberof Trace.Node\n     * @instance\n     */\n\n\n    Node.prototype.responseName = \"\";\n    /**\n     * Node index.\n     * @member {number} index\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.index = 0;\n    /**\n     * Node originalFieldName.\n     * @member {string} originalFieldName\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.originalFieldName = \"\";\n    /**\n     * Node type.\n     * @member {string} type\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.type = \"\";\n    /**\n     * Node parentType.\n     * @member {string} parentType\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.parentType = \"\";\n    /**\n     * Node cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.cachePolicy = null;\n    /**\n     * Node startTime.\n     * @member {number} startTime\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.startTime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n    /**\n     * Node endTime.\n     * @member {number} endTime\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.endTime = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n    /**\n     * Node error.\n     * @member {Array.<Trace.IError>} error\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.error = $util.emptyArray;\n    /**\n     * Node child.\n     * @member {Array.<Trace.INode>} child\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Node.prototype.child = $util.emptyArray; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * Node id.\n     * @member {\"responseName\"|\"index\"|undefined} id\n     * @memberof Trace.Node\n     * @instance\n     */\n\n    Object.defineProperty(Node.prototype, \"id\", {\n      get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Creates a new Node instance using the specified properties.\n     * @function create\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.INode=} [properties] Properties to set\n     * @returns {Trace.Node} Node instance\n     */\n\n    Node.create = function create(properties) {\n      return new Node(properties);\n    };\n    /**\n     * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.INode} message Node message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Node.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\")) writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).string(message.responseName);\n      if (message.index != null && Object.hasOwnProperty.call(message, \"index\")) writer.uint32(\n      /* id 2, wireType 0 =*/\n      16).uint32(message.index);\n      if (message.type != null && Object.hasOwnProperty.call(message, \"type\")) writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).string(message.type);\n      if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\")) $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).fork()).ldelim();\n      if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\")) writer.uint32(\n      /* id 8, wireType 0 =*/\n      64).uint64(message.startTime);\n      if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\")) writer.uint32(\n      /* id 9, wireType 0 =*/\n      72).uint64(message.endTime);\n      if (message.error != null && message.error.length) for (var i = 0; i < message.error.length; ++i) $root.Trace.Error.encode(message.error[i], writer.uint32(\n      /* id 11, wireType 2 =*/\n      90).fork()).ldelim();\n      if (message.child != null && message.child.length) for (var i = 0; i < message.child.length; ++i) $root.Trace.Node.encode(message.child[i], writer.uint32(\n      /* id 12, wireType 2 =*/\n      98).fork()).ldelim();\n      if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\")) writer.uint32(\n      /* id 13, wireType 2 =*/\n      106).string(message.parentType);\n      if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\")) writer.uint32(\n      /* id 14, wireType 2 =*/\n      114).string(message.originalFieldName);\n      return writer;\n    };\n    /**\n     * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.INode} message Node message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    Node.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a Node message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.Node\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.Node} Node\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Node.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.Node();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.responseName = reader.string();\n            break;\n\n          case 2:\n            message.index = reader.uint32();\n            break;\n\n          case 14:\n            message.originalFieldName = reader.string();\n            break;\n\n          case 3:\n            message.type = reader.string();\n            break;\n\n          case 13:\n            message.parentType = reader.string();\n            break;\n\n          case 5:\n            message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n            break;\n\n          case 8:\n            message.startTime = reader.uint64();\n            break;\n\n          case 9:\n            message.endTime = reader.uint64();\n            break;\n\n          case 11:\n            if (!(message.error && message.error.length)) message.error = [];\n            message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n            break;\n\n          case 12:\n            if (!(message.child && message.child.length)) message.child = [];\n            message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a Node message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.Node\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.Node} Node\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    Node.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a Node message.\n     * @function verify\n     * @memberof Trace.Node\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    Node.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n\n      if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n        properties.id = 1;\n        if (!$util.isString(message.responseName)) return \"responseName: string expected\";\n      }\n\n      if (message.index != null && message.hasOwnProperty(\"index\")) {\n        if (properties.id === 1) return \"id: multiple values\";\n        properties.id = 1;\n        if (!$util.isInteger(message.index)) return \"index: integer expected\";\n      }\n\n      if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\")) if (!$util.isString(message.originalFieldName)) return \"originalFieldName: string expected\";\n      if (message.type != null && message.hasOwnProperty(\"type\")) if (!$util.isString(message.type)) return \"type: string expected\";\n      if (message.parentType != null && message.hasOwnProperty(\"parentType\")) if (!$util.isString(message.parentType)) return \"parentType: string expected\";\n\n      if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n        var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n        if (error) return \"cachePolicy.\" + error;\n      }\n\n      if (message.startTime != null && message.hasOwnProperty(\"startTime\")) if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high))) return \"startTime: integer|Long expected\";\n      if (message.endTime != null && message.hasOwnProperty(\"endTime\")) if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high))) return \"endTime: integer|Long expected\";\n\n      if (message.error != null && message.hasOwnProperty(\"error\")) {\n        if (!Array.isArray(message.error)) return \"error: array expected\";\n\n        for (var i = 0; i < message.error.length; ++i) {\n          var error = $root.Trace.Error.verify(message.error[i]);\n          if (error) return \"error.\" + error;\n        }\n      }\n\n      if (message.child != null && message.hasOwnProperty(\"child\")) {\n        if (!Array.isArray(message.child)) return \"child: array expected\";\n\n        for (var i = 0; i < message.child.length; ++i) {\n          var error = $root.Trace.Node.verify(message.child[i]);\n          if (error) return \"child.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a Node message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.Node\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.Node} Node\n     */\n\n\n    Node.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.Node) return object;\n      var message = new $root.Trace.Node();\n      if (object.responseName != null) message.responseName = String(object.responseName);\n      if (object.index != null) message.index = object.index >>> 0;\n      if (object.originalFieldName != null) message.originalFieldName = String(object.originalFieldName);\n      if (object.type != null) message.type = String(object.type);\n      if (object.parentType != null) message.parentType = String(object.parentType);\n\n      if (object.cachePolicy != null) {\n        if (typeof object.cachePolicy !== \"object\") throw TypeError(\".Trace.Node.cachePolicy: object expected\");\n        message.cachePolicy = $root.Trace.CachePolicy.fromObject(object.cachePolicy);\n      }\n\n      if (object.startTime != null) if ($util.Long) (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = true;else if (typeof object.startTime === \"string\") message.startTime = parseInt(object.startTime, 10);else if (typeof object.startTime === \"number\") message.startTime = object.startTime;else if (typeof object.startTime === \"object\") message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber(true);\n      if (object.endTime != null) if ($util.Long) (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = true;else if (typeof object.endTime === \"string\") message.endTime = parseInt(object.endTime, 10);else if (typeof object.endTime === \"number\") message.endTime = object.endTime;else if (typeof object.endTime === \"object\") message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber(true);\n\n      if (object.error) {\n        if (!Array.isArray(object.error)) throw TypeError(\".Trace.Node.error: array expected\");\n        message.error = [];\n\n        for (var i = 0; i < object.error.length; ++i) {\n          if (typeof object.error[i] !== \"object\") throw TypeError(\".Trace.Node.error: object expected\");\n          message.error[i] = $root.Trace.Error.fromObject(object.error[i]);\n        }\n      }\n\n      if (object.child) {\n        if (!Array.isArray(object.child)) throw TypeError(\".Trace.Node.child: array expected\");\n        message.child = [];\n\n        for (var i = 0; i < object.child.length; ++i) {\n          if (typeof object.child[i] !== \"object\") throw TypeError(\".Trace.Node.child: object expected\");\n          message.child[i] = $root.Trace.Node.fromObject(object.child[i]);\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a Node message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.Node\n     * @static\n     * @param {Trace.Node} message Node\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    Node.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (options.arrays || options.defaults) {\n        object.error = [];\n        object.child = [];\n      }\n\n      if (options.defaults) {\n        object.type = \"\";\n        object.cachePolicy = null;\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, true);\n          object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.startTime = options.longs === String ? \"0\" : 0;\n\n        if ($util.Long) {\n          var long = new $util.Long(0, 0, true);\n          object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n        } else object.endTime = options.longs === String ? \"0\" : 0;\n\n        object.parentType = \"\";\n        object.originalFieldName = \"\";\n      }\n\n      if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n        object.responseName = message.responseName;\n        if (options.oneofs) object.id = \"responseName\";\n      }\n\n      if (message.index != null && message.hasOwnProperty(\"index\")) {\n        object.index = message.index;\n        if (options.oneofs) object.id = \"index\";\n      }\n\n      if (message.type != null && message.hasOwnProperty(\"type\")) object.type = message.type;\n      if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n      if (message.startTime != null && message.hasOwnProperty(\"startTime\")) if (typeof message.startTime === \"number\") object.startTime = options.longs === String ? String(message.startTime) : message.startTime;else object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n      if (message.endTime != null && message.hasOwnProperty(\"endTime\")) if (typeof message.endTime === \"number\") object.endTime = options.longs === String ? String(message.endTime) : message.endTime;else object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n\n      if (message.error && message.error.length) {\n        object.error = [];\n\n        for (var j = 0; j < message.error.length; ++j) object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n      }\n\n      if (message.child && message.child.length) {\n        object.child = [];\n\n        for (var j = 0; j < message.child.length; ++j) object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n      }\n\n      if (message.parentType != null && message.hasOwnProperty(\"parentType\")) object.parentType = message.parentType;\n      if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\")) object.originalFieldName = message.originalFieldName;\n      return object;\n    };\n    /**\n     * Converts this Node to JSON.\n     * @function toJSON\n     * @memberof Trace.Node\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    Node.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Node;\n  }();\n\n  Trace.QueryPlanNode = function () {\n    /**\n     * Properties of a QueryPlanNode.\n     * @memberof Trace\n     * @interface IQueryPlanNode\n     * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n     * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n     * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n     * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n     */\n\n    /**\n     * Constructs a new QueryPlanNode.\n     * @memberof Trace\n     * @classdesc Represents a QueryPlanNode.\n     * @implements IQueryPlanNode\n     * @constructor\n     * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n     */\n    function QueryPlanNode(properties) {\n      if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n    }\n    /**\n     * QueryPlanNode sequence.\n     * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n\n    QueryPlanNode.prototype.sequence = null;\n    /**\n     * QueryPlanNode parallel.\n     * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n    QueryPlanNode.prototype.parallel = null;\n    /**\n     * QueryPlanNode fetch.\n     * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n    QueryPlanNode.prototype.fetch = null;\n    /**\n     * QueryPlanNode flatten.\n     * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n    QueryPlanNode.prototype.flatten = null; // OneOf field names bound to virtual getters and setters\n\n    var $oneOfFields;\n    /**\n     * QueryPlanNode node.\n     * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|undefined} node\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     */\n\n    Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n      get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\"]),\n      set: $util.oneOfSetter($oneOfFields)\n    });\n    /**\n     * Creates a new QueryPlanNode instance using the specified properties.\n     * @function create\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n     * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n     */\n\n    QueryPlanNode.create = function create(properties) {\n      return new QueryPlanNode(properties);\n    };\n    /**\n     * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n     * @function encode\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    QueryPlanNode.encode = function encode(message, writer) {\n      if (!writer) writer = $Writer.create();\n      if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\")) $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork()).ldelim();\n      if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\")) $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim();\n      if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\")) $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork()).ldelim();\n      if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\")) $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(\n      /* id 4, wireType 2 =*/\n      34).fork()).ldelim();\n      return writer;\n    };\n    /**\n     * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n\n\n    QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n      return this.encode(message, writer).ldelim();\n    };\n    /**\n     * Decodes a QueryPlanNode message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace.QueryPlanNode} QueryPlanNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    QueryPlanNode.decode = function decode(reader, length) {\n      if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n      var end = length === undefined ? reader.len : reader.pos + length,\n          message = new $root.Trace.QueryPlanNode();\n\n      while (reader.pos < end) {\n        var tag = reader.uint32();\n\n        switch (tag >>> 3) {\n          case 1:\n            message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n            break;\n\n          case 2:\n            message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n            break;\n\n          case 3:\n            message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n            break;\n\n          case 4:\n            message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n            break;\n\n          default:\n            reader.skipType(tag & 7);\n            break;\n        }\n      }\n\n      return message;\n    };\n    /**\n     * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace.QueryPlanNode} QueryPlanNode\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n\n\n    QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n      if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n      return this.decode(reader, reader.uint32());\n    };\n    /**\n     * Verifies a QueryPlanNode message.\n     * @function verify\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n\n\n    QueryPlanNode.verify = function verify(message) {\n      if (typeof message !== \"object\" || message === null) return \"object expected\";\n      var properties = {};\n\n      if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n          if (error) return \"sequence.\" + error;\n        }\n      }\n\n      if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n        if (properties.node === 1) return \"node: multiple values\";\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n          if (error) return \"parallel.\" + error;\n        }\n      }\n\n      if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n        if (properties.node === 1) return \"node: multiple values\";\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n          if (error) return \"fetch.\" + error;\n        }\n      }\n\n      if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n        if (properties.node === 1) return \"node: multiple values\";\n        properties.node = 1;\n        {\n          var error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n          if (error) return \"flatten.\" + error;\n        }\n      }\n\n      return null;\n    };\n    /**\n     * Creates a QueryPlanNode message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace.QueryPlanNode} QueryPlanNode\n     */\n\n\n    QueryPlanNode.fromObject = function fromObject(object) {\n      if (object instanceof $root.Trace.QueryPlanNode) return object;\n      var message = new $root.Trace.QueryPlanNode();\n\n      if (object.sequence != null) {\n        if (typeof object.sequence !== \"object\") throw TypeError(\".Trace.QueryPlanNode.sequence: object expected\");\n        message.sequence = $root.Trace.QueryPlanNode.SequenceNode.fromObject(object.sequence);\n      }\n\n      if (object.parallel != null) {\n        if (typeof object.parallel !== \"object\") throw TypeError(\".Trace.QueryPlanNode.parallel: object expected\");\n        message.parallel = $root.Trace.QueryPlanNode.ParallelNode.fromObject(object.parallel);\n      }\n\n      if (object.fetch != null) {\n        if (typeof object.fetch !== \"object\") throw TypeError(\".Trace.QueryPlanNode.fetch: object expected\");\n        message.fetch = $root.Trace.QueryPlanNode.FetchNode.fromObject(object.fetch);\n      }\n\n      if (object.flatten != null) {\n        if (typeof object.flatten !== \"object\") throw TypeError(\".Trace.QueryPlanNode.flatten: object expected\");\n        message.flatten = $root.Trace.QueryPlanNode.FlattenNode.fromObject(object.flatten);\n      }\n\n      return message;\n    };\n    /**\n     * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace.QueryPlanNode\n     * @static\n     * @param {Trace.QueryPlanNode} message QueryPlanNode\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n\n\n    QueryPlanNode.toObject = function toObject(message, options) {\n      if (!options) options = {};\n      var object = {};\n\n      if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n        object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n        if (options.oneofs) object.node = \"sequence\";\n      }\n\n      if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n        object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n        if (options.oneofs) object.node = \"parallel\";\n      }\n\n      if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n        object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n        if (options.oneofs) object.node = \"fetch\";\n      }\n\n      if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n        object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n        if (options.oneofs) object.node = \"flatten\";\n      }\n\n      return object;\n    };\n    /**\n     * Converts this QueryPlanNode to JSON.\n     * @function toJSON\n     * @memberof Trace.QueryPlanNode\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n\n\n    QueryPlanNode.prototype.toJSON = function toJSON() {\n      return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    QueryPlanNode.SequenceNode = function () {\n      /**\n       * Properties of a SequenceNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface ISequenceNode\n       * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n       */\n\n      /**\n       * Constructs a new SequenceNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a SequenceNode.\n       * @implements ISequenceNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n       */\n      function SequenceNode(properties) {\n        this.nodes = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * SequenceNode nodes.\n       * @member {Array.<Trace.IQueryPlanNode>} nodes\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @instance\n       */\n\n\n      SequenceNode.prototype.nodes = $util.emptyArray;\n      /**\n       * Creates a new SequenceNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n       */\n\n      SequenceNode.create = function create(properties) {\n        return new SequenceNode(properties);\n      };\n      /**\n       * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      SequenceNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.nodes != null && message.nodes.length) for (var i = 0; i < message.nodes.length; ++i) $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a SequenceNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      SequenceNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.SequenceNode();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.nodes && message.nodes.length)) message.nodes = [];\n              message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a SequenceNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      SequenceNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n          if (!Array.isArray(message.nodes)) return \"nodes: array expected\";\n\n          for (var i = 0; i < message.nodes.length; ++i) {\n            var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n            if (error) return \"nodes.\" + error;\n          }\n        }\n\n        return null;\n      };\n      /**\n       * Creates a SequenceNode message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n       */\n\n\n      SequenceNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.SequenceNode) return object;\n        var message = new $root.Trace.QueryPlanNode.SequenceNode();\n\n        if (object.nodes) {\n          if (!Array.isArray(object.nodes)) throw TypeError(\".Trace.QueryPlanNode.SequenceNode.nodes: array expected\");\n          message.nodes = [];\n\n          for (var i = 0; i < object.nodes.length; ++i) {\n            if (typeof object.nodes[i] !== \"object\") throw TypeError(\".Trace.QueryPlanNode.SequenceNode.nodes: object expected\");\n            message.nodes[i] = $root.Trace.QueryPlanNode.fromObject(object.nodes[i]);\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @static\n       * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      SequenceNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.nodes = [];\n\n        if (message.nodes && message.nodes.length) {\n          object.nodes = [];\n\n          for (var j = 0; j < message.nodes.length; ++j) object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n        }\n\n        return object;\n      };\n      /**\n       * Converts this SequenceNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.SequenceNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      SequenceNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return SequenceNode;\n    }();\n\n    QueryPlanNode.ParallelNode = function () {\n      /**\n       * Properties of a ParallelNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface IParallelNode\n       * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n       */\n\n      /**\n       * Constructs a new ParallelNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a ParallelNode.\n       * @implements IParallelNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n       */\n      function ParallelNode(properties) {\n        this.nodes = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * ParallelNode nodes.\n       * @member {Array.<Trace.IQueryPlanNode>} nodes\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @instance\n       */\n\n\n      ParallelNode.prototype.nodes = $util.emptyArray;\n      /**\n       * Creates a new ParallelNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n       */\n\n      ParallelNode.create = function create(properties) {\n        return new ParallelNode(properties);\n      };\n      /**\n       * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ParallelNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.nodes != null && message.nodes.length) for (var i = 0; i < message.nodes.length; ++i) $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a ParallelNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ParallelNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.ParallelNode();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.nodes && message.nodes.length)) message.nodes = [];\n              message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a ParallelNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      ParallelNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n          if (!Array.isArray(message.nodes)) return \"nodes: array expected\";\n\n          for (var i = 0; i < message.nodes.length; ++i) {\n            var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n            if (error) return \"nodes.\" + error;\n          }\n        }\n\n        return null;\n      };\n      /**\n       * Creates a ParallelNode message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n       */\n\n\n      ParallelNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.ParallelNode) return object;\n        var message = new $root.Trace.QueryPlanNode.ParallelNode();\n\n        if (object.nodes) {\n          if (!Array.isArray(object.nodes)) throw TypeError(\".Trace.QueryPlanNode.ParallelNode.nodes: array expected\");\n          message.nodes = [];\n\n          for (var i = 0; i < object.nodes.length; ++i) {\n            if (typeof object.nodes[i] !== \"object\") throw TypeError(\".Trace.QueryPlanNode.ParallelNode.nodes: object expected\");\n            message.nodes[i] = $root.Trace.QueryPlanNode.fromObject(object.nodes[i]);\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @static\n       * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ParallelNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.nodes = [];\n\n        if (message.nodes && message.nodes.length) {\n          object.nodes = [];\n\n          for (var j = 0; j < message.nodes.length; ++j) object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n        }\n\n        return object;\n      };\n      /**\n       * Converts this ParallelNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.ParallelNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ParallelNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ParallelNode;\n    }();\n\n    QueryPlanNode.FetchNode = function () {\n      /**\n       * Properties of a FetchNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface IFetchNode\n       * @property {string|null} [serviceName] FetchNode serviceName\n       * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n       * @property {ITrace|null} [trace] FetchNode trace\n       * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n       * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n       * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n       */\n\n      /**\n       * Constructs a new FetchNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a FetchNode.\n       * @implements IFetchNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n       */\n      function FetchNode(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * FetchNode serviceName.\n       * @member {string} serviceName\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n\n      FetchNode.prototype.serviceName = \"\";\n      /**\n       * FetchNode traceParsingFailed.\n       * @member {boolean} traceParsingFailed\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.traceParsingFailed = false;\n      /**\n       * FetchNode trace.\n       * @member {ITrace|null|undefined} trace\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.trace = null;\n      /**\n       * FetchNode sentTimeOffset.\n       * @member {number} sentTimeOffset\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.sentTimeOffset = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n      /**\n       * FetchNode sentTime.\n       * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.sentTime = null;\n      /**\n       * FetchNode receivedTime.\n       * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       */\n\n      FetchNode.prototype.receivedTime = null;\n      /**\n       * Creates a new FetchNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n       */\n\n      FetchNode.create = function create(properties) {\n        return new FetchNode(properties);\n      };\n      /**\n       * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FetchNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\")) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).string(message.serviceName);\n        if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).bool(message.traceParsingFailed);\n        if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\")) $root.Trace.encode(message.trace, writer.uint32(\n        /* id 3, wireType 2 =*/\n        26).fork()).ldelim();\n        if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\")) writer.uint32(\n        /* id 4, wireType 0 =*/\n        32).uint64(message.sentTimeOffset);\n        if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\")) $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(\n        /* id 5, wireType 2 =*/\n        42).fork()).ldelim();\n        if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\")) $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(\n        /* id 6, wireType 2 =*/\n        50).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a FetchNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FetchNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.FetchNode();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.serviceName = reader.string();\n              break;\n\n            case 2:\n              message.traceParsingFailed = reader.bool();\n              break;\n\n            case 3:\n              message.trace = $root.Trace.decode(reader, reader.uint32());\n              break;\n\n            case 4:\n              message.sentTimeOffset = reader.uint64();\n              break;\n\n            case 5:\n              message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n              break;\n\n            case 6:\n              message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FetchNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a FetchNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      FetchNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.serviceName != null && message.hasOwnProperty(\"serviceName\")) if (!$util.isString(message.serviceName)) return \"serviceName: string expected\";\n        if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\")) if (typeof message.traceParsingFailed !== \"boolean\") return \"traceParsingFailed: boolean expected\";\n\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n          var error = $root.Trace.verify(message.trace);\n          if (error) return \"trace.\" + error;\n        }\n\n        if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\")) if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high))) return \"sentTimeOffset: integer|Long expected\";\n\n        if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n          var error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n          if (error) return \"sentTime.\" + error;\n        }\n\n        if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n          var error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n          if (error) return \"receivedTime.\" + error;\n        }\n\n        return null;\n      };\n      /**\n       * Creates a FetchNode message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n       */\n\n\n      FetchNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.FetchNode) return object;\n        var message = new $root.Trace.QueryPlanNode.FetchNode();\n        if (object.serviceName != null) message.serviceName = String(object.serviceName);\n        if (object.traceParsingFailed != null) message.traceParsingFailed = Boolean(object.traceParsingFailed);\n\n        if (object.trace != null) {\n          if (typeof object.trace !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FetchNode.trace: object expected\");\n          message.trace = $root.Trace.fromObject(object.trace);\n        }\n\n        if (object.sentTimeOffset != null) if ($util.Long) (message.sentTimeOffset = $util.Long.fromValue(object.sentTimeOffset)).unsigned = true;else if (typeof object.sentTimeOffset === \"string\") message.sentTimeOffset = parseInt(object.sentTimeOffset, 10);else if (typeof object.sentTimeOffset === \"number\") message.sentTimeOffset = object.sentTimeOffset;else if (typeof object.sentTimeOffset === \"object\") message.sentTimeOffset = new $util.LongBits(object.sentTimeOffset.low >>> 0, object.sentTimeOffset.high >>> 0).toNumber(true);\n\n        if (object.sentTime != null) {\n          if (typeof object.sentTime !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FetchNode.sentTime: object expected\");\n          message.sentTime = $root.google.protobuf.Timestamp.fromObject(object.sentTime);\n        }\n\n        if (object.receivedTime != null) {\n          if (typeof object.receivedTime !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FetchNode.receivedTime: object expected\");\n          message.receivedTime = $root.google.protobuf.Timestamp.fromObject(object.receivedTime);\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @static\n       * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      FetchNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          object.serviceName = \"\";\n          object.traceParsingFailed = false;\n          object.trace = null;\n\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, true);\n            object.sentTimeOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.sentTimeOffset = options.longs === String ? \"0\" : 0;\n\n          object.sentTime = null;\n          object.receivedTime = null;\n        }\n\n        if (message.serviceName != null && message.hasOwnProperty(\"serviceName\")) object.serviceName = message.serviceName;\n        if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\")) object.traceParsingFailed = message.traceParsingFailed;\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) object.trace = $root.Trace.toObject(message.trace, options);\n        if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\")) if (typeof message.sentTimeOffset === \"number\") object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;else object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n        if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n        if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n        return object;\n      };\n      /**\n       * Converts this FetchNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.FetchNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      FetchNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return FetchNode;\n    }();\n\n    QueryPlanNode.FlattenNode = function () {\n      /**\n       * Properties of a FlattenNode.\n       * @memberof Trace.QueryPlanNode\n       * @interface IFlattenNode\n       * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n       * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n       */\n\n      /**\n       * Constructs a new FlattenNode.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a FlattenNode.\n       * @implements IFlattenNode\n       * @constructor\n       * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n       */\n      function FlattenNode(properties) {\n        this.responsePath = [];\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * FlattenNode responsePath.\n       * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @instance\n       */\n\n\n      FlattenNode.prototype.responsePath = $util.emptyArray;\n      /**\n       * FlattenNode node.\n       * @member {Trace.IQueryPlanNode|null|undefined} node\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @instance\n       */\n\n      FlattenNode.prototype.node = null;\n      /**\n       * Creates a new FlattenNode instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n       */\n\n      FlattenNode.create = function create(properties) {\n        return new FlattenNode(properties);\n      };\n      /**\n       * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FlattenNode.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.responsePath != null && message.responsePath.length) for (var i = 0; i < message.responsePath.length; ++i) $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).fork()).ldelim();\n        if (message.node != null && Object.hasOwnProperty.call(message, \"node\")) $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(\n        /* id 2, wireType 2 =*/\n        18).fork()).ldelim();\n        return writer;\n      };\n      /**\n       * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a FlattenNode message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FlattenNode.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.FlattenNode();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              if (!(message.responsePath && message.responsePath.length)) message.responsePath = [];\n              message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n              break;\n\n            case 2:\n              message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a FlattenNode message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      FlattenNode.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n        if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n          if (!Array.isArray(message.responsePath)) return \"responsePath: array expected\";\n\n          for (var i = 0; i < message.responsePath.length; ++i) {\n            var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n            if (error) return \"responsePath.\" + error;\n          }\n        }\n\n        if (message.node != null && message.hasOwnProperty(\"node\")) {\n          var error = $root.Trace.QueryPlanNode.verify(message.node);\n          if (error) return \"node.\" + error;\n        }\n\n        return null;\n      };\n      /**\n       * Creates a FlattenNode message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n       */\n\n\n      FlattenNode.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.FlattenNode) return object;\n        var message = new $root.Trace.QueryPlanNode.FlattenNode();\n\n        if (object.responsePath) {\n          if (!Array.isArray(object.responsePath)) throw TypeError(\".Trace.QueryPlanNode.FlattenNode.responsePath: array expected\");\n          message.responsePath = [];\n\n          for (var i = 0; i < object.responsePath.length; ++i) {\n            if (typeof object.responsePath[i] !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FlattenNode.responsePath: object expected\");\n            message.responsePath[i] = $root.Trace.QueryPlanNode.ResponsePathElement.fromObject(object.responsePath[i]);\n          }\n        }\n\n        if (object.node != null) {\n          if (typeof object.node !== \"object\") throw TypeError(\".Trace.QueryPlanNode.FlattenNode.node: object expected\");\n          message.node = $root.Trace.QueryPlanNode.fromObject(object.node);\n        }\n\n        return message;\n      };\n      /**\n       * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @static\n       * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      FlattenNode.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n        if (options.arrays || options.defaults) object.responsePath = [];\n        if (options.defaults) object.node = null;\n\n        if (message.responsePath && message.responsePath.length) {\n          object.responsePath = [];\n\n          for (var j = 0; j < message.responsePath.length; ++j) object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n        }\n\n        if (message.node != null && message.hasOwnProperty(\"node\")) object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n        return object;\n      };\n      /**\n       * Converts this FlattenNode to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.FlattenNode\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      FlattenNode.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return FlattenNode;\n    }();\n\n    QueryPlanNode.ResponsePathElement = function () {\n      /**\n       * Properties of a ResponsePathElement.\n       * @memberof Trace.QueryPlanNode\n       * @interface IResponsePathElement\n       * @property {string|null} [fieldName] ResponsePathElement fieldName\n       * @property {number|null} [index] ResponsePathElement index\n       */\n\n      /**\n       * Constructs a new ResponsePathElement.\n       * @memberof Trace.QueryPlanNode\n       * @classdesc Represents a ResponsePathElement.\n       * @implements IResponsePathElement\n       * @constructor\n       * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n       */\n      function ResponsePathElement(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * ResponsePathElement fieldName.\n       * @member {string} fieldName\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       */\n\n\n      ResponsePathElement.prototype.fieldName = \"\";\n      /**\n       * ResponsePathElement index.\n       * @member {number} index\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       */\n\n      ResponsePathElement.prototype.index = 0; // OneOf field names bound to virtual getters and setters\n\n      var $oneOfFields;\n      /**\n       * ResponsePathElement id.\n       * @member {\"fieldName\"|\"index\"|undefined} id\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       */\n\n      Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n        get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n        set: $util.oneOfSetter($oneOfFields)\n      });\n      /**\n       * Creates a new ResponsePathElement instance using the specified properties.\n       * @function create\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n       */\n\n      ResponsePathElement.create = function create(properties) {\n        return new ResponsePathElement(properties);\n      };\n      /**\n       * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n       * @function encode\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ResponsePathElement.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\")) writer.uint32(\n        /* id 1, wireType 2 =*/\n        10).string(message.fieldName);\n        if (message.index != null && Object.hasOwnProperty.call(message, \"index\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).uint32(message.index);\n        return writer;\n      };\n      /**\n       * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a ResponsePathElement message from the specified reader or buffer.\n       * @function decode\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ResponsePathElement.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.fieldName = reader.string();\n              break;\n\n            case 2:\n              message.index = reader.uint32();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a ResponsePathElement message.\n       * @function verify\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      ResponsePathElement.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        var properties = {};\n\n        if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n          properties.id = 1;\n          if (!$util.isString(message.fieldName)) return \"fieldName: string expected\";\n        }\n\n        if (message.index != null && message.hasOwnProperty(\"index\")) {\n          if (properties.id === 1) return \"id: multiple values\";\n          properties.id = 1;\n          if (!$util.isInteger(message.index)) return \"index: integer expected\";\n        }\n\n        return null;\n      };\n      /**\n       * Creates a ResponsePathElement message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n       */\n\n\n      ResponsePathElement.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace.QueryPlanNode.ResponsePathElement) return object;\n        var message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n        if (object.fieldName != null) message.fieldName = String(object.fieldName);\n        if (object.index != null) message.index = object.index >>> 0;\n        return message;\n      };\n      /**\n       * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @static\n       * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      ResponsePathElement.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n          object.fieldName = message.fieldName;\n          if (options.oneofs) object.id = \"fieldName\";\n        }\n\n        if (message.index != null && message.hasOwnProperty(\"index\")) {\n          object.index = message.index;\n          if (options.oneofs) object.id = \"index\";\n        }\n\n        return object;\n      };\n      /**\n       * Converts this ResponsePathElement to JSON.\n       * @function toJSON\n       * @memberof Trace.QueryPlanNode.ResponsePathElement\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      ResponsePathElement.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return ResponsePathElement;\n    }();\n\n    return QueryPlanNode;\n  }();\n\n  return Trace;\n}();\n\n$root.ReportHeader = function () {\n  /**\n   * Properties of a ReportHeader.\n   * @exports IReportHeader\n   * @interface IReportHeader\n   * @property {string|null} [hostname] ReportHeader hostname\n   * @property {string|null} [agentVersion] ReportHeader agentVersion\n   * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n   * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n   * @property {string|null} [uname] ReportHeader uname\n   * @property {string|null} [schemaTag] ReportHeader schemaTag\n   * @property {string|null} [executableSchemaId] ReportHeader executableSchemaId\n   */\n\n  /**\n   * Constructs a new ReportHeader.\n   * @exports ReportHeader\n   * @classdesc Represents a ReportHeader.\n   * @implements IReportHeader\n   * @constructor\n   * @param {IReportHeader=} [properties] Properties to set\n   */\n  function ReportHeader(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * ReportHeader hostname.\n   * @member {string} hostname\n   * @memberof ReportHeader\n   * @instance\n   */\n\n\n  ReportHeader.prototype.hostname = \"\";\n  /**\n   * ReportHeader agentVersion.\n   * @member {string} agentVersion\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.agentVersion = \"\";\n  /**\n   * ReportHeader serviceVersion.\n   * @member {string} serviceVersion\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.serviceVersion = \"\";\n  /**\n   * ReportHeader runtimeVersion.\n   * @member {string} runtimeVersion\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.runtimeVersion = \"\";\n  /**\n   * ReportHeader uname.\n   * @member {string} uname\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.uname = \"\";\n  /**\n   * ReportHeader schemaTag.\n   * @member {string} schemaTag\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.schemaTag = \"\";\n  /**\n   * ReportHeader executableSchemaId.\n   * @member {string} executableSchemaId\n   * @memberof ReportHeader\n   * @instance\n   */\n\n  ReportHeader.prototype.executableSchemaId = \"\";\n  /**\n   * Creates a new ReportHeader instance using the specified properties.\n   * @function create\n   * @memberof ReportHeader\n   * @static\n   * @param {IReportHeader=} [properties] Properties to set\n   * @returns {ReportHeader} ReportHeader instance\n   */\n\n  ReportHeader.create = function create(properties) {\n    return new ReportHeader(properties);\n  };\n  /**\n   * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n   * @function encode\n   * @memberof ReportHeader\n   * @static\n   * @param {IReportHeader} message ReportHeader message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ReportHeader.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\")) writer.uint32(\n    /* id 5, wireType 2 =*/\n    42).string(message.hostname);\n    if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\")) writer.uint32(\n    /* id 6, wireType 2 =*/\n    50).string(message.agentVersion);\n    if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\")) writer.uint32(\n    /* id 7, wireType 2 =*/\n    58).string(message.serviceVersion);\n    if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\")) writer.uint32(\n    /* id 8, wireType 2 =*/\n    66).string(message.runtimeVersion);\n    if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\")) writer.uint32(\n    /* id 9, wireType 2 =*/\n    74).string(message.uname);\n    if (message.schemaTag != null && Object.hasOwnProperty.call(message, \"schemaTag\")) writer.uint32(\n    /* id 10, wireType 2 =*/\n    82).string(message.schemaTag);\n    if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, \"executableSchemaId\")) writer.uint32(\n    /* id 11, wireType 2 =*/\n    90).string(message.executableSchemaId);\n    return writer;\n  };\n  /**\n   * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ReportHeader\n   * @static\n   * @param {IReportHeader} message ReportHeader message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a ReportHeader message from the specified reader or buffer.\n   * @function decode\n   * @memberof ReportHeader\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ReportHeader} ReportHeader\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ReportHeader.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ReportHeader();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 5:\n          message.hostname = reader.string();\n          break;\n\n        case 6:\n          message.agentVersion = reader.string();\n          break;\n\n        case 7:\n          message.serviceVersion = reader.string();\n          break;\n\n        case 8:\n          message.runtimeVersion = reader.string();\n          break;\n\n        case 9:\n          message.uname = reader.string();\n          break;\n\n        case 10:\n          message.schemaTag = reader.string();\n          break;\n\n        case 11:\n          message.executableSchemaId = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ReportHeader\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ReportHeader} ReportHeader\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a ReportHeader message.\n   * @function verify\n   * @memberof ReportHeader\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  ReportHeader.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.hostname != null && message.hasOwnProperty(\"hostname\")) if (!$util.isString(message.hostname)) return \"hostname: string expected\";\n    if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\")) if (!$util.isString(message.agentVersion)) return \"agentVersion: string expected\";\n    if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\")) if (!$util.isString(message.serviceVersion)) return \"serviceVersion: string expected\";\n    if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\")) if (!$util.isString(message.runtimeVersion)) return \"runtimeVersion: string expected\";\n    if (message.uname != null && message.hasOwnProperty(\"uname\")) if (!$util.isString(message.uname)) return \"uname: string expected\";\n    if (message.schemaTag != null && message.hasOwnProperty(\"schemaTag\")) if (!$util.isString(message.schemaTag)) return \"schemaTag: string expected\";\n    if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\")) if (!$util.isString(message.executableSchemaId)) return \"executableSchemaId: string expected\";\n    return null;\n  };\n  /**\n   * Creates a ReportHeader message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof ReportHeader\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {ReportHeader} ReportHeader\n   */\n\n\n  ReportHeader.fromObject = function fromObject(object) {\n    if (object instanceof $root.ReportHeader) return object;\n    var message = new $root.ReportHeader();\n    if (object.hostname != null) message.hostname = String(object.hostname);\n    if (object.agentVersion != null) message.agentVersion = String(object.agentVersion);\n    if (object.serviceVersion != null) message.serviceVersion = String(object.serviceVersion);\n    if (object.runtimeVersion != null) message.runtimeVersion = String(object.runtimeVersion);\n    if (object.uname != null) message.uname = String(object.uname);\n    if (object.schemaTag != null) message.schemaTag = String(object.schemaTag);\n    if (object.executableSchemaId != null) message.executableSchemaId = String(object.executableSchemaId);\n    return message;\n  };\n  /**\n   * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ReportHeader\n   * @static\n   * @param {ReportHeader} message ReportHeader\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  ReportHeader.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.hostname = \"\";\n      object.agentVersion = \"\";\n      object.serviceVersion = \"\";\n      object.runtimeVersion = \"\";\n      object.uname = \"\";\n      object.schemaTag = \"\";\n      object.executableSchemaId = \"\";\n    }\n\n    if (message.hostname != null && message.hasOwnProperty(\"hostname\")) object.hostname = message.hostname;\n    if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\")) object.agentVersion = message.agentVersion;\n    if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\")) object.serviceVersion = message.serviceVersion;\n    if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\")) object.runtimeVersion = message.runtimeVersion;\n    if (message.uname != null && message.hasOwnProperty(\"uname\")) object.uname = message.uname;\n    if (message.schemaTag != null && message.hasOwnProperty(\"schemaTag\")) object.schemaTag = message.schemaTag;\n    if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\")) object.executableSchemaId = message.executableSchemaId;\n    return object;\n  };\n  /**\n   * Converts this ReportHeader to JSON.\n   * @function toJSON\n   * @memberof ReportHeader\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  ReportHeader.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return ReportHeader;\n}();\n\n$root.PathErrorStats = function () {\n  /**\n   * Properties of a PathErrorStats.\n   * @exports IPathErrorStats\n   * @interface IPathErrorStats\n   * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n   * @property {number|null} [errorsCount] PathErrorStats errorsCount\n   * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n   */\n\n  /**\n   * Constructs a new PathErrorStats.\n   * @exports PathErrorStats\n   * @classdesc Represents a PathErrorStats.\n   * @implements IPathErrorStats\n   * @constructor\n   * @param {IPathErrorStats=} [properties] Properties to set\n   */\n  function PathErrorStats(properties) {\n    this.children = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * PathErrorStats children.\n   * @member {Object.<string,IPathErrorStats>} children\n   * @memberof PathErrorStats\n   * @instance\n   */\n\n\n  PathErrorStats.prototype.children = $util.emptyObject;\n  /**\n   * PathErrorStats errorsCount.\n   * @member {number} errorsCount\n   * @memberof PathErrorStats\n   * @instance\n   */\n\n  PathErrorStats.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * PathErrorStats requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof PathErrorStats\n   * @instance\n   */\n\n  PathErrorStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Creates a new PathErrorStats instance using the specified properties.\n   * @function create\n   * @memberof PathErrorStats\n   * @static\n   * @param {IPathErrorStats=} [properties] Properties to set\n   * @returns {PathErrorStats} PathErrorStats instance\n   */\n\n  PathErrorStats.create = function create(properties) {\n    return new PathErrorStats(properties);\n  };\n  /**\n   * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n   * @function encode\n   * @memberof PathErrorStats\n   * @static\n   * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  PathErrorStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.children != null && Object.hasOwnProperty.call(message, \"children\")) for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\")) writer.uint32(\n    /* id 4, wireType 0 =*/\n    32).uint64(message.errorsCount);\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32(\n    /* id 5, wireType 0 =*/\n    40).uint64(message.requestsWithErrorsCount);\n    return writer;\n  };\n  /**\n   * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof PathErrorStats\n   * @static\n   * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a PathErrorStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof PathErrorStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {PathErrorStats} PathErrorStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  PathErrorStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.PathErrorStats(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          reader.skip().pos++;\n          if (message.children === $util.emptyObject) message.children = {};\n          key = reader.string();\n          reader.pos++;\n          message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n          break;\n\n        case 4:\n          message.errorsCount = reader.uint64();\n          break;\n\n        case 5:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof PathErrorStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {PathErrorStats} PathErrorStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a PathErrorStats message.\n   * @function verify\n   * @memberof PathErrorStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  PathErrorStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.children != null && message.hasOwnProperty(\"children\")) {\n      if (!$util.isObject(message.children)) return \"children: object expected\";\n      var key = Object.keys(message.children);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.PathErrorStats.verify(message.children[key[i]]);\n        if (error) return \"children.\" + error;\n      }\n    }\n\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high))) return \"errorsCount: integer|Long expected\";\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n    return null;\n  };\n  /**\n   * Creates a PathErrorStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof PathErrorStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {PathErrorStats} PathErrorStats\n   */\n\n\n  PathErrorStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.PathErrorStats) return object;\n    var message = new $root.PathErrorStats();\n\n    if (object.children) {\n      if (typeof object.children !== \"object\") throw TypeError(\".PathErrorStats.children: object expected\");\n      message.children = {};\n\n      for (var keys = Object.keys(object.children), i = 0; i < keys.length; ++i) {\n        if (typeof object.children[keys[i]] !== \"object\") throw TypeError(\".PathErrorStats.children: object expected\");\n        message.children[keys[i]] = $root.PathErrorStats.fromObject(object.children[keys[i]]);\n      }\n    }\n\n    if (object.errorsCount != null) if ($util.Long) (message.errorsCount = $util.Long.fromValue(object.errorsCount)).unsigned = true;else if (typeof object.errorsCount === \"string\") message.errorsCount = parseInt(object.errorsCount, 10);else if (typeof object.errorsCount === \"number\") message.errorsCount = object.errorsCount;else if (typeof object.errorsCount === \"object\") message.errorsCount = new $util.LongBits(object.errorsCount.low >>> 0, object.errorsCount.high >>> 0).toNumber(true);\n    if (object.requestsWithErrorsCount != null) if ($util.Long) (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;else if (typeof object.requestsWithErrorsCount === \"string\") message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);else if (typeof object.requestsWithErrorsCount === \"number\") message.requestsWithErrorsCount = object.requestsWithErrorsCount;else if (typeof object.requestsWithErrorsCount === \"object\") message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n    return message;\n  };\n  /**\n   * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof PathErrorStats\n   * @static\n   * @param {PathErrorStats} message PathErrorStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  PathErrorStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.children = {};\n\n    if (options.defaults) {\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.errorsCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n    }\n\n    var keys2;\n\n    if (message.children && (keys2 = Object.keys(message.children)).length) {\n      object.children = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n    }\n\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (typeof message.errorsCount === \"number\") object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;else object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n    return object;\n  };\n  /**\n   * Converts this PathErrorStats to JSON.\n   * @function toJSON\n   * @memberof PathErrorStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  PathErrorStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return PathErrorStats;\n}();\n\n$root.QueryLatencyStats = function () {\n  /**\n   * Properties of a QueryLatencyStats.\n   * @exports IQueryLatencyStats\n   * @interface IQueryLatencyStats\n   * @property {Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n   * @property {number|null} [requestCount] QueryLatencyStats requestCount\n   * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n   * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n   * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n   * @property {Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n   * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n   * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n   * @property {Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n   * @property {Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n   * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n   * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n   */\n\n  /**\n   * Constructs a new QueryLatencyStats.\n   * @exports QueryLatencyStats\n   * @classdesc Represents a QueryLatencyStats.\n   * @implements IQueryLatencyStats\n   * @constructor\n   * @param {IQueryLatencyStats=} [properties] Properties to set\n   */\n  function QueryLatencyStats(properties) {\n    this.latencyCount = [];\n    this.cacheLatencyCount = [];\n    this.publicCacheTtlCount = [];\n    this.privateCacheTtlCount = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * QueryLatencyStats latencyCount.\n   * @member {Array.<number>} latencyCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n\n  QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n  /**\n   * QueryLatencyStats requestCount.\n   * @member {number} requestCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.requestCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats cacheHits.\n   * @member {number} cacheHits\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.cacheHits = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats persistedQueryHits.\n   * @member {number} persistedQueryHits\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.persistedQueryHits = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats persistedQueryMisses.\n   * @member {number} persistedQueryMisses\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.persistedQueryMisses = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats cacheLatencyCount.\n   * @member {Array.<number>} cacheLatencyCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n  /**\n   * QueryLatencyStats rootErrorStats.\n   * @member {IPathErrorStats|null|undefined} rootErrorStats\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.rootErrorStats = null;\n  /**\n   * QueryLatencyStats requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats publicCacheTtlCount.\n   * @member {Array.<number>} publicCacheTtlCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n  /**\n   * QueryLatencyStats privateCacheTtlCount.\n   * @member {Array.<number>} privateCacheTtlCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n  /**\n   * QueryLatencyStats registeredOperationCount.\n   * @member {number} registeredOperationCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.registeredOperationCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * QueryLatencyStats forbiddenOperationCount.\n   * @member {number} forbiddenOperationCount\n   * @memberof QueryLatencyStats\n   * @instance\n   */\n\n  QueryLatencyStats.prototype.forbiddenOperationCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * Creates a new QueryLatencyStats instance using the specified properties.\n   * @function create\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {IQueryLatencyStats=} [properties] Properties to set\n   * @returns {QueryLatencyStats} QueryLatencyStats instance\n   */\n\n  QueryLatencyStats.create = function create(properties) {\n    return new QueryLatencyStats(properties);\n  };\n  /**\n   * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n   * @function encode\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  QueryLatencyStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n\n    if (message.latencyCount != null && message.latencyCount.length) {\n      writer.uint32(\n      /* id 1, wireType 2 =*/\n      10).fork();\n\n      for (var i = 0; i < message.latencyCount.length; ++i) writer.int64(message.latencyCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\")) writer.uint32(\n    /* id 2, wireType 0 =*/\n    16).uint64(message.requestCount);\n    if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\")) writer.uint32(\n    /* id 3, wireType 0 =*/\n    24).uint64(message.cacheHits);\n    if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\")) writer.uint32(\n    /* id 4, wireType 0 =*/\n    32).uint64(message.persistedQueryHits);\n    if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\")) writer.uint32(\n    /* id 5, wireType 0 =*/\n    40).uint64(message.persistedQueryMisses);\n\n    if (message.cacheLatencyCount != null && message.cacheLatencyCount.length) {\n      writer.uint32(\n      /* id 6, wireType 2 =*/\n      50).fork();\n\n      for (var i = 0; i < message.cacheLatencyCount.length; ++i) writer.int64(message.cacheLatencyCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\")) $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(\n    /* id 7, wireType 2 =*/\n    58).fork()).ldelim();\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32(\n    /* id 8, wireType 0 =*/\n    64).uint64(message.requestsWithErrorsCount);\n\n    if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.length) {\n      writer.uint32(\n      /* id 9, wireType 2 =*/\n      74).fork();\n\n      for (var i = 0; i < message.publicCacheTtlCount.length; ++i) writer.int64(message.publicCacheTtlCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.length) {\n      writer.uint32(\n      /* id 10, wireType 2 =*/\n      82).fork();\n\n      for (var i = 0; i < message.privateCacheTtlCount.length; ++i) writer.int64(message.privateCacheTtlCount[i]);\n\n      writer.ldelim();\n    }\n\n    if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\")) writer.uint32(\n    /* id 11, wireType 0 =*/\n    88).uint64(message.registeredOperationCount);\n    if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\")) writer.uint32(\n    /* id 12, wireType 0 =*/\n    96).uint64(message.forbiddenOperationCount);\n    return writer;\n  };\n  /**\n   * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a QueryLatencyStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {QueryLatencyStats} QueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  QueryLatencyStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.QueryLatencyStats();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          if (!(message.latencyCount && message.latencyCount.length)) message.latencyCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.latencyCount.push(reader.int64());\n          } else message.latencyCount.push(reader.int64());\n\n          break;\n\n        case 2:\n          message.requestCount = reader.uint64();\n          break;\n\n        case 3:\n          message.cacheHits = reader.uint64();\n          break;\n\n        case 4:\n          message.persistedQueryHits = reader.uint64();\n          break;\n\n        case 5:\n          message.persistedQueryMisses = reader.uint64();\n          break;\n\n        case 6:\n          if (!(message.cacheLatencyCount && message.cacheLatencyCount.length)) message.cacheLatencyCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.cacheLatencyCount.push(reader.int64());\n          } else message.cacheLatencyCount.push(reader.int64());\n\n          break;\n\n        case 7:\n          message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n          break;\n\n        case 8:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n\n        case 9:\n          if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length)) message.publicCacheTtlCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.publicCacheTtlCount.push(reader.int64());\n          } else message.publicCacheTtlCount.push(reader.int64());\n\n          break;\n\n        case 10:\n          if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length)) message.privateCacheTtlCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.privateCacheTtlCount.push(reader.int64());\n          } else message.privateCacheTtlCount.push(reader.int64());\n\n          break;\n\n        case 11:\n          message.registeredOperationCount = reader.uint64();\n          break;\n\n        case 12:\n          message.forbiddenOperationCount = reader.uint64();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {QueryLatencyStats} QueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a QueryLatencyStats message.\n   * @function verify\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  QueryLatencyStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n      if (!Array.isArray(message.latencyCount)) return \"latencyCount: array expected\";\n\n      for (var i = 0; i < message.latencyCount.length; ++i) if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high))) return \"latencyCount: integer|Long[] expected\";\n    }\n\n    if (message.requestCount != null && message.hasOwnProperty(\"requestCount\")) if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high))) return \"requestCount: integer|Long expected\";\n    if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\")) if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high))) return \"cacheHits: integer|Long expected\";\n    if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\")) if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high))) return \"persistedQueryHits: integer|Long expected\";\n    if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\")) if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high))) return \"persistedQueryMisses: integer|Long expected\";\n\n    if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n      if (!Array.isArray(message.cacheLatencyCount)) return \"cacheLatencyCount: array expected\";\n\n      for (var i = 0; i < message.cacheLatencyCount.length; ++i) if (!$util.isInteger(message.cacheLatencyCount[i]) && !(message.cacheLatencyCount[i] && $util.isInteger(message.cacheLatencyCount[i].low) && $util.isInteger(message.cacheLatencyCount[i].high))) return \"cacheLatencyCount: integer|Long[] expected\";\n    }\n\n    if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n      var error = $root.PathErrorStats.verify(message.rootErrorStats);\n      if (error) return \"rootErrorStats.\" + error;\n    }\n\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n\n    if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n      if (!Array.isArray(message.publicCacheTtlCount)) return \"publicCacheTtlCount: array expected\";\n\n      for (var i = 0; i < message.publicCacheTtlCount.length; ++i) if (!$util.isInteger(message.publicCacheTtlCount[i]) && !(message.publicCacheTtlCount[i] && $util.isInteger(message.publicCacheTtlCount[i].low) && $util.isInteger(message.publicCacheTtlCount[i].high))) return \"publicCacheTtlCount: integer|Long[] expected\";\n    }\n\n    if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n      if (!Array.isArray(message.privateCacheTtlCount)) return \"privateCacheTtlCount: array expected\";\n\n      for (var i = 0; i < message.privateCacheTtlCount.length; ++i) if (!$util.isInteger(message.privateCacheTtlCount[i]) && !(message.privateCacheTtlCount[i] && $util.isInteger(message.privateCacheTtlCount[i].low) && $util.isInteger(message.privateCacheTtlCount[i].high))) return \"privateCacheTtlCount: integer|Long[] expected\";\n    }\n\n    if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\")) if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high))) return \"registeredOperationCount: integer|Long expected\";\n    if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\")) if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high))) return \"forbiddenOperationCount: integer|Long expected\";\n    return null;\n  };\n  /**\n   * Creates a QueryLatencyStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {QueryLatencyStats} QueryLatencyStats\n   */\n\n\n  QueryLatencyStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.QueryLatencyStats) return object;\n    var message = new $root.QueryLatencyStats();\n\n    if (object.latencyCount) {\n      if (!Array.isArray(object.latencyCount)) throw TypeError(\".QueryLatencyStats.latencyCount: array expected\");\n      message.latencyCount = [];\n\n      for (var i = 0; i < object.latencyCount.length; ++i) if ($util.Long) (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;else if (typeof object.latencyCount[i] === \"string\") message.latencyCount[i] = parseInt(object.latencyCount[i], 10);else if (typeof object.latencyCount[i] === \"number\") message.latencyCount[i] = object.latencyCount[i];else if (typeof object.latencyCount[i] === \"object\") message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.requestCount != null) if ($util.Long) (message.requestCount = $util.Long.fromValue(object.requestCount)).unsigned = true;else if (typeof object.requestCount === \"string\") message.requestCount = parseInt(object.requestCount, 10);else if (typeof object.requestCount === \"number\") message.requestCount = object.requestCount;else if (typeof object.requestCount === \"object\") message.requestCount = new $util.LongBits(object.requestCount.low >>> 0, object.requestCount.high >>> 0).toNumber(true);\n    if (object.cacheHits != null) if ($util.Long) (message.cacheHits = $util.Long.fromValue(object.cacheHits)).unsigned = true;else if (typeof object.cacheHits === \"string\") message.cacheHits = parseInt(object.cacheHits, 10);else if (typeof object.cacheHits === \"number\") message.cacheHits = object.cacheHits;else if (typeof object.cacheHits === \"object\") message.cacheHits = new $util.LongBits(object.cacheHits.low >>> 0, object.cacheHits.high >>> 0).toNumber(true);\n    if (object.persistedQueryHits != null) if ($util.Long) (message.persistedQueryHits = $util.Long.fromValue(object.persistedQueryHits)).unsigned = true;else if (typeof object.persistedQueryHits === \"string\") message.persistedQueryHits = parseInt(object.persistedQueryHits, 10);else if (typeof object.persistedQueryHits === \"number\") message.persistedQueryHits = object.persistedQueryHits;else if (typeof object.persistedQueryHits === \"object\") message.persistedQueryHits = new $util.LongBits(object.persistedQueryHits.low >>> 0, object.persistedQueryHits.high >>> 0).toNumber(true);\n    if (object.persistedQueryMisses != null) if ($util.Long) (message.persistedQueryMisses = $util.Long.fromValue(object.persistedQueryMisses)).unsigned = true;else if (typeof object.persistedQueryMisses === \"string\") message.persistedQueryMisses = parseInt(object.persistedQueryMisses, 10);else if (typeof object.persistedQueryMisses === \"number\") message.persistedQueryMisses = object.persistedQueryMisses;else if (typeof object.persistedQueryMisses === \"object\") message.persistedQueryMisses = new $util.LongBits(object.persistedQueryMisses.low >>> 0, object.persistedQueryMisses.high >>> 0).toNumber(true);\n\n    if (object.cacheLatencyCount) {\n      if (!Array.isArray(object.cacheLatencyCount)) throw TypeError(\".QueryLatencyStats.cacheLatencyCount: array expected\");\n      message.cacheLatencyCount = [];\n\n      for (var i = 0; i < object.cacheLatencyCount.length; ++i) if ($util.Long) (message.cacheLatencyCount[i] = $util.Long.fromValue(object.cacheLatencyCount[i])).unsigned = false;else if (typeof object.cacheLatencyCount[i] === \"string\") message.cacheLatencyCount[i] = parseInt(object.cacheLatencyCount[i], 10);else if (typeof object.cacheLatencyCount[i] === \"number\") message.cacheLatencyCount[i] = object.cacheLatencyCount[i];else if (typeof object.cacheLatencyCount[i] === \"object\") message.cacheLatencyCount[i] = new $util.LongBits(object.cacheLatencyCount[i].low >>> 0, object.cacheLatencyCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.rootErrorStats != null) {\n      if (typeof object.rootErrorStats !== \"object\") throw TypeError(\".QueryLatencyStats.rootErrorStats: object expected\");\n      message.rootErrorStats = $root.PathErrorStats.fromObject(object.rootErrorStats);\n    }\n\n    if (object.requestsWithErrorsCount != null) if ($util.Long) (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;else if (typeof object.requestsWithErrorsCount === \"string\") message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);else if (typeof object.requestsWithErrorsCount === \"number\") message.requestsWithErrorsCount = object.requestsWithErrorsCount;else if (typeof object.requestsWithErrorsCount === \"object\") message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n\n    if (object.publicCacheTtlCount) {\n      if (!Array.isArray(object.publicCacheTtlCount)) throw TypeError(\".QueryLatencyStats.publicCacheTtlCount: array expected\");\n      message.publicCacheTtlCount = [];\n\n      for (var i = 0; i < object.publicCacheTtlCount.length; ++i) if ($util.Long) (message.publicCacheTtlCount[i] = $util.Long.fromValue(object.publicCacheTtlCount[i])).unsigned = false;else if (typeof object.publicCacheTtlCount[i] === \"string\") message.publicCacheTtlCount[i] = parseInt(object.publicCacheTtlCount[i], 10);else if (typeof object.publicCacheTtlCount[i] === \"number\") message.publicCacheTtlCount[i] = object.publicCacheTtlCount[i];else if (typeof object.publicCacheTtlCount[i] === \"object\") message.publicCacheTtlCount[i] = new $util.LongBits(object.publicCacheTtlCount[i].low >>> 0, object.publicCacheTtlCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.privateCacheTtlCount) {\n      if (!Array.isArray(object.privateCacheTtlCount)) throw TypeError(\".QueryLatencyStats.privateCacheTtlCount: array expected\");\n      message.privateCacheTtlCount = [];\n\n      for (var i = 0; i < object.privateCacheTtlCount.length; ++i) if ($util.Long) (message.privateCacheTtlCount[i] = $util.Long.fromValue(object.privateCacheTtlCount[i])).unsigned = false;else if (typeof object.privateCacheTtlCount[i] === \"string\") message.privateCacheTtlCount[i] = parseInt(object.privateCacheTtlCount[i], 10);else if (typeof object.privateCacheTtlCount[i] === \"number\") message.privateCacheTtlCount[i] = object.privateCacheTtlCount[i];else if (typeof object.privateCacheTtlCount[i] === \"object\") message.privateCacheTtlCount[i] = new $util.LongBits(object.privateCacheTtlCount[i].low >>> 0, object.privateCacheTtlCount[i].high >>> 0).toNumber();\n    }\n\n    if (object.registeredOperationCount != null) if ($util.Long) (message.registeredOperationCount = $util.Long.fromValue(object.registeredOperationCount)).unsigned = true;else if (typeof object.registeredOperationCount === \"string\") message.registeredOperationCount = parseInt(object.registeredOperationCount, 10);else if (typeof object.registeredOperationCount === \"number\") message.registeredOperationCount = object.registeredOperationCount;else if (typeof object.registeredOperationCount === \"object\") message.registeredOperationCount = new $util.LongBits(object.registeredOperationCount.low >>> 0, object.registeredOperationCount.high >>> 0).toNumber(true);\n    if (object.forbiddenOperationCount != null) if ($util.Long) (message.forbiddenOperationCount = $util.Long.fromValue(object.forbiddenOperationCount)).unsigned = true;else if (typeof object.forbiddenOperationCount === \"string\") message.forbiddenOperationCount = parseInt(object.forbiddenOperationCount, 10);else if (typeof object.forbiddenOperationCount === \"number\") message.forbiddenOperationCount = object.forbiddenOperationCount;else if (typeof object.forbiddenOperationCount === \"object\") message.forbiddenOperationCount = new $util.LongBits(object.forbiddenOperationCount.low >>> 0, object.forbiddenOperationCount.high >>> 0).toNumber(true);\n    return message;\n  };\n  /**\n   * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof QueryLatencyStats\n   * @static\n   * @param {QueryLatencyStats} message QueryLatencyStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  QueryLatencyStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.arrays || options.defaults) {\n      object.latencyCount = [];\n      object.cacheLatencyCount = [];\n      object.publicCacheTtlCount = [];\n      object.privateCacheTtlCount = [];\n    }\n\n    if (options.defaults) {\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.cacheHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.cacheHits = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.persistedQueryHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.persistedQueryHits = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.persistedQueryMisses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.persistedQueryMisses = options.longs === String ? \"0\" : 0;\n\n      object.rootErrorStats = null;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.registeredOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.registeredOperationCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.forbiddenOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.forbiddenOperationCount = options.longs === String ? \"0\" : 0;\n    }\n\n    if (message.latencyCount && message.latencyCount.length) {\n      object.latencyCount = [];\n\n      for (var j = 0; j < message.latencyCount.length; ++j) if (typeof message.latencyCount[j] === \"number\") object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];else object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n    }\n\n    if (message.requestCount != null && message.hasOwnProperty(\"requestCount\")) if (typeof message.requestCount === \"number\") object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;else object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n    if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\")) if (typeof message.cacheHits === \"number\") object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;else object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n    if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\")) if (typeof message.persistedQueryHits === \"number\") object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;else object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n    if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\")) if (typeof message.persistedQueryMisses === \"number\") object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;else object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n\n    if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n      object.cacheLatencyCount = [];\n\n      for (var j = 0; j < message.cacheLatencyCount.length; ++j) if (typeof message.cacheLatencyCount[j] === \"number\") object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];else object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n    }\n\n    if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n\n    if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n      object.publicCacheTtlCount = [];\n\n      for (var j = 0; j < message.publicCacheTtlCount.length; ++j) if (typeof message.publicCacheTtlCount[j] === \"number\") object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];else object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n    }\n\n    if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n      object.privateCacheTtlCount = [];\n\n      for (var j = 0; j < message.privateCacheTtlCount.length; ++j) if (typeof message.privateCacheTtlCount[j] === \"number\") object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];else object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n    }\n\n    if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\")) if (typeof message.registeredOperationCount === \"number\") object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;else object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n    if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\")) if (typeof message.forbiddenOperationCount === \"number\") object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;else object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n    return object;\n  };\n  /**\n   * Converts this QueryLatencyStats to JSON.\n   * @function toJSON\n   * @memberof QueryLatencyStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  QueryLatencyStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return QueryLatencyStats;\n}();\n\n$root.StatsContext = function () {\n  /**\n   * Properties of a StatsContext.\n   * @exports IStatsContext\n   * @interface IStatsContext\n   * @property {string|null} [clientReferenceId] StatsContext clientReferenceId\n   * @property {string|null} [clientName] StatsContext clientName\n   * @property {string|null} [clientVersion] StatsContext clientVersion\n   */\n\n  /**\n   * Constructs a new StatsContext.\n   * @exports StatsContext\n   * @classdesc Represents a StatsContext.\n   * @implements IStatsContext\n   * @constructor\n   * @param {IStatsContext=} [properties] Properties to set\n   */\n  function StatsContext(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * StatsContext clientReferenceId.\n   * @member {string} clientReferenceId\n   * @memberof StatsContext\n   * @instance\n   */\n\n\n  StatsContext.prototype.clientReferenceId = \"\";\n  /**\n   * StatsContext clientName.\n   * @member {string} clientName\n   * @memberof StatsContext\n   * @instance\n   */\n\n  StatsContext.prototype.clientName = \"\";\n  /**\n   * StatsContext clientVersion.\n   * @member {string} clientVersion\n   * @memberof StatsContext\n   * @instance\n   */\n\n  StatsContext.prototype.clientVersion = \"\";\n  /**\n   * Creates a new StatsContext instance using the specified properties.\n   * @function create\n   * @memberof StatsContext\n   * @static\n   * @param {IStatsContext=} [properties] Properties to set\n   * @returns {StatsContext} StatsContext instance\n   */\n\n  StatsContext.create = function create(properties) {\n    return new StatsContext(properties);\n  };\n  /**\n   * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n   * @function encode\n   * @memberof StatsContext\n   * @static\n   * @param {IStatsContext} message StatsContext message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  StatsContext.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.clientReferenceId != null && Object.hasOwnProperty.call(message, \"clientReferenceId\")) writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).string(message.clientReferenceId);\n    if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\")) writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).string(message.clientName);\n    if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\")) writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).string(message.clientVersion);\n    return writer;\n  };\n  /**\n   * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof StatsContext\n   * @static\n   * @param {IStatsContext} message StatsContext message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a StatsContext message from the specified reader or buffer.\n   * @function decode\n   * @memberof StatsContext\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {StatsContext} StatsContext\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  StatsContext.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.StatsContext();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.clientReferenceId = reader.string();\n          break;\n\n        case 2:\n          message.clientName = reader.string();\n          break;\n\n        case 3:\n          message.clientVersion = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof StatsContext\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {StatsContext} StatsContext\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  StatsContext.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a StatsContext message.\n   * @function verify\n   * @memberof StatsContext\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  StatsContext.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\")) if (!$util.isString(message.clientReferenceId)) return \"clientReferenceId: string expected\";\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) if (!$util.isString(message.clientName)) return \"clientName: string expected\";\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) if (!$util.isString(message.clientVersion)) return \"clientVersion: string expected\";\n    return null;\n  };\n  /**\n   * Creates a StatsContext message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof StatsContext\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {StatsContext} StatsContext\n   */\n\n\n  StatsContext.fromObject = function fromObject(object) {\n    if (object instanceof $root.StatsContext) return object;\n    var message = new $root.StatsContext();\n    if (object.clientReferenceId != null) message.clientReferenceId = String(object.clientReferenceId);\n    if (object.clientName != null) message.clientName = String(object.clientName);\n    if (object.clientVersion != null) message.clientVersion = String(object.clientVersion);\n    return message;\n  };\n  /**\n   * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof StatsContext\n   * @static\n   * @param {StatsContext} message StatsContext\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  StatsContext.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.clientReferenceId = \"\";\n      object.clientName = \"\";\n      object.clientVersion = \"\";\n    }\n\n    if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\")) object.clientReferenceId = message.clientReferenceId;\n    if (message.clientName != null && message.hasOwnProperty(\"clientName\")) object.clientName = message.clientName;\n    if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\")) object.clientVersion = message.clientVersion;\n    return object;\n  };\n  /**\n   * Converts this StatsContext to JSON.\n   * @function toJSON\n   * @memberof StatsContext\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  StatsContext.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return StatsContext;\n}();\n\n$root.ContextualizedQueryLatencyStats = function () {\n  /**\n   * Properties of a ContextualizedQueryLatencyStats.\n   * @exports IContextualizedQueryLatencyStats\n   * @interface IContextualizedQueryLatencyStats\n   * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n   * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n   */\n\n  /**\n   * Constructs a new ContextualizedQueryLatencyStats.\n   * @exports ContextualizedQueryLatencyStats\n   * @classdesc Represents a ContextualizedQueryLatencyStats.\n   * @implements IContextualizedQueryLatencyStats\n   * @constructor\n   * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n   */\n  function ContextualizedQueryLatencyStats(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * ContextualizedQueryLatencyStats queryLatencyStats.\n   * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n   * @memberof ContextualizedQueryLatencyStats\n   * @instance\n   */\n\n\n  ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n  /**\n   * ContextualizedQueryLatencyStats context.\n   * @member {IStatsContext|null|undefined} context\n   * @memberof ContextualizedQueryLatencyStats\n   * @instance\n   */\n\n  ContextualizedQueryLatencyStats.prototype.context = null;\n  /**\n   * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n   * @function create\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n   */\n\n  ContextualizedQueryLatencyStats.create = function create(properties) {\n    return new ContextualizedQueryLatencyStats(properties);\n  };\n  /**\n   * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n   * @function encode\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\")) $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.context != null && Object.hasOwnProperty.call(message, \"context\")) $root.StatsContext.encode(message.context, writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ContextualizedQueryLatencyStats();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.context = $root.StatsContext.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a ContextualizedQueryLatencyStats message.\n   * @function verify\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  ContextualizedQueryLatencyStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n      var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n      if (error) return \"queryLatencyStats.\" + error;\n    }\n\n    if (message.context != null && message.hasOwnProperty(\"context\")) {\n      var error = $root.StatsContext.verify(message.context);\n      if (error) return \"context.\" + error;\n    }\n\n    return null;\n  };\n  /**\n   * Creates a ContextualizedQueryLatencyStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n   */\n\n\n  ContextualizedQueryLatencyStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.ContextualizedQueryLatencyStats) return object;\n    var message = new $root.ContextualizedQueryLatencyStats();\n\n    if (object.queryLatencyStats != null) {\n      if (typeof object.queryLatencyStats !== \"object\") throw TypeError(\".ContextualizedQueryLatencyStats.queryLatencyStats: object expected\");\n      message.queryLatencyStats = $root.QueryLatencyStats.fromObject(object.queryLatencyStats);\n    }\n\n    if (object.context != null) {\n      if (typeof object.context !== \"object\") throw TypeError(\".ContextualizedQueryLatencyStats.context: object expected\");\n      message.context = $root.StatsContext.fromObject(object.context);\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ContextualizedQueryLatencyStats\n   * @static\n   * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.queryLatencyStats = null;\n      object.context = null;\n    }\n\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n    if (message.context != null && message.hasOwnProperty(\"context\")) object.context = $root.StatsContext.toObject(message.context, options);\n    return object;\n  };\n  /**\n   * Converts this ContextualizedQueryLatencyStats to JSON.\n   * @function toJSON\n   * @memberof ContextualizedQueryLatencyStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return ContextualizedQueryLatencyStats;\n}();\n\n$root.ContextualizedTypeStats = function () {\n  /**\n   * Properties of a ContextualizedTypeStats.\n   * @exports IContextualizedTypeStats\n   * @interface IContextualizedTypeStats\n   * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n   * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n   */\n\n  /**\n   * Constructs a new ContextualizedTypeStats.\n   * @exports ContextualizedTypeStats\n   * @classdesc Represents a ContextualizedTypeStats.\n   * @implements IContextualizedTypeStats\n   * @constructor\n   * @param {IContextualizedTypeStats=} [properties] Properties to set\n   */\n  function ContextualizedTypeStats(properties) {\n    this.perTypeStat = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * ContextualizedTypeStats context.\n   * @member {IStatsContext|null|undefined} context\n   * @memberof ContextualizedTypeStats\n   * @instance\n   */\n\n\n  ContextualizedTypeStats.prototype.context = null;\n  /**\n   * ContextualizedTypeStats perTypeStat.\n   * @member {Object.<string,ITypeStat>} perTypeStat\n   * @memberof ContextualizedTypeStats\n   * @instance\n   */\n\n  ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n  /**\n   * Creates a new ContextualizedTypeStats instance using the specified properties.\n   * @function create\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {IContextualizedTypeStats=} [properties] Properties to set\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n   */\n\n  ContextualizedTypeStats.create = function create(properties) {\n    return new ContextualizedTypeStats(properties);\n  };\n  /**\n   * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n   * @function encode\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedTypeStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.context != null && Object.hasOwnProperty.call(message, \"context\")) $root.StatsContext.encode(message.context, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\")) for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n  /**\n   * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedTypeStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ContextualizedTypeStats(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.context = $root.StatsContext.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          reader.skip().pos++;\n          if (message.perTypeStat === $util.emptyObject) message.perTypeStat = {};\n          key = reader.string();\n          reader.pos++;\n          message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a ContextualizedTypeStats message.\n   * @function verify\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  ContextualizedTypeStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.context != null && message.hasOwnProperty(\"context\")) {\n      var error = $root.StatsContext.verify(message.context);\n      if (error) return \"context.\" + error;\n    }\n\n    if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n      if (!$util.isObject(message.perTypeStat)) return \"perTypeStat: object expected\";\n      var key = Object.keys(message.perTypeStat);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n        if (error) return \"perTypeStat.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a ContextualizedTypeStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n   */\n\n\n  ContextualizedTypeStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.ContextualizedTypeStats) return object;\n    var message = new $root.ContextualizedTypeStats();\n\n    if (object.context != null) {\n      if (typeof object.context !== \"object\") throw TypeError(\".ContextualizedTypeStats.context: object expected\");\n      message.context = $root.StatsContext.fromObject(object.context);\n    }\n\n    if (object.perTypeStat) {\n      if (typeof object.perTypeStat !== \"object\") throw TypeError(\".ContextualizedTypeStats.perTypeStat: object expected\");\n      message.perTypeStat = {};\n\n      for (var keys = Object.keys(object.perTypeStat), i = 0; i < keys.length; ++i) {\n        if (typeof object.perTypeStat[keys[i]] !== \"object\") throw TypeError(\".ContextualizedTypeStats.perTypeStat: object expected\");\n        message.perTypeStat[keys[i]] = $root.TypeStat.fromObject(object.perTypeStat[keys[i]]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ContextualizedTypeStats\n   * @static\n   * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  ContextualizedTypeStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.perTypeStat = {};\n    if (options.defaults) object.context = null;\n    if (message.context != null && message.hasOwnProperty(\"context\")) object.context = $root.StatsContext.toObject(message.context, options);\n    var keys2;\n\n    if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n      object.perTypeStat = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this ContextualizedTypeStats to JSON.\n   * @function toJSON\n   * @memberof ContextualizedTypeStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return ContextualizedTypeStats;\n}();\n\n$root.FieldStat = function () {\n  /**\n   * Properties of a FieldStat.\n   * @exports IFieldStat\n   * @interface IFieldStat\n   * @property {string|null} [returnType] FieldStat returnType\n   * @property {number|null} [errorsCount] FieldStat errorsCount\n   * @property {number|null} [count] FieldStat count\n   * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n   * @property {Array.<number>|null} [latencyCount] FieldStat latencyCount\n   */\n\n  /**\n   * Constructs a new FieldStat.\n   * @exports FieldStat\n   * @classdesc Represents a FieldStat.\n   * @implements IFieldStat\n   * @constructor\n   * @param {IFieldStat=} [properties] Properties to set\n   */\n  function FieldStat(properties) {\n    this.latencyCount = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * FieldStat returnType.\n   * @member {string} returnType\n   * @memberof FieldStat\n   * @instance\n   */\n\n\n  FieldStat.prototype.returnType = \"\";\n  /**\n   * FieldStat errorsCount.\n   * @member {number} errorsCount\n   * @memberof FieldStat\n   * @instance\n   */\n\n  FieldStat.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * FieldStat count.\n   * @member {number} count\n   * @memberof FieldStat\n   * @instance\n   */\n\n  FieldStat.prototype.count = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * FieldStat requestsWithErrorsCount.\n   * @member {number} requestsWithErrorsCount\n   * @memberof FieldStat\n   * @instance\n   */\n\n  FieldStat.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0, 0, true) : 0;\n  /**\n   * FieldStat latencyCount.\n   * @member {Array.<number>} latencyCount\n   * @memberof FieldStat\n   * @instance\n   */\n\n  FieldStat.prototype.latencyCount = $util.emptyArray;\n  /**\n   * Creates a new FieldStat instance using the specified properties.\n   * @function create\n   * @memberof FieldStat\n   * @static\n   * @param {IFieldStat=} [properties] Properties to set\n   * @returns {FieldStat} FieldStat instance\n   */\n\n  FieldStat.create = function create(properties) {\n    return new FieldStat(properties);\n  };\n  /**\n   * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n   * @function encode\n   * @memberof FieldStat\n   * @static\n   * @param {IFieldStat} message FieldStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  FieldStat.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\")) writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).string(message.returnType);\n    if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\")) writer.uint32(\n    /* id 4, wireType 0 =*/\n    32).uint64(message.errorsCount);\n    if (message.count != null && Object.hasOwnProperty.call(message, \"count\")) writer.uint32(\n    /* id 5, wireType 0 =*/\n    40).uint64(message.count);\n    if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\")) writer.uint32(\n    /* id 6, wireType 0 =*/\n    48).uint64(message.requestsWithErrorsCount);\n\n    if (message.latencyCount != null && message.latencyCount.length) {\n      writer.uint32(\n      /* id 8, wireType 2 =*/\n      66).fork();\n\n      for (var i = 0; i < message.latencyCount.length; ++i) writer.int64(message.latencyCount[i]);\n\n      writer.ldelim();\n    }\n\n    return writer;\n  };\n  /**\n   * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof FieldStat\n   * @static\n   * @param {IFieldStat} message FieldStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a FieldStat message from the specified reader or buffer.\n   * @function decode\n   * @memberof FieldStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {FieldStat} FieldStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  FieldStat.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.FieldStat();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 3:\n          message.returnType = reader.string();\n          break;\n\n        case 4:\n          message.errorsCount = reader.uint64();\n          break;\n\n        case 5:\n          message.count = reader.uint64();\n          break;\n\n        case 6:\n          message.requestsWithErrorsCount = reader.uint64();\n          break;\n\n        case 8:\n          if (!(message.latencyCount && message.latencyCount.length)) message.latencyCount = [];\n\n          if ((tag & 7) === 2) {\n            var end2 = reader.uint32() + reader.pos;\n\n            while (reader.pos < end2) message.latencyCount.push(reader.int64());\n          } else message.latencyCount.push(reader.int64());\n\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof FieldStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {FieldStat} FieldStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  FieldStat.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a FieldStat message.\n   * @function verify\n   * @memberof FieldStat\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  FieldStat.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) if (!$util.isString(message.returnType)) return \"returnType: string expected\";\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high))) return \"errorsCount: integer|Long expected\";\n    if (message.count != null && message.hasOwnProperty(\"count\")) if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high))) return \"count: integer|Long expected\";\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high))) return \"requestsWithErrorsCount: integer|Long expected\";\n\n    if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n      if (!Array.isArray(message.latencyCount)) return \"latencyCount: array expected\";\n\n      for (var i = 0; i < message.latencyCount.length; ++i) if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high))) return \"latencyCount: integer|Long[] expected\";\n    }\n\n    return null;\n  };\n  /**\n   * Creates a FieldStat message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof FieldStat\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {FieldStat} FieldStat\n   */\n\n\n  FieldStat.fromObject = function fromObject(object) {\n    if (object instanceof $root.FieldStat) return object;\n    var message = new $root.FieldStat();\n    if (object.returnType != null) message.returnType = String(object.returnType);\n    if (object.errorsCount != null) if ($util.Long) (message.errorsCount = $util.Long.fromValue(object.errorsCount)).unsigned = true;else if (typeof object.errorsCount === \"string\") message.errorsCount = parseInt(object.errorsCount, 10);else if (typeof object.errorsCount === \"number\") message.errorsCount = object.errorsCount;else if (typeof object.errorsCount === \"object\") message.errorsCount = new $util.LongBits(object.errorsCount.low >>> 0, object.errorsCount.high >>> 0).toNumber(true);\n    if (object.count != null) if ($util.Long) (message.count = $util.Long.fromValue(object.count)).unsigned = true;else if (typeof object.count === \"string\") message.count = parseInt(object.count, 10);else if (typeof object.count === \"number\") message.count = object.count;else if (typeof object.count === \"object\") message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber(true);\n    if (object.requestsWithErrorsCount != null) if ($util.Long) (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;else if (typeof object.requestsWithErrorsCount === \"string\") message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);else if (typeof object.requestsWithErrorsCount === \"number\") message.requestsWithErrorsCount = object.requestsWithErrorsCount;else if (typeof object.requestsWithErrorsCount === \"object\") message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n\n    if (object.latencyCount) {\n      if (!Array.isArray(object.latencyCount)) throw TypeError(\".FieldStat.latencyCount: array expected\");\n      message.latencyCount = [];\n\n      for (var i = 0; i < object.latencyCount.length; ++i) if ($util.Long) (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;else if (typeof object.latencyCount[i] === \"string\") message.latencyCount[i] = parseInt(object.latencyCount[i], 10);else if (typeof object.latencyCount[i] === \"number\") message.latencyCount[i] = object.latencyCount[i];else if (typeof object.latencyCount[i] === \"object\") message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof FieldStat\n   * @static\n   * @param {FieldStat} message FieldStat\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  FieldStat.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.latencyCount = [];\n\n    if (options.defaults) {\n      object.returnType = \"\";\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.errorsCount = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.count = options.longs === String ? \"0\" : 0;\n\n      if ($util.Long) {\n        var long = new $util.Long(0, 0, true);\n        object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n      } else object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n    }\n\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) object.returnType = message.returnType;\n    if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\")) if (typeof message.errorsCount === \"number\") object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;else object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n    if (message.count != null && message.hasOwnProperty(\"count\")) if (typeof message.count === \"number\") object.count = options.longs === String ? String(message.count) : message.count;else object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber(true) : message.count;\n    if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\")) if (typeof message.requestsWithErrorsCount === \"number\") object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;else object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n\n    if (message.latencyCount && message.latencyCount.length) {\n      object.latencyCount = [];\n\n      for (var j = 0; j < message.latencyCount.length; ++j) if (typeof message.latencyCount[j] === \"number\") object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];else object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n    }\n\n    return object;\n  };\n  /**\n   * Converts this FieldStat to JSON.\n   * @function toJSON\n   * @memberof FieldStat\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  FieldStat.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return FieldStat;\n}();\n\n$root.TypeStat = function () {\n  /**\n   * Properties of a TypeStat.\n   * @exports ITypeStat\n   * @interface ITypeStat\n   * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n   */\n\n  /**\n   * Constructs a new TypeStat.\n   * @exports TypeStat\n   * @classdesc Represents a TypeStat.\n   * @implements ITypeStat\n   * @constructor\n   * @param {ITypeStat=} [properties] Properties to set\n   */\n  function TypeStat(properties) {\n    this.perFieldStat = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * TypeStat perFieldStat.\n   * @member {Object.<string,IFieldStat>} perFieldStat\n   * @memberof TypeStat\n   * @instance\n   */\n\n\n  TypeStat.prototype.perFieldStat = $util.emptyObject;\n  /**\n   * Creates a new TypeStat instance using the specified properties.\n   * @function create\n   * @memberof TypeStat\n   * @static\n   * @param {ITypeStat=} [properties] Properties to set\n   * @returns {TypeStat} TypeStat instance\n   */\n\n  TypeStat.create = function create(properties) {\n    return new TypeStat(properties);\n  };\n  /**\n   * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n   * @function encode\n   * @memberof TypeStat\n   * @static\n   * @param {ITypeStat} message TypeStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TypeStat.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\")) for (var keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n  /**\n   * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof TypeStat\n   * @static\n   * @param {ITypeStat} message TypeStat message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a TypeStat message from the specified reader or buffer.\n   * @function decode\n   * @memberof TypeStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {TypeStat} TypeStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TypeStat.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.TypeStat(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 3:\n          reader.skip().pos++;\n          if (message.perFieldStat === $util.emptyObject) message.perFieldStat = {};\n          key = reader.string();\n          reader.pos++;\n          message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof TypeStat\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {TypeStat} TypeStat\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TypeStat.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a TypeStat message.\n   * @function verify\n   * @memberof TypeStat\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  TypeStat.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n      if (!$util.isObject(message.perFieldStat)) return \"perFieldStat: object expected\";\n      var key = Object.keys(message.perFieldStat);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n        if (error) return \"perFieldStat.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a TypeStat message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof TypeStat\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {TypeStat} TypeStat\n   */\n\n\n  TypeStat.fromObject = function fromObject(object) {\n    if (object instanceof $root.TypeStat) return object;\n    var message = new $root.TypeStat();\n\n    if (object.perFieldStat) {\n      if (typeof object.perFieldStat !== \"object\") throw TypeError(\".TypeStat.perFieldStat: object expected\");\n      message.perFieldStat = {};\n\n      for (var keys = Object.keys(object.perFieldStat), i = 0; i < keys.length; ++i) {\n        if (typeof object.perFieldStat[keys[i]] !== \"object\") throw TypeError(\".TypeStat.perFieldStat: object expected\");\n        message.perFieldStat[keys[i]] = $root.FieldStat.fromObject(object.perFieldStat[keys[i]]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof TypeStat\n   * @static\n   * @param {TypeStat} message TypeStat\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  TypeStat.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.perFieldStat = {};\n    var keys2;\n\n    if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n      object.perFieldStat = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this TypeStat to JSON.\n   * @function toJSON\n   * @memberof TypeStat\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  TypeStat.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return TypeStat;\n}();\n\n$root.Field = function () {\n  /**\n   * Properties of a Field.\n   * @exports IField\n   * @interface IField\n   * @property {string|null} [name] Field name\n   * @property {string|null} [returnType] Field returnType\n   */\n\n  /**\n   * Constructs a new Field.\n   * @exports Field\n   * @classdesc Represents a Field.\n   * @implements IField\n   * @constructor\n   * @param {IField=} [properties] Properties to set\n   */\n  function Field(properties) {\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * Field name.\n   * @member {string} name\n   * @memberof Field\n   * @instance\n   */\n\n\n  Field.prototype.name = \"\";\n  /**\n   * Field returnType.\n   * @member {string} returnType\n   * @memberof Field\n   * @instance\n   */\n\n  Field.prototype.returnType = \"\";\n  /**\n   * Creates a new Field instance using the specified properties.\n   * @function create\n   * @memberof Field\n   * @static\n   * @param {IField=} [properties] Properties to set\n   * @returns {Field} Field instance\n   */\n\n  Field.create = function create(properties) {\n    return new Field(properties);\n  };\n  /**\n   * Encodes the specified Field message. Does not implicitly {@link Field.verify|verify} messages.\n   * @function encode\n   * @memberof Field\n   * @static\n   * @param {IField} message Field message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Field.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).string(message.name);\n    if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\")) writer.uint32(\n    /* id 3, wireType 2 =*/\n    26).string(message.returnType);\n    return writer;\n  };\n  /**\n   * Encodes the specified Field message, length delimited. Does not implicitly {@link Field.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Field\n   * @static\n   * @param {IField} message Field message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Field.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a Field message from the specified reader or buffer.\n   * @function decode\n   * @memberof Field\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Field} Field\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Field.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Field();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 2:\n          message.name = reader.string();\n          break;\n\n        case 3:\n          message.returnType = reader.string();\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a Field message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Field\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Field} Field\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Field.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a Field message.\n   * @function verify\n   * @memberof Field\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  Field.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) if (!$util.isString(message.returnType)) return \"returnType: string expected\";\n    return null;\n  };\n  /**\n   * Creates a Field message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Field\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Field} Field\n   */\n\n\n  Field.fromObject = function fromObject(object) {\n    if (object instanceof $root.Field) return object;\n    var message = new $root.Field();\n    if (object.name != null) message.name = String(object.name);\n    if (object.returnType != null) message.returnType = String(object.returnType);\n    return message;\n  };\n  /**\n   * Creates a plain object from a Field message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Field\n   * @static\n   * @param {Field} message Field\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Field.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.defaults) {\n      object.name = \"\";\n      object.returnType = \"\";\n    }\n\n    if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n    if (message.returnType != null && message.hasOwnProperty(\"returnType\")) object.returnType = message.returnType;\n    return object;\n  };\n  /**\n   * Converts this Field to JSON.\n   * @function toJSON\n   * @memberof Field\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Field.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Field;\n}();\n\n$root.Type = function () {\n  /**\n   * Properties of a Type.\n   * @exports IType\n   * @interface IType\n   * @property {string|null} [name] Type name\n   * @property {Array.<IField>|null} [field] Type field\n   */\n\n  /**\n   * Constructs a new Type.\n   * @exports Type\n   * @classdesc Represents a Type.\n   * @implements IType\n   * @constructor\n   * @param {IType=} [properties] Properties to set\n   */\n  function Type(properties) {\n    this.field = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * Type name.\n   * @member {string} name\n   * @memberof Type\n   * @instance\n   */\n\n\n  Type.prototype.name = \"\";\n  /**\n   * Type field.\n   * @member {Array.<IField>} field\n   * @memberof Type\n   * @instance\n   */\n\n  Type.prototype.field = $util.emptyArray;\n  /**\n   * Creates a new Type instance using the specified properties.\n   * @function create\n   * @memberof Type\n   * @static\n   * @param {IType=} [properties] Properties to set\n   * @returns {Type} Type instance\n   */\n\n  Type.create = function create(properties) {\n    return new Type(properties);\n  };\n  /**\n   * Encodes the specified Type message. Does not implicitly {@link Type.verify|verify} messages.\n   * @function encode\n   * @memberof Type\n   * @static\n   * @param {IType} message Type message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Type.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.name != null && Object.hasOwnProperty.call(message, \"name\")) writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).string(message.name);\n    if (message.field != null && message.field.length) for (var i = 0; i < message.field.length; ++i) $root.Field.encode(message.field[i], writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified Type message, length delimited. Does not implicitly {@link Type.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Type\n   * @static\n   * @param {IType} message Type message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Type.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a Type message from the specified reader or buffer.\n   * @function decode\n   * @memberof Type\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Type} Type\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Type.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Type();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.name = reader.string();\n          break;\n\n        case 2:\n          if (!(message.field && message.field.length)) message.field = [];\n          message.field.push($root.Field.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a Type message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Type\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Type} Type\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Type.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a Type message.\n   * @function verify\n   * @memberof Type\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  Type.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n    if (message.name != null && message.hasOwnProperty(\"name\")) if (!$util.isString(message.name)) return \"name: string expected\";\n\n    if (message.field != null && message.hasOwnProperty(\"field\")) {\n      if (!Array.isArray(message.field)) return \"field: array expected\";\n\n      for (var i = 0; i < message.field.length; ++i) {\n        var error = $root.Field.verify(message.field[i]);\n        if (error) return \"field.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a Type message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Type\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Type} Type\n   */\n\n\n  Type.fromObject = function fromObject(object) {\n    if (object instanceof $root.Type) return object;\n    var message = new $root.Type();\n    if (object.name != null) message.name = String(object.name);\n\n    if (object.field) {\n      if (!Array.isArray(object.field)) throw TypeError(\".Type.field: array expected\");\n      message.field = [];\n\n      for (var i = 0; i < object.field.length; ++i) {\n        if (typeof object.field[i] !== \"object\") throw TypeError(\".Type.field: object expected\");\n        message.field[i] = $root.Field.fromObject(object.field[i]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a Type message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Type\n   * @static\n   * @param {Type} message Type\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Type.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.arrays || options.defaults) object.field = [];\n    if (options.defaults) object.name = \"\";\n    if (message.name != null && message.hasOwnProperty(\"name\")) object.name = message.name;\n\n    if (message.field && message.field.length) {\n      object.field = [];\n\n      for (var j = 0; j < message.field.length; ++j) object.field[j] = $root.Field.toObject(message.field[j], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this Type to JSON.\n   * @function toJSON\n   * @memberof Type\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Type.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Type;\n}();\n\n$root.Report = function () {\n  /**\n   * Properties of a Report.\n   * @exports IReport\n   * @interface IReport\n   * @property {IReportHeader|null} [header] Report header\n   * @property {Object.<string,ITracesAndStats>|null} [tracesPerQuery] Report tracesPerQuery\n   * @property {google.protobuf.ITimestamp|null} [endTime] Report endTime\n   */\n\n  /**\n   * Constructs a new Report.\n   * @exports Report\n   * @classdesc Represents a Report.\n   * @implements IReport\n   * @constructor\n   * @param {IReport=} [properties] Properties to set\n   */\n  function Report(properties) {\n    this.tracesPerQuery = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * Report header.\n   * @member {IReportHeader|null|undefined} header\n   * @memberof Report\n   * @instance\n   */\n\n\n  Report.prototype.header = null;\n  /**\n   * Report tracesPerQuery.\n   * @member {Object.<string,ITracesAndStats>} tracesPerQuery\n   * @memberof Report\n   * @instance\n   */\n\n  Report.prototype.tracesPerQuery = $util.emptyObject;\n  /**\n   * Report endTime.\n   * @member {google.protobuf.ITimestamp|null|undefined} endTime\n   * @memberof Report\n   * @instance\n   */\n\n  Report.prototype.endTime = null;\n  /**\n   * Creates a new Report instance using the specified properties.\n   * @function create\n   * @memberof Report\n   * @static\n   * @param {IReport=} [properties] Properties to set\n   * @returns {Report} Report instance\n   */\n\n  Report.create = function create(properties) {\n    return new Report(properties);\n  };\n  /**\n   * Encodes the specified Report message. Does not implicitly {@link Report.verify|verify} messages.\n   * @function encode\n   * @memberof Report\n   * @static\n   * @param {IReport} message Report message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Report.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.header != null && Object.hasOwnProperty.call(message, \"header\")) $root.ReportHeader.encode(message.header, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\")) $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\")) for (var keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 5, wireType 2 =*/\n      42).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n  /**\n   * Encodes the specified Report message, length delimited. Does not implicitly {@link Report.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof Report\n   * @static\n   * @param {IReport} message Report message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  Report.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a Report message from the specified reader or buffer.\n   * @function decode\n   * @memberof Report\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {Report} Report\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Report.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.Report(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.header = $root.ReportHeader.decode(reader, reader.uint32());\n          break;\n\n        case 5:\n          reader.skip().pos++;\n          if (message.tracesPerQuery === $util.emptyObject) message.tracesPerQuery = {};\n          key = reader.string();\n          reader.pos++;\n          message.tracesPerQuery[key] = $root.TracesAndStats.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a Report message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof Report\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {Report} Report\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  Report.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a Report message.\n   * @function verify\n   * @memberof Report\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  Report.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.header != null && message.hasOwnProperty(\"header\")) {\n      var error = $root.ReportHeader.verify(message.header);\n      if (error) return \"header.\" + error;\n    }\n\n    if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n      if (!$util.isObject(message.tracesPerQuery)) return \"tracesPerQuery: object expected\";\n      var key = Object.keys(message.tracesPerQuery);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.TracesAndStats.verify(message.tracesPerQuery[key[i]]);\n        if (error) return \"tracesPerQuery.\" + error;\n      }\n    }\n\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n      var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n      if (error) return \"endTime.\" + error;\n    }\n\n    return null;\n  };\n  /**\n   * Creates a Report message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof Report\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {Report} Report\n   */\n\n\n  Report.fromObject = function fromObject(object) {\n    if (object instanceof $root.Report) return object;\n    var message = new $root.Report();\n\n    if (object.header != null) {\n      if (typeof object.header !== \"object\") throw TypeError(\".Report.header: object expected\");\n      message.header = $root.ReportHeader.fromObject(object.header);\n    }\n\n    if (object.tracesPerQuery) {\n      if (typeof object.tracesPerQuery !== \"object\") throw TypeError(\".Report.tracesPerQuery: object expected\");\n      message.tracesPerQuery = {};\n\n      for (var keys = Object.keys(object.tracesPerQuery), i = 0; i < keys.length; ++i) {\n        if (typeof object.tracesPerQuery[keys[i]] !== \"object\") throw TypeError(\".Report.tracesPerQuery: object expected\");\n        message.tracesPerQuery[keys[i]] = $root.TracesAndStats.fromObject(object.tracesPerQuery[keys[i]]);\n      }\n    }\n\n    if (object.endTime != null) {\n      if (typeof object.endTime !== \"object\") throw TypeError(\".Report.endTime: object expected\");\n      message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a Report message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof Report\n   * @static\n   * @param {Report} message Report\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  Report.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.tracesPerQuery = {};\n\n    if (options.defaults) {\n      object.header = null;\n      object.endTime = null;\n    }\n\n    if (message.header != null && message.hasOwnProperty(\"header\")) object.header = $root.ReportHeader.toObject(message.header, options);\n    if (message.endTime != null && message.hasOwnProperty(\"endTime\")) object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n    var keys2;\n\n    if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n      object.tracesPerQuery = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.tracesPerQuery[keys2[j]] = $root.TracesAndStats.toObject(message.tracesPerQuery[keys2[j]], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this Report to JSON.\n   * @function toJSON\n   * @memberof Report\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  Report.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return Report;\n}();\n\n$root.ContextualizedStats = function () {\n  /**\n   * Properties of a ContextualizedStats.\n   * @exports IContextualizedStats\n   * @interface IContextualizedStats\n   * @property {IStatsContext|null} [context] ContextualizedStats context\n   * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedStats queryLatencyStats\n   * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedStats perTypeStat\n   */\n\n  /**\n   * Constructs a new ContextualizedStats.\n   * @exports ContextualizedStats\n   * @classdesc Represents a ContextualizedStats.\n   * @implements IContextualizedStats\n   * @constructor\n   * @param {IContextualizedStats=} [properties] Properties to set\n   */\n  function ContextualizedStats(properties) {\n    this.perTypeStat = {};\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * ContextualizedStats context.\n   * @member {IStatsContext|null|undefined} context\n   * @memberof ContextualizedStats\n   * @instance\n   */\n\n\n  ContextualizedStats.prototype.context = null;\n  /**\n   * ContextualizedStats queryLatencyStats.\n   * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n   * @memberof ContextualizedStats\n   * @instance\n   */\n\n  ContextualizedStats.prototype.queryLatencyStats = null;\n  /**\n   * ContextualizedStats perTypeStat.\n   * @member {Object.<string,ITypeStat>} perTypeStat\n   * @memberof ContextualizedStats\n   * @instance\n   */\n\n  ContextualizedStats.prototype.perTypeStat = $util.emptyObject;\n  /**\n   * Creates a new ContextualizedStats instance using the specified properties.\n   * @function create\n   * @memberof ContextualizedStats\n   * @static\n   * @param {IContextualizedStats=} [properties] Properties to set\n   * @returns {ContextualizedStats} ContextualizedStats instance\n   */\n\n  ContextualizedStats.create = function create(properties) {\n    return new ContextualizedStats(properties);\n  };\n  /**\n   * Encodes the specified ContextualizedStats message. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n   * @function encode\n   * @memberof ContextualizedStats\n   * @static\n   * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.context != null && Object.hasOwnProperty.call(message, \"context\")) $root.StatsContext.encode(message.context, writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\")) $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\")) for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n      writer.uint32(\n      /* id 3, wireType 2 =*/\n      26).fork().uint32(\n      /* id 1, wireType 2 =*/\n      10).string(keys[i]);\n      $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(\n      /* id 2, wireType 2 =*/\n      18).fork()).ldelim().ldelim();\n    }\n    return writer;\n  };\n  /**\n   * Encodes the specified ContextualizedStats message, length delimited. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof ContextualizedStats\n   * @static\n   * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  ContextualizedStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a ContextualizedStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof ContextualizedStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {ContextualizedStats} ContextualizedStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.ContextualizedStats(),\n        key;\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          message.context = $root.StatsContext.decode(reader, reader.uint32());\n          break;\n\n        case 2:\n          message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n          break;\n\n        case 3:\n          reader.skip().pos++;\n          if (message.perTypeStat === $util.emptyObject) message.perTypeStat = {};\n          key = reader.string();\n          reader.pos++;\n          message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a ContextualizedStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof ContextualizedStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {ContextualizedStats} ContextualizedStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  ContextualizedStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a ContextualizedStats message.\n   * @function verify\n   * @memberof ContextualizedStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  ContextualizedStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.context != null && message.hasOwnProperty(\"context\")) {\n      var error = $root.StatsContext.verify(message.context);\n      if (error) return \"context.\" + error;\n    }\n\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n      var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n      if (error) return \"queryLatencyStats.\" + error;\n    }\n\n    if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n      if (!$util.isObject(message.perTypeStat)) return \"perTypeStat: object expected\";\n      var key = Object.keys(message.perTypeStat);\n\n      for (var i = 0; i < key.length; ++i) {\n        var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n        if (error) return \"perTypeStat.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a ContextualizedStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof ContextualizedStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {ContextualizedStats} ContextualizedStats\n   */\n\n\n  ContextualizedStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.ContextualizedStats) return object;\n    var message = new $root.ContextualizedStats();\n\n    if (object.context != null) {\n      if (typeof object.context !== \"object\") throw TypeError(\".ContextualizedStats.context: object expected\");\n      message.context = $root.StatsContext.fromObject(object.context);\n    }\n\n    if (object.queryLatencyStats != null) {\n      if (typeof object.queryLatencyStats !== \"object\") throw TypeError(\".ContextualizedStats.queryLatencyStats: object expected\");\n      message.queryLatencyStats = $root.QueryLatencyStats.fromObject(object.queryLatencyStats);\n    }\n\n    if (object.perTypeStat) {\n      if (typeof object.perTypeStat !== \"object\") throw TypeError(\".ContextualizedStats.perTypeStat: object expected\");\n      message.perTypeStat = {};\n\n      for (var keys = Object.keys(object.perTypeStat), i = 0; i < keys.length; ++i) {\n        if (typeof object.perTypeStat[keys[i]] !== \"object\") throw TypeError(\".ContextualizedStats.perTypeStat: object expected\");\n        message.perTypeStat[keys[i]] = $root.TypeStat.fromObject(object.perTypeStat[keys[i]]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a ContextualizedStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof ContextualizedStats\n   * @static\n   * @param {ContextualizedStats} message ContextualizedStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  ContextualizedStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n    if (options.objects || options.defaults) object.perTypeStat = {};\n\n    if (options.defaults) {\n      object.context = null;\n      object.queryLatencyStats = null;\n    }\n\n    if (message.context != null && message.hasOwnProperty(\"context\")) object.context = $root.StatsContext.toObject(message.context, options);\n    if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n    var keys2;\n\n    if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n      object.perTypeStat = {};\n\n      for (var j = 0; j < keys2.length; ++j) object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this ContextualizedStats to JSON.\n   * @function toJSON\n   * @memberof ContextualizedStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  ContextualizedStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return ContextualizedStats;\n}();\n\n$root.TracesAndStats = function () {\n  /**\n   * Properties of a TracesAndStats.\n   * @exports ITracesAndStats\n   * @interface ITracesAndStats\n   * @property {Array.<ITrace>|null} [trace] TracesAndStats trace\n   * @property {Array.<IContextualizedStats>|null} [statsWithContext] TracesAndStats statsWithContext\n   */\n\n  /**\n   * Constructs a new TracesAndStats.\n   * @exports TracesAndStats\n   * @classdesc Represents a TracesAndStats.\n   * @implements ITracesAndStats\n   * @constructor\n   * @param {ITracesAndStats=} [properties] Properties to set\n   */\n  function TracesAndStats(properties) {\n    this.trace = [];\n    this.statsWithContext = [];\n    if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n  }\n  /**\n   * TracesAndStats trace.\n   * @member {Array.<ITrace>} trace\n   * @memberof TracesAndStats\n   * @instance\n   */\n\n\n  TracesAndStats.prototype.trace = $util.emptyArray;\n  /**\n   * TracesAndStats statsWithContext.\n   * @member {Array.<IContextualizedStats>} statsWithContext\n   * @memberof TracesAndStats\n   * @instance\n   */\n\n  TracesAndStats.prototype.statsWithContext = $util.emptyArray;\n  /**\n   * Creates a new TracesAndStats instance using the specified properties.\n   * @function create\n   * @memberof TracesAndStats\n   * @static\n   * @param {ITracesAndStats=} [properties] Properties to set\n   * @returns {TracesAndStats} TracesAndStats instance\n   */\n\n  TracesAndStats.create = function create(properties) {\n    return new TracesAndStats(properties);\n  };\n  /**\n   * Encodes the specified TracesAndStats message. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n   * @function encode\n   * @memberof TracesAndStats\n   * @static\n   * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TracesAndStats.encode = function encode(message, writer) {\n    if (!writer) writer = $Writer.create();\n    if (message.trace != null && message.trace.length) for (var i = 0; i < message.trace.length; ++i) $root.Trace.encode(message.trace[i], writer.uint32(\n    /* id 1, wireType 2 =*/\n    10).fork()).ldelim();\n    if (message.statsWithContext != null && message.statsWithContext.length) for (var i = 0; i < message.statsWithContext.length; ++i) $root.ContextualizedStats.encode(message.statsWithContext[i], writer.uint32(\n    /* id 2, wireType 2 =*/\n    18).fork()).ldelim();\n    return writer;\n  };\n  /**\n   * Encodes the specified TracesAndStats message, length delimited. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n   * @function encodeDelimited\n   * @memberof TracesAndStats\n   * @static\n   * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n   * @param {$protobuf.Writer} [writer] Writer to encode to\n   * @returns {$protobuf.Writer} Writer\n   */\n\n\n  TracesAndStats.encodeDelimited = function encodeDelimited(message, writer) {\n    return this.encode(message, writer).ldelim();\n  };\n  /**\n   * Decodes a TracesAndStats message from the specified reader or buffer.\n   * @function decode\n   * @memberof TracesAndStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @param {number} [length] Message length if known beforehand\n   * @returns {TracesAndStats} TracesAndStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TracesAndStats.decode = function decode(reader, length) {\n    if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n    var end = length === undefined ? reader.len : reader.pos + length,\n        message = new $root.TracesAndStats();\n\n    while (reader.pos < end) {\n      var tag = reader.uint32();\n\n      switch (tag >>> 3) {\n        case 1:\n          if (!(message.trace && message.trace.length)) message.trace = [];\n          message.trace.push($root.Trace.decode(reader, reader.uint32()));\n          break;\n\n        case 2:\n          if (!(message.statsWithContext && message.statsWithContext.length)) message.statsWithContext = [];\n          message.statsWithContext.push($root.ContextualizedStats.decode(reader, reader.uint32()));\n          break;\n\n        default:\n          reader.skipType(tag & 7);\n          break;\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Decodes a TracesAndStats message from the specified reader or buffer, length delimited.\n   * @function decodeDelimited\n   * @memberof TracesAndStats\n   * @static\n   * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n   * @returns {TracesAndStats} TracesAndStats\n   * @throws {Error} If the payload is not a reader or valid buffer\n   * @throws {$protobuf.util.ProtocolError} If required fields are missing\n   */\n\n\n  TracesAndStats.decodeDelimited = function decodeDelimited(reader) {\n    if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n    return this.decode(reader, reader.uint32());\n  };\n  /**\n   * Verifies a TracesAndStats message.\n   * @function verify\n   * @memberof TracesAndStats\n   * @static\n   * @param {Object.<string,*>} message Plain object to verify\n   * @returns {string|null} `null` if valid, otherwise the reason why it is not\n   */\n\n\n  TracesAndStats.verify = function verify(message) {\n    if (typeof message !== \"object\" || message === null) return \"object expected\";\n\n    if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n      if (!Array.isArray(message.trace)) return \"trace: array expected\";\n\n      for (var i = 0; i < message.trace.length; ++i) {\n        var error = $root.Trace.verify(message.trace[i]);\n        if (error) return \"trace.\" + error;\n      }\n    }\n\n    if (message.statsWithContext != null && message.hasOwnProperty(\"statsWithContext\")) {\n      if (!Array.isArray(message.statsWithContext)) return \"statsWithContext: array expected\";\n\n      for (var i = 0; i < message.statsWithContext.length; ++i) {\n        var error = $root.ContextualizedStats.verify(message.statsWithContext[i]);\n        if (error) return \"statsWithContext.\" + error;\n      }\n    }\n\n    return null;\n  };\n  /**\n   * Creates a TracesAndStats message from a plain object. Also converts values to their respective internal types.\n   * @function fromObject\n   * @memberof TracesAndStats\n   * @static\n   * @param {Object.<string,*>} object Plain object\n   * @returns {TracesAndStats} TracesAndStats\n   */\n\n\n  TracesAndStats.fromObject = function fromObject(object) {\n    if (object instanceof $root.TracesAndStats) return object;\n    var message = new $root.TracesAndStats();\n\n    if (object.trace) {\n      if (!Array.isArray(object.trace)) throw TypeError(\".TracesAndStats.trace: array expected\");\n      message.trace = [];\n\n      for (var i = 0; i < object.trace.length; ++i) {\n        if (typeof object.trace[i] !== \"object\") throw TypeError(\".TracesAndStats.trace: object expected\");\n        message.trace[i] = $root.Trace.fromObject(object.trace[i]);\n      }\n    }\n\n    if (object.statsWithContext) {\n      if (!Array.isArray(object.statsWithContext)) throw TypeError(\".TracesAndStats.statsWithContext: array expected\");\n      message.statsWithContext = [];\n\n      for (var i = 0; i < object.statsWithContext.length; ++i) {\n        if (typeof object.statsWithContext[i] !== \"object\") throw TypeError(\".TracesAndStats.statsWithContext: object expected\");\n        message.statsWithContext[i] = $root.ContextualizedStats.fromObject(object.statsWithContext[i]);\n      }\n    }\n\n    return message;\n  };\n  /**\n   * Creates a plain object from a TracesAndStats message. Also converts values to other types if specified.\n   * @function toObject\n   * @memberof TracesAndStats\n   * @static\n   * @param {TracesAndStats} message TracesAndStats\n   * @param {$protobuf.IConversionOptions} [options] Conversion options\n   * @returns {Object.<string,*>} Plain object\n   */\n\n\n  TracesAndStats.toObject = function toObject(message, options) {\n    if (!options) options = {};\n    var object = {};\n\n    if (options.arrays || options.defaults) {\n      object.trace = [];\n      object.statsWithContext = [];\n    }\n\n    if (message.trace && message.trace.length) {\n      object.trace = [];\n\n      for (var j = 0; j < message.trace.length; ++j) object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n    }\n\n    if (message.statsWithContext && message.statsWithContext.length) {\n      object.statsWithContext = [];\n\n      for (var j = 0; j < message.statsWithContext.length; ++j) object.statsWithContext[j] = $root.ContextualizedStats.toObject(message.statsWithContext[j], options);\n    }\n\n    return object;\n  };\n  /**\n   * Converts this TracesAndStats to JSON.\n   * @function toJSON\n   * @memberof TracesAndStats\n   * @instance\n   * @returns {Object.<string,*>} JSON object\n   */\n\n\n  TracesAndStats.prototype.toJSON = function toJSON() {\n    return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n  };\n\n  return TracesAndStats;\n}();\n\n$root.google = function () {\n  /**\n   * Namespace google.\n   * @exports google\n   * @namespace\n   */\n  var google = {};\n\n  google.protobuf = function () {\n    /**\n     * Namespace protobuf.\n     * @memberof google\n     * @namespace\n     */\n    var protobuf = {};\n\n    protobuf.Timestamp = function () {\n      /**\n       * Properties of a Timestamp.\n       * @memberof google.protobuf\n       * @interface ITimestamp\n       * @property {number|null} [seconds] Timestamp seconds\n       * @property {number|null} [nanos] Timestamp nanos\n       */\n\n      /**\n       * Constructs a new Timestamp.\n       * @memberof google.protobuf\n       * @classdesc Represents a Timestamp.\n       * @implements ITimestamp\n       * @constructor\n       * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n       */\n      function Timestamp(properties) {\n        if (properties) for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i) if (properties[keys[i]] != null) this[keys[i]] = properties[keys[i]];\n      }\n      /**\n       * Timestamp seconds.\n       * @member {number} seconds\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       */\n\n\n      Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0, 0, false) : 0;\n      /**\n       * Timestamp nanos.\n       * @member {number} nanos\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       */\n\n      Timestamp.prototype.nanos = 0;\n      /**\n       * Creates a new Timestamp instance using the specified properties.\n       * @function create\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n       * @returns {google.protobuf.Timestamp} Timestamp instance\n       */\n\n      Timestamp.create = function create(properties) {\n        return new Timestamp(properties);\n      };\n      /**\n       * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n       * @function encode\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Timestamp.encode = function encode(message, writer) {\n        if (!writer) writer = $Writer.create();\n        if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\")) writer.uint32(\n        /* id 1, wireType 0 =*/\n        8).int64(message.seconds);\n        if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\")) writer.uint32(\n        /* id 2, wireType 0 =*/\n        16).int32(message.nanos);\n        return writer;\n      };\n      /**\n       * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n       * @function encodeDelimited\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n       * @param {$protobuf.Writer} [writer] Writer to encode to\n       * @returns {$protobuf.Writer} Writer\n       */\n\n\n      Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n      };\n      /**\n       * Decodes a Timestamp message from the specified reader or buffer.\n       * @function decode\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @param {number} [length] Message length if known beforehand\n       * @returns {google.protobuf.Timestamp} Timestamp\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Timestamp.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader)) reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length,\n            message = new $root.google.protobuf.Timestamp();\n\n        while (reader.pos < end) {\n          var tag = reader.uint32();\n\n          switch (tag >>> 3) {\n            case 1:\n              message.seconds = reader.int64();\n              break;\n\n            case 2:\n              message.nanos = reader.int32();\n              break;\n\n            default:\n              reader.skipType(tag & 7);\n              break;\n          }\n        }\n\n        return message;\n      };\n      /**\n       * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n       * @function decodeDelimited\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n       * @returns {google.protobuf.Timestamp} Timestamp\n       * @throws {Error} If the payload is not a reader or valid buffer\n       * @throws {$protobuf.util.ProtocolError} If required fields are missing\n       */\n\n\n      Timestamp.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader)) reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n      };\n      /**\n       * Verifies a Timestamp message.\n       * @function verify\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {Object.<string,*>} message Plain object to verify\n       * @returns {string|null} `null` if valid, otherwise the reason why it is not\n       */\n\n\n      Timestamp.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null) return \"object expected\";\n        if (message.seconds != null && message.hasOwnProperty(\"seconds\")) if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high))) return \"seconds: integer|Long expected\";\n        if (message.nanos != null && message.hasOwnProperty(\"nanos\")) if (!$util.isInteger(message.nanos)) return \"nanos: integer expected\";\n        return null;\n      };\n      /**\n       * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n       * @function fromObject\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {Object.<string,*>} object Plain object\n       * @returns {google.protobuf.Timestamp} Timestamp\n       */\n\n\n      Timestamp.fromObject = function fromObject(object) {\n        if (object instanceof $root.google.protobuf.Timestamp) return object;\n        var message = new $root.google.protobuf.Timestamp();\n        if (object.seconds != null) if ($util.Long) (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;else if (typeof object.seconds === \"string\") message.seconds = parseInt(object.seconds, 10);else if (typeof object.seconds === \"number\") message.seconds = object.seconds;else if (typeof object.seconds === \"object\") message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n        if (object.nanos != null) message.nanos = object.nanos | 0;\n        return message;\n      };\n      /**\n       * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n       * @function toObject\n       * @memberof google.protobuf.Timestamp\n       * @static\n       * @param {google.protobuf.Timestamp} message Timestamp\n       * @param {$protobuf.IConversionOptions} [options] Conversion options\n       * @returns {Object.<string,*>} Plain object\n       */\n\n\n      Timestamp.toObject = function toObject(message, options) {\n        if (!options) options = {};\n        var object = {};\n\n        if (options.defaults) {\n          if ($util.Long) {\n            var long = new $util.Long(0, 0, false);\n            object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n          } else object.seconds = options.longs === String ? \"0\" : 0;\n\n          object.nanos = 0;\n        }\n\n        if (message.seconds != null && message.hasOwnProperty(\"seconds\")) if (typeof message.seconds === \"number\") object.seconds = options.longs === String ? String(message.seconds) : message.seconds;else object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n        if (message.nanos != null && message.hasOwnProperty(\"nanos\")) object.nanos = message.nanos;\n        return object;\n      };\n      /**\n       * Converts this Timestamp to JSON.\n       * @function toJSON\n       * @memberof google.protobuf.Timestamp\n       * @instance\n       * @returns {Object.<string,*>} JSON object\n       */\n\n\n      Timestamp.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n      };\n\n      return Timestamp;\n    }();\n\n    return protobuf;\n  }();\n\n  return google;\n}();\n\nmodule.exports = $root;","map":{"version":3,"sources":["/Users/josephdeguzman/Documents/CSE/brainiac-app/node_modules/apollo-reporting-protobuf/dist/protobuf.js"],"names":["$protobuf","require","$Reader","Reader","$Writer","Writer","$util","util","$root","roots","Trace","properties","keys","Object","i","length","prototype","startTime","endTime","durationNs","Long","fromBits","root","signature","unexecutedOperationBody","unexecutedOperationName","details","clientName","clientVersion","clientAddress","clientReferenceId","http","cachePolicy","queryPlan","fullQueryCacheHit","persistedQueryHit","persistedQueryRegister","registeredOperation","forbiddenOperation","legacySignatureNeedsResigning","create","encode","message","writer","hasOwnProperty","call","google","protobuf","Timestamp","uint32","fork","ldelim","string","Details","HTTP","uint64","Node","CachePolicy","bool","QueryPlanNode","encodeDelimited","decode","reader","end","undefined","len","pos","tag","skipType","decodeDelimited","verify","error","isInteger","low","high","isString","fromObject","object","TypeError","fromValue","unsigned","parseInt","LongBits","toNumber","String","Boolean","toObject","options","defaults","long","longs","toString","Number","toJSON","constructor","toJSONOptions","scope","maxAgeNs","int32","int64","enums","Scope","valuesById","values","variablesJson","deprecatedVariables","emptyObject","operationName","bytes","key","skip","isObject","base64","newBuffer","objects","keys2","j","Array","slice","Error","location","emptyArray","timeNs","json","Location","push","isArray","arrays","requestHeaders","responseHeaders","method","host","path","statusCode","secure","protocol","Values","Method","value","line","column","child","responseName","index","originalFieldName","type","parentType","$oneOfFields","defineProperty","get","oneOfGetter","set","oneOfSetter","id","oneofs","sequence","parallel","fetch","flatten","SequenceNode","ParallelNode","FetchNode","FlattenNode","node","nodes","serviceName","traceParsingFailed","trace","sentTimeOffset","sentTime","receivedTime","responsePath","ResponsePathElement","fieldName","ReportHeader","hostname","agentVersion","serviceVersion","runtimeVersion","uname","schemaTag","executableSchemaId","PathErrorStats","children","errorsCount","requestsWithErrorsCount","QueryLatencyStats","latencyCount","cacheLatencyCount","publicCacheTtlCount","privateCacheTtlCount","requestCount","cacheHits","persistedQueryHits","persistedQueryMisses","rootErrorStats","registeredOperationCount","forbiddenOperationCount","end2","StatsContext","ContextualizedQueryLatencyStats","queryLatencyStats","context","ContextualizedTypeStats","perTypeStat","TypeStat","FieldStat","returnType","count","perFieldStat","Field","name","Type","field","Report","tracesPerQuery","header","TracesAndStats","ContextualizedStats","statsWithContext","seconds","nanos","module","exports"],"mappings":"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","sourcesContent":["/*eslint-disable block-scoped-var, id-length, no-control-regex, no-magic-numbers, no-prototype-builtins, no-redeclare, no-shadow, no-var, sort-vars*/\n\"use strict\";\n\nvar $protobuf = require(\"@apollo/protobufjs/minimal\");\n\n// Common aliases\nvar $Reader = $protobuf.Reader, $Writer = $protobuf.Writer, $util = $protobuf.util;\n\n// Exported root namespace\nvar $root = $protobuf.roots[\"default\"] || ($protobuf.roots[\"default\"] = {});\n\n$root.Trace = (function() {\n\n    /**\n     * Properties of a Trace.\n     * @exports ITrace\n     * @interface ITrace\n     * @property {google.protobuf.ITimestamp|null} [startTime] Trace startTime\n     * @property {google.protobuf.ITimestamp|null} [endTime] Trace endTime\n     * @property {number|null} [durationNs] Trace durationNs\n     * @property {Trace.INode|null} [root] Trace root\n     * @property {string|null} [signature] Trace signature\n     * @property {string|null} [unexecutedOperationBody] Trace unexecutedOperationBody\n     * @property {string|null} [unexecutedOperationName] Trace unexecutedOperationName\n     * @property {Trace.IDetails|null} [details] Trace details\n     * @property {string|null} [clientName] Trace clientName\n     * @property {string|null} [clientVersion] Trace clientVersion\n     * @property {string|null} [clientAddress] Trace clientAddress\n     * @property {string|null} [clientReferenceId] Trace clientReferenceId\n     * @property {Trace.IHTTP|null} [http] Trace http\n     * @property {Trace.ICachePolicy|null} [cachePolicy] Trace cachePolicy\n     * @property {Trace.IQueryPlanNode|null} [queryPlan] Trace queryPlan\n     * @property {boolean|null} [fullQueryCacheHit] Trace fullQueryCacheHit\n     * @property {boolean|null} [persistedQueryHit] Trace persistedQueryHit\n     * @property {boolean|null} [persistedQueryRegister] Trace persistedQueryRegister\n     * @property {boolean|null} [registeredOperation] Trace registeredOperation\n     * @property {boolean|null} [forbiddenOperation] Trace forbiddenOperation\n     * @property {string|null} [legacySignatureNeedsResigning] Trace legacySignatureNeedsResigning\n     */\n\n    /**\n     * Constructs a new Trace.\n     * @exports Trace\n     * @classdesc Represents a Trace.\n     * @implements ITrace\n     * @constructor\n     * @param {ITrace=} [properties] Properties to set\n     */\n    function Trace(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Trace startTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} startTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.startTime = null;\n\n    /**\n     * Trace endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.endTime = null;\n\n    /**\n     * Trace durationNs.\n     * @member {number} durationNs\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.durationNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Trace root.\n     * @member {Trace.INode|null|undefined} root\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.root = null;\n\n    /**\n     * Trace signature.\n     * @member {string} signature\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.signature = \"\";\n\n    /**\n     * Trace unexecutedOperationBody.\n     * @member {string} unexecutedOperationBody\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationBody = \"\";\n\n    /**\n     * Trace unexecutedOperationName.\n     * @member {string} unexecutedOperationName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.unexecutedOperationName = \"\";\n\n    /**\n     * Trace details.\n     * @member {Trace.IDetails|null|undefined} details\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.details = null;\n\n    /**\n     * Trace clientName.\n     * @member {string} clientName\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientName = \"\";\n\n    /**\n     * Trace clientVersion.\n     * @member {string} clientVersion\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientVersion = \"\";\n\n    /**\n     * Trace clientAddress.\n     * @member {string} clientAddress\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientAddress = \"\";\n\n    /**\n     * Trace clientReferenceId.\n     * @member {string} clientReferenceId\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.clientReferenceId = \"\";\n\n    /**\n     * Trace http.\n     * @member {Trace.IHTTP|null|undefined} http\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.http = null;\n\n    /**\n     * Trace cachePolicy.\n     * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.cachePolicy = null;\n\n    /**\n     * Trace queryPlan.\n     * @member {Trace.IQueryPlanNode|null|undefined} queryPlan\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.queryPlan = null;\n\n    /**\n     * Trace fullQueryCacheHit.\n     * @member {boolean} fullQueryCacheHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.fullQueryCacheHit = false;\n\n    /**\n     * Trace persistedQueryHit.\n     * @member {boolean} persistedQueryHit\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryHit = false;\n\n    /**\n     * Trace persistedQueryRegister.\n     * @member {boolean} persistedQueryRegister\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.persistedQueryRegister = false;\n\n    /**\n     * Trace registeredOperation.\n     * @member {boolean} registeredOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.registeredOperation = false;\n\n    /**\n     * Trace forbiddenOperation.\n     * @member {boolean} forbiddenOperation\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.forbiddenOperation = false;\n\n    /**\n     * Trace legacySignatureNeedsResigning.\n     * @member {string} legacySignatureNeedsResigning\n     * @memberof Trace\n     * @instance\n     */\n    Trace.prototype.legacySignatureNeedsResigning = \"\";\n\n    /**\n     * Creates a new Trace instance using the specified properties.\n     * @function create\n     * @memberof Trace\n     * @static\n     * @param {ITrace=} [properties] Properties to set\n     * @returns {Trace} Trace instance\n     */\n    Trace.create = function create(properties) {\n        return new Trace(properties);\n    };\n\n    /**\n     * Encodes the specified Trace message. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encode\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n        if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n            $root.google.protobuf.Timestamp.encode(message.startTime, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n        if (message.legacySignatureNeedsResigning != null && Object.hasOwnProperty.call(message, \"legacySignatureNeedsResigning\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.legacySignatureNeedsResigning);\n        if (message.details != null && Object.hasOwnProperty.call(message, \"details\"))\n            $root.Trace.Details.encode(message.details, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.clientVersion);\n        if (message.clientAddress != null && Object.hasOwnProperty.call(message, \"clientAddress\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.clientAddress);\n        if (message.http != null && Object.hasOwnProperty.call(message, \"http\"))\n            $root.Trace.HTTP.encode(message.http, writer.uint32(/* id 10, wireType 2 =*/82).fork()).ldelim();\n        if (message.durationNs != null && Object.hasOwnProperty.call(message, \"durationNs\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.durationNs);\n        if (message.root != null && Object.hasOwnProperty.call(message, \"root\"))\n            $root.Trace.Node.encode(message.root, writer.uint32(/* id 14, wireType 2 =*/114).fork()).ldelim();\n        if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n            $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 18, wireType 2 =*/146).fork()).ldelim();\n        if (message.signature != null && Object.hasOwnProperty.call(message, \"signature\"))\n            writer.uint32(/* id 19, wireType 2 =*/154).string(message.signature);\n        if (message.fullQueryCacheHit != null && Object.hasOwnProperty.call(message, \"fullQueryCacheHit\"))\n            writer.uint32(/* id 20, wireType 0 =*/160).bool(message.fullQueryCacheHit);\n        if (message.persistedQueryHit != null && Object.hasOwnProperty.call(message, \"persistedQueryHit\"))\n            writer.uint32(/* id 21, wireType 0 =*/168).bool(message.persistedQueryHit);\n        if (message.persistedQueryRegister != null && Object.hasOwnProperty.call(message, \"persistedQueryRegister\"))\n            writer.uint32(/* id 22, wireType 0 =*/176).bool(message.persistedQueryRegister);\n        if (message.clientReferenceId != null && Object.hasOwnProperty.call(message, \"clientReferenceId\"))\n            writer.uint32(/* id 23, wireType 2 =*/186).string(message.clientReferenceId);\n        if (message.registeredOperation != null && Object.hasOwnProperty.call(message, \"registeredOperation\"))\n            writer.uint32(/* id 24, wireType 0 =*/192).bool(message.registeredOperation);\n        if (message.forbiddenOperation != null && Object.hasOwnProperty.call(message, \"forbiddenOperation\"))\n            writer.uint32(/* id 25, wireType 0 =*/200).bool(message.forbiddenOperation);\n        if (message.queryPlan != null && Object.hasOwnProperty.call(message, \"queryPlan\"))\n            $root.Trace.QueryPlanNode.encode(message.queryPlan, writer.uint32(/* id 26, wireType 2 =*/210).fork()).ldelim();\n        if (message.unexecutedOperationBody != null && Object.hasOwnProperty.call(message, \"unexecutedOperationBody\"))\n            writer.uint32(/* id 27, wireType 2 =*/218).string(message.unexecutedOperationBody);\n        if (message.unexecutedOperationName != null && Object.hasOwnProperty.call(message, \"unexecutedOperationName\"))\n            writer.uint32(/* id 28, wireType 2 =*/226).string(message.unexecutedOperationName);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Trace message, length delimited. Does not implicitly {@link Trace.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {ITrace} message Trace message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Trace.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer.\n     * @function decode\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 4:\n                message.startTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 3:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            case 11:\n                message.durationNs = reader.uint64();\n                break;\n            case 14:\n                message.root = $root.Trace.Node.decode(reader, reader.uint32());\n                break;\n            case 19:\n                message.signature = reader.string();\n                break;\n            case 27:\n                message.unexecutedOperationBody = reader.string();\n                break;\n            case 28:\n                message.unexecutedOperationName = reader.string();\n                break;\n            case 6:\n                message.details = $root.Trace.Details.decode(reader, reader.uint32());\n                break;\n            case 7:\n                message.clientName = reader.string();\n                break;\n            case 8:\n                message.clientVersion = reader.string();\n                break;\n            case 9:\n                message.clientAddress = reader.string();\n                break;\n            case 23:\n                message.clientReferenceId = reader.string();\n                break;\n            case 10:\n                message.http = $root.Trace.HTTP.decode(reader, reader.uint32());\n                break;\n            case 18:\n                message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                break;\n            case 26:\n                message.queryPlan = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                break;\n            case 20:\n                message.fullQueryCacheHit = reader.bool();\n                break;\n            case 21:\n                message.persistedQueryHit = reader.bool();\n                break;\n            case 22:\n                message.persistedQueryRegister = reader.bool();\n                break;\n            case 24:\n                message.registeredOperation = reader.bool();\n                break;\n            case 25:\n                message.forbiddenOperation = reader.bool();\n                break;\n            case 5:\n                message.legacySignatureNeedsResigning = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Trace message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Trace\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Trace} Trace\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Trace.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Trace message.\n     * @function verify\n     * @memberof Trace\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Trace.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.startTime);\n            if (error)\n                return \"startTime.\" + error;\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (!$util.isInteger(message.durationNs) && !(message.durationNs && $util.isInteger(message.durationNs.low) && $util.isInteger(message.durationNs.high)))\n                return \"durationNs: integer|Long expected\";\n        if (message.root != null && message.hasOwnProperty(\"root\")) {\n            var error = $root.Trace.Node.verify(message.root);\n            if (error)\n                return \"root.\" + error;\n        }\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            if (!$util.isString(message.signature))\n                return \"signature: string expected\";\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            if (!$util.isString(message.unexecutedOperationBody))\n                return \"unexecutedOperationBody: string expected\";\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            if (!$util.isString(message.unexecutedOperationName))\n                return \"unexecutedOperationName: string expected\";\n        if (message.details != null && message.hasOwnProperty(\"details\")) {\n            var error = $root.Trace.Details.verify(message.details);\n            if (error)\n                return \"details.\" + error;\n        }\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        if (message.clientAddress != null && message.hasOwnProperty(\"clientAddress\"))\n            if (!$util.isString(message.clientAddress))\n                return \"clientAddress: string expected\";\n        if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\"))\n            if (!$util.isString(message.clientReferenceId))\n                return \"clientReferenceId: string expected\";\n        if (message.http != null && message.hasOwnProperty(\"http\")) {\n            var error = $root.Trace.HTTP.verify(message.http);\n            if (error)\n                return \"http.\" + error;\n        }\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n            var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n            if (error)\n                return \"cachePolicy.\" + error;\n        }\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\")) {\n            var error = $root.Trace.QueryPlanNode.verify(message.queryPlan);\n            if (error)\n                return \"queryPlan.\" + error;\n        }\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            if (typeof message.fullQueryCacheHit !== \"boolean\")\n                return \"fullQueryCacheHit: boolean expected\";\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            if (typeof message.persistedQueryHit !== \"boolean\")\n                return \"persistedQueryHit: boolean expected\";\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            if (typeof message.persistedQueryRegister !== \"boolean\")\n                return \"persistedQueryRegister: boolean expected\";\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            if (typeof message.registeredOperation !== \"boolean\")\n                return \"registeredOperation: boolean expected\";\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            if (typeof message.forbiddenOperation !== \"boolean\")\n                return \"forbiddenOperation: boolean expected\";\n        if (message.legacySignatureNeedsResigning != null && message.hasOwnProperty(\"legacySignatureNeedsResigning\"))\n            if (!$util.isString(message.legacySignatureNeedsResigning))\n                return \"legacySignatureNeedsResigning: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Trace message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Trace\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Trace} Trace\n     */\n    Trace.fromObject = function fromObject(object) {\n        if (object instanceof $root.Trace)\n            return object;\n        var message = new $root.Trace();\n        if (object.startTime != null) {\n            if (typeof object.startTime !== \"object\")\n                throw TypeError(\".Trace.startTime: object expected\");\n            message.startTime = $root.google.protobuf.Timestamp.fromObject(object.startTime);\n        }\n        if (object.endTime != null) {\n            if (typeof object.endTime !== \"object\")\n                throw TypeError(\".Trace.endTime: object expected\");\n            message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);\n        }\n        if (object.durationNs != null)\n            if ($util.Long)\n                (message.durationNs = $util.Long.fromValue(object.durationNs)).unsigned = true;\n            else if (typeof object.durationNs === \"string\")\n                message.durationNs = parseInt(object.durationNs, 10);\n            else if (typeof object.durationNs === \"number\")\n                message.durationNs = object.durationNs;\n            else if (typeof object.durationNs === \"object\")\n                message.durationNs = new $util.LongBits(object.durationNs.low >>> 0, object.durationNs.high >>> 0).toNumber(true);\n        if (object.root != null) {\n            if (typeof object.root !== \"object\")\n                throw TypeError(\".Trace.root: object expected\");\n            message.root = $root.Trace.Node.fromObject(object.root);\n        }\n        if (object.signature != null)\n            message.signature = String(object.signature);\n        if (object.unexecutedOperationBody != null)\n            message.unexecutedOperationBody = String(object.unexecutedOperationBody);\n        if (object.unexecutedOperationName != null)\n            message.unexecutedOperationName = String(object.unexecutedOperationName);\n        if (object.details != null) {\n            if (typeof object.details !== \"object\")\n                throw TypeError(\".Trace.details: object expected\");\n            message.details = $root.Trace.Details.fromObject(object.details);\n        }\n        if (object.clientName != null)\n            message.clientName = String(object.clientName);\n        if (object.clientVersion != null)\n            message.clientVersion = String(object.clientVersion);\n        if (object.clientAddress != null)\n            message.clientAddress = String(object.clientAddress);\n        if (object.clientReferenceId != null)\n            message.clientReferenceId = String(object.clientReferenceId);\n        if (object.http != null) {\n            if (typeof object.http !== \"object\")\n                throw TypeError(\".Trace.http: object expected\");\n            message.http = $root.Trace.HTTP.fromObject(object.http);\n        }\n        if (object.cachePolicy != null) {\n            if (typeof object.cachePolicy !== \"object\")\n                throw TypeError(\".Trace.cachePolicy: object expected\");\n            message.cachePolicy = $root.Trace.CachePolicy.fromObject(object.cachePolicy);\n        }\n        if (object.queryPlan != null) {\n            if (typeof object.queryPlan !== \"object\")\n                throw TypeError(\".Trace.queryPlan: object expected\");\n            message.queryPlan = $root.Trace.QueryPlanNode.fromObject(object.queryPlan);\n        }\n        if (object.fullQueryCacheHit != null)\n            message.fullQueryCacheHit = Boolean(object.fullQueryCacheHit);\n        if (object.persistedQueryHit != null)\n            message.persistedQueryHit = Boolean(object.persistedQueryHit);\n        if (object.persistedQueryRegister != null)\n            message.persistedQueryRegister = Boolean(object.persistedQueryRegister);\n        if (object.registeredOperation != null)\n            message.registeredOperation = Boolean(object.registeredOperation);\n        if (object.forbiddenOperation != null)\n            message.forbiddenOperation = Boolean(object.forbiddenOperation);\n        if (object.legacySignatureNeedsResigning != null)\n            message.legacySignatureNeedsResigning = String(object.legacySignatureNeedsResigning);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Trace message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Trace\n     * @static\n     * @param {Trace} message Trace\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Trace.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.endTime = null;\n            object.startTime = null;\n            object.legacySignatureNeedsResigning = \"\";\n            object.details = null;\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n            object.clientAddress = \"\";\n            object.http = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.durationNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.durationNs = options.longs === String ? \"0\" : 0;\n            object.root = null;\n            object.cachePolicy = null;\n            object.signature = \"\";\n            object.fullQueryCacheHit = false;\n            object.persistedQueryHit = false;\n            object.persistedQueryRegister = false;\n            object.clientReferenceId = \"\";\n            object.registeredOperation = false;\n            object.forbiddenOperation = false;\n            object.queryPlan = null;\n            object.unexecutedOperationBody = \"\";\n            object.unexecutedOperationName = \"\";\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n            object.startTime = $root.google.protobuf.Timestamp.toObject(message.startTime, options);\n        if (message.legacySignatureNeedsResigning != null && message.hasOwnProperty(\"legacySignatureNeedsResigning\"))\n            object.legacySignatureNeedsResigning = message.legacySignatureNeedsResigning;\n        if (message.details != null && message.hasOwnProperty(\"details\"))\n            object.details = $root.Trace.Details.toObject(message.details, options);\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        if (message.clientAddress != null && message.hasOwnProperty(\"clientAddress\"))\n            object.clientAddress = message.clientAddress;\n        if (message.http != null && message.hasOwnProperty(\"http\"))\n            object.http = $root.Trace.HTTP.toObject(message.http, options);\n        if (message.durationNs != null && message.hasOwnProperty(\"durationNs\"))\n            if (typeof message.durationNs === \"number\")\n                object.durationNs = options.longs === String ? String(message.durationNs) : message.durationNs;\n            else\n                object.durationNs = options.longs === String ? $util.Long.prototype.toString.call(message.durationNs) : options.longs === Number ? new $util.LongBits(message.durationNs.low >>> 0, message.durationNs.high >>> 0).toNumber(true) : message.durationNs;\n        if (message.root != null && message.hasOwnProperty(\"root\"))\n            object.root = $root.Trace.Node.toObject(message.root, options);\n        if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n            object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n        if (message.signature != null && message.hasOwnProperty(\"signature\"))\n            object.signature = message.signature;\n        if (message.fullQueryCacheHit != null && message.hasOwnProperty(\"fullQueryCacheHit\"))\n            object.fullQueryCacheHit = message.fullQueryCacheHit;\n        if (message.persistedQueryHit != null && message.hasOwnProperty(\"persistedQueryHit\"))\n            object.persistedQueryHit = message.persistedQueryHit;\n        if (message.persistedQueryRegister != null && message.hasOwnProperty(\"persistedQueryRegister\"))\n            object.persistedQueryRegister = message.persistedQueryRegister;\n        if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\"))\n            object.clientReferenceId = message.clientReferenceId;\n        if (message.registeredOperation != null && message.hasOwnProperty(\"registeredOperation\"))\n            object.registeredOperation = message.registeredOperation;\n        if (message.forbiddenOperation != null && message.hasOwnProperty(\"forbiddenOperation\"))\n            object.forbiddenOperation = message.forbiddenOperation;\n        if (message.queryPlan != null && message.hasOwnProperty(\"queryPlan\"))\n            object.queryPlan = $root.Trace.QueryPlanNode.toObject(message.queryPlan, options);\n        if (message.unexecutedOperationBody != null && message.hasOwnProperty(\"unexecutedOperationBody\"))\n            object.unexecutedOperationBody = message.unexecutedOperationBody;\n        if (message.unexecutedOperationName != null && message.hasOwnProperty(\"unexecutedOperationName\"))\n            object.unexecutedOperationName = message.unexecutedOperationName;\n        return object;\n    };\n\n    /**\n     * Converts this Trace to JSON.\n     * @function toJSON\n     * @memberof Trace\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Trace.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    Trace.CachePolicy = (function() {\n\n        /**\n         * Properties of a CachePolicy.\n         * @memberof Trace\n         * @interface ICachePolicy\n         * @property {Trace.CachePolicy.Scope|null} [scope] CachePolicy scope\n         * @property {number|null} [maxAgeNs] CachePolicy maxAgeNs\n         */\n\n        /**\n         * Constructs a new CachePolicy.\n         * @memberof Trace\n         * @classdesc Represents a CachePolicy.\n         * @implements ICachePolicy\n         * @constructor\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         */\n        function CachePolicy(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * CachePolicy scope.\n         * @member {Trace.CachePolicy.Scope} scope\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.scope = 0;\n\n        /**\n         * CachePolicy maxAgeNs.\n         * @member {number} maxAgeNs\n         * @memberof Trace.CachePolicy\n         * @instance\n         */\n        CachePolicy.prototype.maxAgeNs = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n        /**\n         * Creates a new CachePolicy instance using the specified properties.\n         * @function create\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy=} [properties] Properties to set\n         * @returns {Trace.CachePolicy} CachePolicy instance\n         */\n        CachePolicy.create = function create(properties) {\n            return new CachePolicy(properties);\n        };\n\n        /**\n         * Encodes the specified CachePolicy message. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.scope != null && Object.hasOwnProperty.call(message, \"scope\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.scope);\n            if (message.maxAgeNs != null && Object.hasOwnProperty.call(message, \"maxAgeNs\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).int64(message.maxAgeNs);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified CachePolicy message, length delimited. Does not implicitly {@link Trace.CachePolicy.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.ICachePolicy} message CachePolicy message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        CachePolicy.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.CachePolicy();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.scope = reader.int32();\n                    break;\n                case 2:\n                    message.maxAgeNs = reader.int64();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a CachePolicy message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.CachePolicy} CachePolicy\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        CachePolicy.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a CachePolicy message.\n         * @function verify\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        CachePolicy.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                switch (message.scope) {\n                default:\n                    return \"scope: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                    break;\n                }\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (!$util.isInteger(message.maxAgeNs) && !(message.maxAgeNs && $util.isInteger(message.maxAgeNs.low) && $util.isInteger(message.maxAgeNs.high)))\n                    return \"maxAgeNs: integer|Long expected\";\n            return null;\n        };\n\n        /**\n         * Creates a CachePolicy message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.CachePolicy} CachePolicy\n         */\n        CachePolicy.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.CachePolicy)\n                return object;\n            var message = new $root.Trace.CachePolicy();\n            switch (object.scope) {\n            case \"UNKNOWN\":\n            case 0:\n                message.scope = 0;\n                break;\n            case \"PUBLIC\":\n            case 1:\n                message.scope = 1;\n                break;\n            case \"PRIVATE\":\n            case 2:\n                message.scope = 2;\n                break;\n            }\n            if (object.maxAgeNs != null)\n                if ($util.Long)\n                    (message.maxAgeNs = $util.Long.fromValue(object.maxAgeNs)).unsigned = false;\n                else if (typeof object.maxAgeNs === \"string\")\n                    message.maxAgeNs = parseInt(object.maxAgeNs, 10);\n                else if (typeof object.maxAgeNs === \"number\")\n                    message.maxAgeNs = object.maxAgeNs;\n                else if (typeof object.maxAgeNs === \"object\")\n                    message.maxAgeNs = new $util.LongBits(object.maxAgeNs.low >>> 0, object.maxAgeNs.high >>> 0).toNumber();\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a CachePolicy message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.CachePolicy\n         * @static\n         * @param {Trace.CachePolicy} message CachePolicy\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        CachePolicy.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.scope = options.enums === String ? \"UNKNOWN\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, false);\n                    object.maxAgeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.maxAgeNs = options.longs === String ? \"0\" : 0;\n            }\n            if (message.scope != null && message.hasOwnProperty(\"scope\"))\n                object.scope = options.enums === String ? $root.Trace.CachePolicy.Scope[message.scope] : message.scope;\n            if (message.maxAgeNs != null && message.hasOwnProperty(\"maxAgeNs\"))\n                if (typeof message.maxAgeNs === \"number\")\n                    object.maxAgeNs = options.longs === String ? String(message.maxAgeNs) : message.maxAgeNs;\n                else\n                    object.maxAgeNs = options.longs === String ? $util.Long.prototype.toString.call(message.maxAgeNs) : options.longs === Number ? new $util.LongBits(message.maxAgeNs.low >>> 0, message.maxAgeNs.high >>> 0).toNumber() : message.maxAgeNs;\n            return object;\n        };\n\n        /**\n         * Converts this CachePolicy to JSON.\n         * @function toJSON\n         * @memberof Trace.CachePolicy\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        CachePolicy.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        /**\n         * Scope enum.\n         * @name Trace.CachePolicy.Scope\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} PUBLIC=1 PUBLIC value\n         * @property {number} PRIVATE=2 PRIVATE value\n         */\n        CachePolicy.Scope = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"PUBLIC\"] = 1;\n            values[valuesById[2] = \"PRIVATE\"] = 2;\n            return values;\n        })();\n\n        return CachePolicy;\n    })();\n\n    Trace.Details = (function() {\n\n        /**\n         * Properties of a Details.\n         * @memberof Trace\n         * @interface IDetails\n         * @property {Object.<string,string>|null} [variablesJson] Details variablesJson\n         * @property {Object.<string,Uint8Array>|null} [deprecatedVariables] Details deprecatedVariables\n         * @property {string|null} [operationName] Details operationName\n         */\n\n        /**\n         * Constructs a new Details.\n         * @memberof Trace\n         * @classdesc Represents a Details.\n         * @implements IDetails\n         * @constructor\n         * @param {Trace.IDetails=} [properties] Properties to set\n         */\n        function Details(properties) {\n            this.variablesJson = {};\n            this.deprecatedVariables = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Details variablesJson.\n         * @member {Object.<string,string>} variablesJson\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.variablesJson = $util.emptyObject;\n\n        /**\n         * Details deprecatedVariables.\n         * @member {Object.<string,Uint8Array>} deprecatedVariables\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.deprecatedVariables = $util.emptyObject;\n\n        /**\n         * Details operationName.\n         * @member {string} operationName\n         * @memberof Trace.Details\n         * @instance\n         */\n        Details.prototype.operationName = \"\";\n\n        /**\n         * Creates a new Details instance using the specified properties.\n         * @function create\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails=} [properties] Properties to set\n         * @returns {Trace.Details} Details instance\n         */\n        Details.create = function create(properties) {\n            return new Details(properties);\n        };\n\n        /**\n         * Encodes the specified Details message. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.deprecatedVariables != null && Object.hasOwnProperty.call(message, \"deprecatedVariables\"))\n                for (var keys = Object.keys(message.deprecatedVariables), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).bytes(message.deprecatedVariables[keys[i]]).ldelim();\n            if (message.operationName != null && Object.hasOwnProperty.call(message, \"operationName\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.operationName);\n            if (message.variablesJson != null && Object.hasOwnProperty.call(message, \"variablesJson\"))\n                for (var keys = Object.keys(message.variablesJson), i = 0; i < keys.length; ++i)\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]).uint32(/* id 2, wireType 2 =*/18).string(message.variablesJson[keys[i]]).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Details message, length delimited. Does not implicitly {@link Trace.Details.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.IDetails} message Details message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Details.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Details(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 4:\n                    reader.skip().pos++;\n                    if (message.variablesJson === $util.emptyObject)\n                        message.variablesJson = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.variablesJson[key] = reader.string();\n                    break;\n                case 1:\n                    reader.skip().pos++;\n                    if (message.deprecatedVariables === $util.emptyObject)\n                        message.deprecatedVariables = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.deprecatedVariables[key] = reader.bytes();\n                    break;\n                case 3:\n                    message.operationName = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Details message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Details\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Details} Details\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Details.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Details message.\n         * @function verify\n         * @memberof Trace.Details\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Details.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.variablesJson != null && message.hasOwnProperty(\"variablesJson\")) {\n                if (!$util.isObject(message.variablesJson))\n                    return \"variablesJson: object expected\";\n                var key = Object.keys(message.variablesJson);\n                for (var i = 0; i < key.length; ++i)\n                    if (!$util.isString(message.variablesJson[key[i]]))\n                        return \"variablesJson: string{k:string} expected\";\n            }\n            if (message.deprecatedVariables != null && message.hasOwnProperty(\"deprecatedVariables\")) {\n                if (!$util.isObject(message.deprecatedVariables))\n                    return \"deprecatedVariables: object expected\";\n                var key = Object.keys(message.deprecatedVariables);\n                for (var i = 0; i < key.length; ++i)\n                    if (!(message.deprecatedVariables[key[i]] && typeof message.deprecatedVariables[key[i]].length === \"number\" || $util.isString(message.deprecatedVariables[key[i]])))\n                        return \"deprecatedVariables: buffer{k:string} expected\";\n            }\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                if (!$util.isString(message.operationName))\n                    return \"operationName: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Details message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.Details\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.Details} Details\n         */\n        Details.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.Details)\n                return object;\n            var message = new $root.Trace.Details();\n            if (object.variablesJson) {\n                if (typeof object.variablesJson !== \"object\")\n                    throw TypeError(\".Trace.Details.variablesJson: object expected\");\n                message.variablesJson = {};\n                for (var keys = Object.keys(object.variablesJson), i = 0; i < keys.length; ++i)\n                    message.variablesJson[keys[i]] = String(object.variablesJson[keys[i]]);\n            }\n            if (object.deprecatedVariables) {\n                if (typeof object.deprecatedVariables !== \"object\")\n                    throw TypeError(\".Trace.Details.deprecatedVariables: object expected\");\n                message.deprecatedVariables = {};\n                for (var keys = Object.keys(object.deprecatedVariables), i = 0; i < keys.length; ++i)\n                    if (typeof object.deprecatedVariables[keys[i]] === \"string\")\n                        $util.base64.decode(object.deprecatedVariables[keys[i]], message.deprecatedVariables[keys[i]] = $util.newBuffer($util.base64.length(object.deprecatedVariables[keys[i]])), 0);\n                    else if (object.deprecatedVariables[keys[i]].length)\n                        message.deprecatedVariables[keys[i]] = object.deprecatedVariables[keys[i]];\n            }\n            if (object.operationName != null)\n                message.operationName = String(object.operationName);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Details message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Details\n         * @static\n         * @param {Trace.Details} message Details\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Details.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults) {\n                object.deprecatedVariables = {};\n                object.variablesJson = {};\n            }\n            if (options.defaults)\n                object.operationName = \"\";\n            var keys2;\n            if (message.deprecatedVariables && (keys2 = Object.keys(message.deprecatedVariables)).length) {\n                object.deprecatedVariables = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.deprecatedVariables[keys2[j]] = options.bytes === String ? $util.base64.encode(message.deprecatedVariables[keys2[j]], 0, message.deprecatedVariables[keys2[j]].length) : options.bytes === Array ? Array.prototype.slice.call(message.deprecatedVariables[keys2[j]]) : message.deprecatedVariables[keys2[j]];\n            }\n            if (message.operationName != null && message.hasOwnProperty(\"operationName\"))\n                object.operationName = message.operationName;\n            if (message.variablesJson && (keys2 = Object.keys(message.variablesJson)).length) {\n                object.variablesJson = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.variablesJson[keys2[j]] = message.variablesJson[keys2[j]];\n            }\n            return object;\n        };\n\n        /**\n         * Converts this Details to JSON.\n         * @function toJSON\n         * @memberof Trace.Details\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Details.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Details;\n    })();\n\n    Trace.Error = (function() {\n\n        /**\n         * Properties of an Error.\n         * @memberof Trace\n         * @interface IError\n         * @property {string|null} [message] Error message\n         * @property {Array.<Trace.ILocation>|null} [location] Error location\n         * @property {number|null} [timeNs] Error timeNs\n         * @property {string|null} [json] Error json\n         */\n\n        /**\n         * Constructs a new Error.\n         * @memberof Trace\n         * @classdesc Represents an Error.\n         * @implements IError\n         * @constructor\n         * @param {Trace.IError=} [properties] Properties to set\n         */\n        function Error(properties) {\n            this.location = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Error message.\n         * @member {string} message\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.message = \"\";\n\n        /**\n         * Error location.\n         * @member {Array.<Trace.ILocation>} location\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.location = $util.emptyArray;\n\n        /**\n         * Error timeNs.\n         * @member {number} timeNs\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.timeNs = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Error json.\n         * @member {string} json\n         * @memberof Trace.Error\n         * @instance\n         */\n        Error.prototype.json = \"\";\n\n        /**\n         * Creates a new Error instance using the specified properties.\n         * @function create\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError=} [properties] Properties to set\n         * @returns {Trace.Error} Error instance\n         */\n        Error.create = function create(properties) {\n            return new Error(properties);\n        };\n\n        /**\n         * Encodes the specified Error message. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.message != null && Object.hasOwnProperty.call(message, \"message\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.message);\n            if (message.location != null && message.location.length)\n                for (var i = 0; i < message.location.length; ++i)\n                    $root.Trace.Location.encode(message.location[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.timeNs != null && Object.hasOwnProperty.call(message, \"timeNs\"))\n                writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.timeNs);\n            if (message.json != null && Object.hasOwnProperty.call(message, \"json\"))\n                writer.uint32(/* id 4, wireType 2 =*/34).string(message.json);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Error message, length delimited. Does not implicitly {@link Trace.Error.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.IError} message Error message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Error.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Error();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.message = reader.string();\n                    break;\n                case 2:\n                    if (!(message.location && message.location.length))\n                        message.location = [];\n                    message.location.push($root.Trace.Location.decode(reader, reader.uint32()));\n                    break;\n                case 3:\n                    message.timeNs = reader.uint64();\n                    break;\n                case 4:\n                    message.json = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes an Error message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Error\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Error} Error\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Error.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies an Error message.\n         * @function verify\n         * @memberof Trace.Error\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Error.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                if (!$util.isString(message.message))\n                    return \"message: string expected\";\n            if (message.location != null && message.hasOwnProperty(\"location\")) {\n                if (!Array.isArray(message.location))\n                    return \"location: array expected\";\n                for (var i = 0; i < message.location.length; ++i) {\n                    var error = $root.Trace.Location.verify(message.location[i]);\n                    if (error)\n                        return \"location.\" + error;\n                }\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (!$util.isInteger(message.timeNs) && !(message.timeNs && $util.isInteger(message.timeNs.low) && $util.isInteger(message.timeNs.high)))\n                    return \"timeNs: integer|Long expected\";\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                if (!$util.isString(message.json))\n                    return \"json: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates an Error message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.Error\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.Error} Error\n         */\n        Error.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.Error)\n                return object;\n            var message = new $root.Trace.Error();\n            if (object.message != null)\n                message.message = String(object.message);\n            if (object.location) {\n                if (!Array.isArray(object.location))\n                    throw TypeError(\".Trace.Error.location: array expected\");\n                message.location = [];\n                for (var i = 0; i < object.location.length; ++i) {\n                    if (typeof object.location[i] !== \"object\")\n                        throw TypeError(\".Trace.Error.location: object expected\");\n                    message.location[i] = $root.Trace.Location.fromObject(object.location[i]);\n                }\n            }\n            if (object.timeNs != null)\n                if ($util.Long)\n                    (message.timeNs = $util.Long.fromValue(object.timeNs)).unsigned = true;\n                else if (typeof object.timeNs === \"string\")\n                    message.timeNs = parseInt(object.timeNs, 10);\n                else if (typeof object.timeNs === \"number\")\n                    message.timeNs = object.timeNs;\n                else if (typeof object.timeNs === \"object\")\n                    message.timeNs = new $util.LongBits(object.timeNs.low >>> 0, object.timeNs.high >>> 0).toNumber(true);\n            if (object.json != null)\n                message.json = String(object.json);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from an Error message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Error\n         * @static\n         * @param {Trace.Error} message Error\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Error.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults)\n                object.location = [];\n            if (options.defaults) {\n                object.message = \"\";\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.timeNs = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.timeNs = options.longs === String ? \"0\" : 0;\n                object.json = \"\";\n            }\n            if (message.message != null && message.hasOwnProperty(\"message\"))\n                object.message = message.message;\n            if (message.location && message.location.length) {\n                object.location = [];\n                for (var j = 0; j < message.location.length; ++j)\n                    object.location[j] = $root.Trace.Location.toObject(message.location[j], options);\n            }\n            if (message.timeNs != null && message.hasOwnProperty(\"timeNs\"))\n                if (typeof message.timeNs === \"number\")\n                    object.timeNs = options.longs === String ? String(message.timeNs) : message.timeNs;\n                else\n                    object.timeNs = options.longs === String ? $util.Long.prototype.toString.call(message.timeNs) : options.longs === Number ? new $util.LongBits(message.timeNs.low >>> 0, message.timeNs.high >>> 0).toNumber(true) : message.timeNs;\n            if (message.json != null && message.hasOwnProperty(\"json\"))\n                object.json = message.json;\n            return object;\n        };\n\n        /**\n         * Converts this Error to JSON.\n         * @function toJSON\n         * @memberof Trace.Error\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Error.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Error;\n    })();\n\n    Trace.HTTP = (function() {\n\n        /**\n         * Properties of a HTTP.\n         * @memberof Trace\n         * @interface IHTTP\n         * @property {Trace.HTTP.Method|null} [method] HTTP method\n         * @property {string|null} [host] HTTP host\n         * @property {string|null} [path] HTTP path\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [requestHeaders] HTTP requestHeaders\n         * @property {Object.<string,Trace.HTTP.IValues>|null} [responseHeaders] HTTP responseHeaders\n         * @property {number|null} [statusCode] HTTP statusCode\n         * @property {boolean|null} [secure] HTTP secure\n         * @property {string|null} [protocol] HTTP protocol\n         */\n\n        /**\n         * Constructs a new HTTP.\n         * @memberof Trace\n         * @classdesc Represents a HTTP.\n         * @implements IHTTP\n         * @constructor\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         */\n        function HTTP(properties) {\n            this.requestHeaders = {};\n            this.responseHeaders = {};\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * HTTP method.\n         * @member {Trace.HTTP.Method} method\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.method = 0;\n\n        /**\n         * HTTP host.\n         * @member {string} host\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.host = \"\";\n\n        /**\n         * HTTP path.\n         * @member {string} path\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.path = \"\";\n\n        /**\n         * HTTP requestHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} requestHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.requestHeaders = $util.emptyObject;\n\n        /**\n         * HTTP responseHeaders.\n         * @member {Object.<string,Trace.HTTP.IValues>} responseHeaders\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.responseHeaders = $util.emptyObject;\n\n        /**\n         * HTTP statusCode.\n         * @member {number} statusCode\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.statusCode = 0;\n\n        /**\n         * HTTP secure.\n         * @member {boolean} secure\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.secure = false;\n\n        /**\n         * HTTP protocol.\n         * @member {string} protocol\n         * @memberof Trace.HTTP\n         * @instance\n         */\n        HTTP.prototype.protocol = \"\";\n\n        /**\n         * Creates a new HTTP instance using the specified properties.\n         * @function create\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP=} [properties] Properties to set\n         * @returns {Trace.HTTP} HTTP instance\n         */\n        HTTP.create = function create(properties) {\n            return new HTTP(properties);\n        };\n\n        /**\n         * Encodes the specified HTTP message. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.method != null && Object.hasOwnProperty.call(message, \"method\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).int32(message.method);\n            if (message.host != null && Object.hasOwnProperty.call(message, \"host\"))\n                writer.uint32(/* id 2, wireType 2 =*/18).string(message.host);\n            if (message.path != null && Object.hasOwnProperty.call(message, \"path\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.path);\n            if (message.requestHeaders != null && Object.hasOwnProperty.call(message, \"requestHeaders\"))\n                for (var keys = Object.keys(message.requestHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 4, wireType 2 =*/34).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.requestHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.responseHeaders != null && Object.hasOwnProperty.call(message, \"responseHeaders\"))\n                for (var keys = Object.keys(message.responseHeaders), i = 0; i < keys.length; ++i) {\n                    writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                    $root.Trace.HTTP.Values.encode(message.responseHeaders[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n                }\n            if (message.statusCode != null && Object.hasOwnProperty.call(message, \"statusCode\"))\n                writer.uint32(/* id 6, wireType 0 =*/48).uint32(message.statusCode);\n            if (message.secure != null && Object.hasOwnProperty.call(message, \"secure\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).bool(message.secure);\n            if (message.protocol != null && Object.hasOwnProperty.call(message, \"protocol\"))\n                writer.uint32(/* id 9, wireType 2 =*/74).string(message.protocol);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified HTTP message, length delimited. Does not implicitly {@link Trace.HTTP.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.IHTTP} message HTTP message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        HTTP.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP(), key;\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.method = reader.int32();\n                    break;\n                case 2:\n                    message.host = reader.string();\n                    break;\n                case 3:\n                    message.path = reader.string();\n                    break;\n                case 4:\n                    reader.skip().pos++;\n                    if (message.requestHeaders === $util.emptyObject)\n                        message.requestHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.requestHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 5:\n                    reader.skip().pos++;\n                    if (message.responseHeaders === $util.emptyObject)\n                        message.responseHeaders = {};\n                    key = reader.string();\n                    reader.pos++;\n                    message.responseHeaders[key] = $root.Trace.HTTP.Values.decode(reader, reader.uint32());\n                    break;\n                case 6:\n                    message.statusCode = reader.uint32();\n                    break;\n                case 8:\n                    message.secure = reader.bool();\n                    break;\n                case 9:\n                    message.protocol = reader.string();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a HTTP message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.HTTP\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.HTTP} HTTP\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        HTTP.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a HTTP message.\n         * @function verify\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        HTTP.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                switch (message.method) {\n                default:\n                    return \"method: enum value expected\";\n                case 0:\n                case 1:\n                case 2:\n                case 3:\n                case 4:\n                case 5:\n                case 6:\n                case 7:\n                case 8:\n                case 9:\n                    break;\n                }\n            if (message.host != null && message.hasOwnProperty(\"host\"))\n                if (!$util.isString(message.host))\n                    return \"host: string expected\";\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                if (!$util.isString(message.path))\n                    return \"path: string expected\";\n            if (message.requestHeaders != null && message.hasOwnProperty(\"requestHeaders\")) {\n                if (!$util.isObject(message.requestHeaders))\n                    return \"requestHeaders: object expected\";\n                var key = Object.keys(message.requestHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.requestHeaders[key[i]]);\n                    if (error)\n                        return \"requestHeaders.\" + error;\n                }\n            }\n            if (message.responseHeaders != null && message.hasOwnProperty(\"responseHeaders\")) {\n                if (!$util.isObject(message.responseHeaders))\n                    return \"responseHeaders: object expected\";\n                var key = Object.keys(message.responseHeaders);\n                for (var i = 0; i < key.length; ++i) {\n                    var error = $root.Trace.HTTP.Values.verify(message.responseHeaders[key[i]]);\n                    if (error)\n                        return \"responseHeaders.\" + error;\n                }\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                if (!$util.isInteger(message.statusCode))\n                    return \"statusCode: integer expected\";\n            if (message.secure != null && message.hasOwnProperty(\"secure\"))\n                if (typeof message.secure !== \"boolean\")\n                    return \"secure: boolean expected\";\n            if (message.protocol != null && message.hasOwnProperty(\"protocol\"))\n                if (!$util.isString(message.protocol))\n                    return \"protocol: string expected\";\n            return null;\n        };\n\n        /**\n         * Creates a HTTP message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.HTTP} HTTP\n         */\n        HTTP.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.HTTP)\n                return object;\n            var message = new $root.Trace.HTTP();\n            switch (object.method) {\n            case \"UNKNOWN\":\n            case 0:\n                message.method = 0;\n                break;\n            case \"OPTIONS\":\n            case 1:\n                message.method = 1;\n                break;\n            case \"GET\":\n            case 2:\n                message.method = 2;\n                break;\n            case \"HEAD\":\n            case 3:\n                message.method = 3;\n                break;\n            case \"POST\":\n            case 4:\n                message.method = 4;\n                break;\n            case \"PUT\":\n            case 5:\n                message.method = 5;\n                break;\n            case \"DELETE\":\n            case 6:\n                message.method = 6;\n                break;\n            case \"TRACE\":\n            case 7:\n                message.method = 7;\n                break;\n            case \"CONNECT\":\n            case 8:\n                message.method = 8;\n                break;\n            case \"PATCH\":\n            case 9:\n                message.method = 9;\n                break;\n            }\n            if (object.host != null)\n                message.host = String(object.host);\n            if (object.path != null)\n                message.path = String(object.path);\n            if (object.requestHeaders) {\n                if (typeof object.requestHeaders !== \"object\")\n                    throw TypeError(\".Trace.HTTP.requestHeaders: object expected\");\n                message.requestHeaders = {};\n                for (var keys = Object.keys(object.requestHeaders), i = 0; i < keys.length; ++i) {\n                    if (typeof object.requestHeaders[keys[i]] !== \"object\")\n                        throw TypeError(\".Trace.HTTP.requestHeaders: object expected\");\n                    message.requestHeaders[keys[i]] = $root.Trace.HTTP.Values.fromObject(object.requestHeaders[keys[i]]);\n                }\n            }\n            if (object.responseHeaders) {\n                if (typeof object.responseHeaders !== \"object\")\n                    throw TypeError(\".Trace.HTTP.responseHeaders: object expected\");\n                message.responseHeaders = {};\n                for (var keys = Object.keys(object.responseHeaders), i = 0; i < keys.length; ++i) {\n                    if (typeof object.responseHeaders[keys[i]] !== \"object\")\n                        throw TypeError(\".Trace.HTTP.responseHeaders: object expected\");\n                    message.responseHeaders[keys[i]] = $root.Trace.HTTP.Values.fromObject(object.responseHeaders[keys[i]]);\n                }\n            }\n            if (object.statusCode != null)\n                message.statusCode = object.statusCode >>> 0;\n            if (object.secure != null)\n                message.secure = Boolean(object.secure);\n            if (object.protocol != null)\n                message.protocol = String(object.protocol);\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a HTTP message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.HTTP\n         * @static\n         * @param {Trace.HTTP} message HTTP\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        HTTP.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.objects || options.defaults) {\n                object.requestHeaders = {};\n                object.responseHeaders = {};\n            }\n            if (options.defaults) {\n                object.method = options.enums === String ? \"UNKNOWN\" : 0;\n                object.host = \"\";\n                object.path = \"\";\n                object.statusCode = 0;\n                object.secure = false;\n                object.protocol = \"\";\n            }\n            if (message.method != null && message.hasOwnProperty(\"method\"))\n                object.method = options.enums === String ? $root.Trace.HTTP.Method[message.method] : message.method;\n            if (message.host != null && message.hasOwnProperty(\"host\"))\n                object.host = message.host;\n            if (message.path != null && message.hasOwnProperty(\"path\"))\n                object.path = message.path;\n            var keys2;\n            if (message.requestHeaders && (keys2 = Object.keys(message.requestHeaders)).length) {\n                object.requestHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.requestHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.requestHeaders[keys2[j]], options);\n            }\n            if (message.responseHeaders && (keys2 = Object.keys(message.responseHeaders)).length) {\n                object.responseHeaders = {};\n                for (var j = 0; j < keys2.length; ++j)\n                    object.responseHeaders[keys2[j]] = $root.Trace.HTTP.Values.toObject(message.responseHeaders[keys2[j]], options);\n            }\n            if (message.statusCode != null && message.hasOwnProperty(\"statusCode\"))\n                object.statusCode = message.statusCode;\n            if (message.secure != null && message.hasOwnProperty(\"secure\"))\n                object.secure = message.secure;\n            if (message.protocol != null && message.hasOwnProperty(\"protocol\"))\n                object.protocol = message.protocol;\n            return object;\n        };\n\n        /**\n         * Converts this HTTP to JSON.\n         * @function toJSON\n         * @memberof Trace.HTTP\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        HTTP.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        HTTP.Values = (function() {\n\n            /**\n             * Properties of a Values.\n             * @memberof Trace.HTTP\n             * @interface IValues\n             * @property {Array.<string>|null} [value] Values value\n             */\n\n            /**\n             * Constructs a new Values.\n             * @memberof Trace.HTTP\n             * @classdesc Represents a Values.\n             * @implements IValues\n             * @constructor\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             */\n            function Values(properties) {\n                this.value = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Values value.\n             * @member {Array.<string>} value\n             * @memberof Trace.HTTP.Values\n             * @instance\n             */\n            Values.prototype.value = $util.emptyArray;\n\n            /**\n             * Creates a new Values instance using the specified properties.\n             * @function create\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues=} [properties] Properties to set\n             * @returns {Trace.HTTP.Values} Values instance\n             */\n            Values.create = function create(properties) {\n                return new Values(properties);\n            };\n\n            /**\n             * Encodes the specified Values message. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.value != null && message.value.length)\n                    for (var i = 0; i < message.value.length; ++i)\n                        writer.uint32(/* id 1, wireType 2 =*/10).string(message.value[i]);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Values message, length delimited. Does not implicitly {@link Trace.HTTP.Values.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.IValues} message Values message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Values.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.HTTP.Values();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.value && message.value.length))\n                            message.value = [];\n                        message.value.push(reader.string());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Values message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.HTTP.Values} Values\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Values.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Values message.\n             * @function verify\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Values.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.value != null && message.hasOwnProperty(\"value\")) {\n                    if (!Array.isArray(message.value))\n                        return \"value: array expected\";\n                    for (var i = 0; i < message.value.length; ++i)\n                        if (!$util.isString(message.value[i]))\n                            return \"value: string[] expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a Values message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.HTTP.Values} Values\n             */\n            Values.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.HTTP.Values)\n                    return object;\n                var message = new $root.Trace.HTTP.Values();\n                if (object.value) {\n                    if (!Array.isArray(object.value))\n                        throw TypeError(\".Trace.HTTP.Values.value: array expected\");\n                    message.value = [];\n                    for (var i = 0; i < object.value.length; ++i)\n                        message.value[i] = String(object.value[i]);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Values message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.HTTP.Values\n             * @static\n             * @param {Trace.HTTP.Values} message Values\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Values.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.value = [];\n                if (message.value && message.value.length) {\n                    object.value = [];\n                    for (var j = 0; j < message.value.length; ++j)\n                        object.value[j] = message.value[j];\n                }\n                return object;\n            };\n\n            /**\n             * Converts this Values to JSON.\n             * @function toJSON\n             * @memberof Trace.HTTP.Values\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Values.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Values;\n        })();\n\n        /**\n         * Method enum.\n         * @name Trace.HTTP.Method\n         * @enum {string}\n         * @property {number} UNKNOWN=0 UNKNOWN value\n         * @property {number} OPTIONS=1 OPTIONS value\n         * @property {number} GET=2 GET value\n         * @property {number} HEAD=3 HEAD value\n         * @property {number} POST=4 POST value\n         * @property {number} PUT=5 PUT value\n         * @property {number} DELETE=6 DELETE value\n         * @property {number} TRACE=7 TRACE value\n         * @property {number} CONNECT=8 CONNECT value\n         * @property {number} PATCH=9 PATCH value\n         */\n        HTTP.Method = (function() {\n            var valuesById = {}, values = Object.create(valuesById);\n            values[valuesById[0] = \"UNKNOWN\"] = 0;\n            values[valuesById[1] = \"OPTIONS\"] = 1;\n            values[valuesById[2] = \"GET\"] = 2;\n            values[valuesById[3] = \"HEAD\"] = 3;\n            values[valuesById[4] = \"POST\"] = 4;\n            values[valuesById[5] = \"PUT\"] = 5;\n            values[valuesById[6] = \"DELETE\"] = 6;\n            values[valuesById[7] = \"TRACE\"] = 7;\n            values[valuesById[8] = \"CONNECT\"] = 8;\n            values[valuesById[9] = \"PATCH\"] = 9;\n            return values;\n        })();\n\n        return HTTP;\n    })();\n\n    Trace.Location = (function() {\n\n        /**\n         * Properties of a Location.\n         * @memberof Trace\n         * @interface ILocation\n         * @property {number|null} [line] Location line\n         * @property {number|null} [column] Location column\n         */\n\n        /**\n         * Constructs a new Location.\n         * @memberof Trace\n         * @classdesc Represents a Location.\n         * @implements ILocation\n         * @constructor\n         * @param {Trace.ILocation=} [properties] Properties to set\n         */\n        function Location(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Location line.\n         * @member {number} line\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.line = 0;\n\n        /**\n         * Location column.\n         * @member {number} column\n         * @memberof Trace.Location\n         * @instance\n         */\n        Location.prototype.column = 0;\n\n        /**\n         * Creates a new Location instance using the specified properties.\n         * @function create\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation=} [properties] Properties to set\n         * @returns {Trace.Location} Location instance\n         */\n        Location.create = function create(properties) {\n            return new Location(properties);\n        };\n\n        /**\n         * Encodes the specified Location message. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.line != null && Object.hasOwnProperty.call(message, \"line\"))\n                writer.uint32(/* id 1, wireType 0 =*/8).uint32(message.line);\n            if (message.column != null && Object.hasOwnProperty.call(message, \"column\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.column);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Location message, length delimited. Does not implicitly {@link Trace.Location.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.ILocation} message Location message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Location.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Location();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.line = reader.uint32();\n                    break;\n                case 2:\n                    message.column = reader.uint32();\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Location message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Location\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Location} Location\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Location.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Location message.\n         * @function verify\n         * @memberof Trace.Location\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Location.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                if (!$util.isInteger(message.line))\n                    return \"line: integer expected\";\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                if (!$util.isInteger(message.column))\n                    return \"column: integer expected\";\n            return null;\n        };\n\n        /**\n         * Creates a Location message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.Location\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.Location} Location\n         */\n        Location.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.Location)\n                return object;\n            var message = new $root.Trace.Location();\n            if (object.line != null)\n                message.line = object.line >>> 0;\n            if (object.column != null)\n                message.column = object.column >>> 0;\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Location message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Location\n         * @static\n         * @param {Trace.Location} message Location\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Location.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.defaults) {\n                object.line = 0;\n                object.column = 0;\n            }\n            if (message.line != null && message.hasOwnProperty(\"line\"))\n                object.line = message.line;\n            if (message.column != null && message.hasOwnProperty(\"column\"))\n                object.column = message.column;\n            return object;\n        };\n\n        /**\n         * Converts this Location to JSON.\n         * @function toJSON\n         * @memberof Trace.Location\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Location.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Location;\n    })();\n\n    Trace.Node = (function() {\n\n        /**\n         * Properties of a Node.\n         * @memberof Trace\n         * @interface INode\n         * @property {string|null} [responseName] Node responseName\n         * @property {number|null} [index] Node index\n         * @property {string|null} [originalFieldName] Node originalFieldName\n         * @property {string|null} [type] Node type\n         * @property {string|null} [parentType] Node parentType\n         * @property {Trace.ICachePolicy|null} [cachePolicy] Node cachePolicy\n         * @property {number|null} [startTime] Node startTime\n         * @property {number|null} [endTime] Node endTime\n         * @property {Array.<Trace.IError>|null} [error] Node error\n         * @property {Array.<Trace.INode>|null} [child] Node child\n         */\n\n        /**\n         * Constructs a new Node.\n         * @memberof Trace\n         * @classdesc Represents a Node.\n         * @implements INode\n         * @constructor\n         * @param {Trace.INode=} [properties] Properties to set\n         */\n        function Node(properties) {\n            this.error = [];\n            this.child = [];\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * Node responseName.\n         * @member {string} responseName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.responseName = \"\";\n\n        /**\n         * Node index.\n         * @member {number} index\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.index = 0;\n\n        /**\n         * Node originalFieldName.\n         * @member {string} originalFieldName\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.originalFieldName = \"\";\n\n        /**\n         * Node type.\n         * @member {string} type\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.type = \"\";\n\n        /**\n         * Node parentType.\n         * @member {string} parentType\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.parentType = \"\";\n\n        /**\n         * Node cachePolicy.\n         * @member {Trace.ICachePolicy|null|undefined} cachePolicy\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.cachePolicy = null;\n\n        /**\n         * Node startTime.\n         * @member {number} startTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.startTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Node endTime.\n         * @member {number} endTime\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.endTime = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n        /**\n         * Node error.\n         * @member {Array.<Trace.IError>} error\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.error = $util.emptyArray;\n\n        /**\n         * Node child.\n         * @member {Array.<Trace.INode>} child\n         * @memberof Trace.Node\n         * @instance\n         */\n        Node.prototype.child = $util.emptyArray;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * Node id.\n         * @member {\"responseName\"|\"index\"|undefined} id\n         * @memberof Trace.Node\n         * @instance\n         */\n        Object.defineProperty(Node.prototype, \"id\", {\n            get: $util.oneOfGetter($oneOfFields = [\"responseName\", \"index\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new Node instance using the specified properties.\n         * @function create\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode=} [properties] Properties to set\n         * @returns {Trace.Node} Node instance\n         */\n        Node.create = function create(properties) {\n            return new Node(properties);\n        };\n\n        /**\n         * Encodes the specified Node message. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.responseName != null && Object.hasOwnProperty.call(message, \"responseName\"))\n                writer.uint32(/* id 1, wireType 2 =*/10).string(message.responseName);\n            if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n            if (message.type != null && Object.hasOwnProperty.call(message, \"type\"))\n                writer.uint32(/* id 3, wireType 2 =*/26).string(message.type);\n            if (message.cachePolicy != null && Object.hasOwnProperty.call(message, \"cachePolicy\"))\n                $root.Trace.CachePolicy.encode(message.cachePolicy, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n            if (message.startTime != null && Object.hasOwnProperty.call(message, \"startTime\"))\n                writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.startTime);\n            if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n                writer.uint32(/* id 9, wireType 0 =*/72).uint64(message.endTime);\n            if (message.error != null && message.error.length)\n                for (var i = 0; i < message.error.length; ++i)\n                    $root.Trace.Error.encode(message.error[i], writer.uint32(/* id 11, wireType 2 =*/90).fork()).ldelim();\n            if (message.child != null && message.child.length)\n                for (var i = 0; i < message.child.length; ++i)\n                    $root.Trace.Node.encode(message.child[i], writer.uint32(/* id 12, wireType 2 =*/98).fork()).ldelim();\n            if (message.parentType != null && Object.hasOwnProperty.call(message, \"parentType\"))\n                writer.uint32(/* id 13, wireType 2 =*/106).string(message.parentType);\n            if (message.originalFieldName != null && Object.hasOwnProperty.call(message, \"originalFieldName\"))\n                writer.uint32(/* id 14, wireType 2 =*/114).string(message.originalFieldName);\n            return writer;\n        };\n\n        /**\n         * Encodes the specified Node message, length delimited. Does not implicitly {@link Trace.Node.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.INode} message Node message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        Node.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.Node();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.responseName = reader.string();\n                    break;\n                case 2:\n                    message.index = reader.uint32();\n                    break;\n                case 14:\n                    message.originalFieldName = reader.string();\n                    break;\n                case 3:\n                    message.type = reader.string();\n                    break;\n                case 13:\n                    message.parentType = reader.string();\n                    break;\n                case 5:\n                    message.cachePolicy = $root.Trace.CachePolicy.decode(reader, reader.uint32());\n                    break;\n                case 8:\n                    message.startTime = reader.uint64();\n                    break;\n                case 9:\n                    message.endTime = reader.uint64();\n                    break;\n                case 11:\n                    if (!(message.error && message.error.length))\n                        message.error = [];\n                    message.error.push($root.Trace.Error.decode(reader, reader.uint32()));\n                    break;\n                case 12:\n                    if (!(message.child && message.child.length))\n                        message.child = [];\n                    message.child.push($root.Trace.Node.decode(reader, reader.uint32()));\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a Node message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.Node\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.Node} Node\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        Node.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a Node message.\n         * @function verify\n         * @memberof Trace.Node\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        Node.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                properties.id = 1;\n                if (!$util.isString(message.responseName))\n                    return \"responseName: string expected\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                if (properties.id === 1)\n                    return \"id: multiple values\";\n                properties.id = 1;\n                if (!$util.isInteger(message.index))\n                    return \"index: integer expected\";\n            }\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                if (!$util.isString(message.originalFieldName))\n                    return \"originalFieldName: string expected\";\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                if (!$util.isString(message.type))\n                    return \"type: string expected\";\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                if (!$util.isString(message.parentType))\n                    return \"parentType: string expected\";\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\")) {\n                var error = $root.Trace.CachePolicy.verify(message.cachePolicy);\n                if (error)\n                    return \"cachePolicy.\" + error;\n            }\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (!$util.isInteger(message.startTime) && !(message.startTime && $util.isInteger(message.startTime.low) && $util.isInteger(message.startTime.high)))\n                    return \"startTime: integer|Long expected\";\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (!$util.isInteger(message.endTime) && !(message.endTime && $util.isInteger(message.endTime.low) && $util.isInteger(message.endTime.high)))\n                    return \"endTime: integer|Long expected\";\n            if (message.error != null && message.hasOwnProperty(\"error\")) {\n                if (!Array.isArray(message.error))\n                    return \"error: array expected\";\n                for (var i = 0; i < message.error.length; ++i) {\n                    var error = $root.Trace.Error.verify(message.error[i]);\n                    if (error)\n                        return \"error.\" + error;\n                }\n            }\n            if (message.child != null && message.hasOwnProperty(\"child\")) {\n                if (!Array.isArray(message.child))\n                    return \"child: array expected\";\n                for (var i = 0; i < message.child.length; ++i) {\n                    var error = $root.Trace.Node.verify(message.child[i]);\n                    if (error)\n                        return \"child.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a Node message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.Node\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.Node} Node\n         */\n        Node.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.Node)\n                return object;\n            var message = new $root.Trace.Node();\n            if (object.responseName != null)\n                message.responseName = String(object.responseName);\n            if (object.index != null)\n                message.index = object.index >>> 0;\n            if (object.originalFieldName != null)\n                message.originalFieldName = String(object.originalFieldName);\n            if (object.type != null)\n                message.type = String(object.type);\n            if (object.parentType != null)\n                message.parentType = String(object.parentType);\n            if (object.cachePolicy != null) {\n                if (typeof object.cachePolicy !== \"object\")\n                    throw TypeError(\".Trace.Node.cachePolicy: object expected\");\n                message.cachePolicy = $root.Trace.CachePolicy.fromObject(object.cachePolicy);\n            }\n            if (object.startTime != null)\n                if ($util.Long)\n                    (message.startTime = $util.Long.fromValue(object.startTime)).unsigned = true;\n                else if (typeof object.startTime === \"string\")\n                    message.startTime = parseInt(object.startTime, 10);\n                else if (typeof object.startTime === \"number\")\n                    message.startTime = object.startTime;\n                else if (typeof object.startTime === \"object\")\n                    message.startTime = new $util.LongBits(object.startTime.low >>> 0, object.startTime.high >>> 0).toNumber(true);\n            if (object.endTime != null)\n                if ($util.Long)\n                    (message.endTime = $util.Long.fromValue(object.endTime)).unsigned = true;\n                else if (typeof object.endTime === \"string\")\n                    message.endTime = parseInt(object.endTime, 10);\n                else if (typeof object.endTime === \"number\")\n                    message.endTime = object.endTime;\n                else if (typeof object.endTime === \"object\")\n                    message.endTime = new $util.LongBits(object.endTime.low >>> 0, object.endTime.high >>> 0).toNumber(true);\n            if (object.error) {\n                if (!Array.isArray(object.error))\n                    throw TypeError(\".Trace.Node.error: array expected\");\n                message.error = [];\n                for (var i = 0; i < object.error.length; ++i) {\n                    if (typeof object.error[i] !== \"object\")\n                        throw TypeError(\".Trace.Node.error: object expected\");\n                    message.error[i] = $root.Trace.Error.fromObject(object.error[i]);\n                }\n            }\n            if (object.child) {\n                if (!Array.isArray(object.child))\n                    throw TypeError(\".Trace.Node.child: array expected\");\n                message.child = [];\n                for (var i = 0; i < object.child.length; ++i) {\n                    if (typeof object.child[i] !== \"object\")\n                        throw TypeError(\".Trace.Node.child: object expected\");\n                    message.child[i] = $root.Trace.Node.fromObject(object.child[i]);\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a Node message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.Node\n         * @static\n         * @param {Trace.Node} message Node\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        Node.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (options.arrays || options.defaults) {\n                object.error = [];\n                object.child = [];\n            }\n            if (options.defaults) {\n                object.type = \"\";\n                object.cachePolicy = null;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.startTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.startTime = options.longs === String ? \"0\" : 0;\n                if ($util.Long) {\n                    var long = new $util.Long(0, 0, true);\n                    object.endTime = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                } else\n                    object.endTime = options.longs === String ? \"0\" : 0;\n                object.parentType = \"\";\n                object.originalFieldName = \"\";\n            }\n            if (message.responseName != null && message.hasOwnProperty(\"responseName\")) {\n                object.responseName = message.responseName;\n                if (options.oneofs)\n                    object.id = \"responseName\";\n            }\n            if (message.index != null && message.hasOwnProperty(\"index\")) {\n                object.index = message.index;\n                if (options.oneofs)\n                    object.id = \"index\";\n            }\n            if (message.type != null && message.hasOwnProperty(\"type\"))\n                object.type = message.type;\n            if (message.cachePolicy != null && message.hasOwnProperty(\"cachePolicy\"))\n                object.cachePolicy = $root.Trace.CachePolicy.toObject(message.cachePolicy, options);\n            if (message.startTime != null && message.hasOwnProperty(\"startTime\"))\n                if (typeof message.startTime === \"number\")\n                    object.startTime = options.longs === String ? String(message.startTime) : message.startTime;\n                else\n                    object.startTime = options.longs === String ? $util.Long.prototype.toString.call(message.startTime) : options.longs === Number ? new $util.LongBits(message.startTime.low >>> 0, message.startTime.high >>> 0).toNumber(true) : message.startTime;\n            if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n                if (typeof message.endTime === \"number\")\n                    object.endTime = options.longs === String ? String(message.endTime) : message.endTime;\n                else\n                    object.endTime = options.longs === String ? $util.Long.prototype.toString.call(message.endTime) : options.longs === Number ? new $util.LongBits(message.endTime.low >>> 0, message.endTime.high >>> 0).toNumber(true) : message.endTime;\n            if (message.error && message.error.length) {\n                object.error = [];\n                for (var j = 0; j < message.error.length; ++j)\n                    object.error[j] = $root.Trace.Error.toObject(message.error[j], options);\n            }\n            if (message.child && message.child.length) {\n                object.child = [];\n                for (var j = 0; j < message.child.length; ++j)\n                    object.child[j] = $root.Trace.Node.toObject(message.child[j], options);\n            }\n            if (message.parentType != null && message.hasOwnProperty(\"parentType\"))\n                object.parentType = message.parentType;\n            if (message.originalFieldName != null && message.hasOwnProperty(\"originalFieldName\"))\n                object.originalFieldName = message.originalFieldName;\n            return object;\n        };\n\n        /**\n         * Converts this Node to JSON.\n         * @function toJSON\n         * @memberof Trace.Node\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        Node.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        return Node;\n    })();\n\n    Trace.QueryPlanNode = (function() {\n\n        /**\n         * Properties of a QueryPlanNode.\n         * @memberof Trace\n         * @interface IQueryPlanNode\n         * @property {Trace.QueryPlanNode.ISequenceNode|null} [sequence] QueryPlanNode sequence\n         * @property {Trace.QueryPlanNode.IParallelNode|null} [parallel] QueryPlanNode parallel\n         * @property {Trace.QueryPlanNode.IFetchNode|null} [fetch] QueryPlanNode fetch\n         * @property {Trace.QueryPlanNode.IFlattenNode|null} [flatten] QueryPlanNode flatten\n         */\n\n        /**\n         * Constructs a new QueryPlanNode.\n         * @memberof Trace\n         * @classdesc Represents a QueryPlanNode.\n         * @implements IQueryPlanNode\n         * @constructor\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         */\n        function QueryPlanNode(properties) {\n            if (properties)\n                for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                    if (properties[keys[i]] != null)\n                        this[keys[i]] = properties[keys[i]];\n        }\n\n        /**\n         * QueryPlanNode sequence.\n         * @member {Trace.QueryPlanNode.ISequenceNode|null|undefined} sequence\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.sequence = null;\n\n        /**\n         * QueryPlanNode parallel.\n         * @member {Trace.QueryPlanNode.IParallelNode|null|undefined} parallel\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.parallel = null;\n\n        /**\n         * QueryPlanNode fetch.\n         * @member {Trace.QueryPlanNode.IFetchNode|null|undefined} fetch\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.fetch = null;\n\n        /**\n         * QueryPlanNode flatten.\n         * @member {Trace.QueryPlanNode.IFlattenNode|null|undefined} flatten\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        QueryPlanNode.prototype.flatten = null;\n\n        // OneOf field names bound to virtual getters and setters\n        var $oneOfFields;\n\n        /**\n         * QueryPlanNode node.\n         * @member {\"sequence\"|\"parallel\"|\"fetch\"|\"flatten\"|undefined} node\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         */\n        Object.defineProperty(QueryPlanNode.prototype, \"node\", {\n            get: $util.oneOfGetter($oneOfFields = [\"sequence\", \"parallel\", \"fetch\", \"flatten\"]),\n            set: $util.oneOfSetter($oneOfFields)\n        });\n\n        /**\n         * Creates a new QueryPlanNode instance using the specified properties.\n         * @function create\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode=} [properties] Properties to set\n         * @returns {Trace.QueryPlanNode} QueryPlanNode instance\n         */\n        QueryPlanNode.create = function create(properties) {\n            return new QueryPlanNode(properties);\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encode = function encode(message, writer) {\n            if (!writer)\n                writer = $Writer.create();\n            if (message.sequence != null && Object.hasOwnProperty.call(message, \"sequence\"))\n                $root.Trace.QueryPlanNode.SequenceNode.encode(message.sequence, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n            if (message.parallel != null && Object.hasOwnProperty.call(message, \"parallel\"))\n                $root.Trace.QueryPlanNode.ParallelNode.encode(message.parallel, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n            if (message.fetch != null && Object.hasOwnProperty.call(message, \"fetch\"))\n                $root.Trace.QueryPlanNode.FetchNode.encode(message.fetch, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n            if (message.flatten != null && Object.hasOwnProperty.call(message, \"flatten\"))\n                $root.Trace.QueryPlanNode.FlattenNode.encode(message.flatten, writer.uint32(/* id 4, wireType 2 =*/34).fork()).ldelim();\n            return writer;\n        };\n\n        /**\n         * Encodes the specified QueryPlanNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.verify|verify} messages.\n         * @function encodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.IQueryPlanNode} message QueryPlanNode message or plain object to encode\n         * @param {$protobuf.Writer} [writer] Writer to encode to\n         * @returns {$protobuf.Writer} Writer\n         */\n        QueryPlanNode.encodeDelimited = function encodeDelimited(message, writer) {\n            return this.encode(message, writer).ldelim();\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer.\n         * @function decode\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @param {number} [length] Message length if known beforehand\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decode = function decode(reader, length) {\n            if (!(reader instanceof $Reader))\n                reader = $Reader.create(reader);\n            var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode();\n            while (reader.pos < end) {\n                var tag = reader.uint32();\n                switch (tag >>> 3) {\n                case 1:\n                    message.sequence = $root.Trace.QueryPlanNode.SequenceNode.decode(reader, reader.uint32());\n                    break;\n                case 2:\n                    message.parallel = $root.Trace.QueryPlanNode.ParallelNode.decode(reader, reader.uint32());\n                    break;\n                case 3:\n                    message.fetch = $root.Trace.QueryPlanNode.FetchNode.decode(reader, reader.uint32());\n                    break;\n                case 4:\n                    message.flatten = $root.Trace.QueryPlanNode.FlattenNode.decode(reader, reader.uint32());\n                    break;\n                default:\n                    reader.skipType(tag & 7);\n                    break;\n                }\n            }\n            return message;\n        };\n\n        /**\n         * Decodes a QueryPlanNode message from the specified reader or buffer, length delimited.\n         * @function decodeDelimited\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         * @throws {Error} If the payload is not a reader or valid buffer\n         * @throws {$protobuf.util.ProtocolError} If required fields are missing\n         */\n        QueryPlanNode.decodeDelimited = function decodeDelimited(reader) {\n            if (!(reader instanceof $Reader))\n                reader = new $Reader(reader);\n            return this.decode(reader, reader.uint32());\n        };\n\n        /**\n         * Verifies a QueryPlanNode message.\n         * @function verify\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Object.<string,*>} message Plain object to verify\n         * @returns {string|null} `null` if valid, otherwise the reason why it is not\n         */\n        QueryPlanNode.verify = function verify(message) {\n            if (typeof message !== \"object\" || message === null)\n                return \"object expected\";\n            var properties = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.SequenceNode.verify(message.sequence);\n                    if (error)\n                        return \"sequence.\" + error;\n                }\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.ParallelNode.verify(message.parallel);\n                    if (error)\n                        return \"parallel.\" + error;\n                }\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FetchNode.verify(message.fetch);\n                    if (error)\n                        return \"fetch.\" + error;\n                }\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                if (properties.node === 1)\n                    return \"node: multiple values\";\n                properties.node = 1;\n                {\n                    var error = $root.Trace.QueryPlanNode.FlattenNode.verify(message.flatten);\n                    if (error)\n                        return \"flatten.\" + error;\n                }\n            }\n            return null;\n        };\n\n        /**\n         * Creates a QueryPlanNode message from a plain object. Also converts values to their respective internal types.\n         * @function fromObject\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Object.<string,*>} object Plain object\n         * @returns {Trace.QueryPlanNode} QueryPlanNode\n         */\n        QueryPlanNode.fromObject = function fromObject(object) {\n            if (object instanceof $root.Trace.QueryPlanNode)\n                return object;\n            var message = new $root.Trace.QueryPlanNode();\n            if (object.sequence != null) {\n                if (typeof object.sequence !== \"object\")\n                    throw TypeError(\".Trace.QueryPlanNode.sequence: object expected\");\n                message.sequence = $root.Trace.QueryPlanNode.SequenceNode.fromObject(object.sequence);\n            }\n            if (object.parallel != null) {\n                if (typeof object.parallel !== \"object\")\n                    throw TypeError(\".Trace.QueryPlanNode.parallel: object expected\");\n                message.parallel = $root.Trace.QueryPlanNode.ParallelNode.fromObject(object.parallel);\n            }\n            if (object.fetch != null) {\n                if (typeof object.fetch !== \"object\")\n                    throw TypeError(\".Trace.QueryPlanNode.fetch: object expected\");\n                message.fetch = $root.Trace.QueryPlanNode.FetchNode.fromObject(object.fetch);\n            }\n            if (object.flatten != null) {\n                if (typeof object.flatten !== \"object\")\n                    throw TypeError(\".Trace.QueryPlanNode.flatten: object expected\");\n                message.flatten = $root.Trace.QueryPlanNode.FlattenNode.fromObject(object.flatten);\n            }\n            return message;\n        };\n\n        /**\n         * Creates a plain object from a QueryPlanNode message. Also converts values to other types if specified.\n         * @function toObject\n         * @memberof Trace.QueryPlanNode\n         * @static\n         * @param {Trace.QueryPlanNode} message QueryPlanNode\n         * @param {$protobuf.IConversionOptions} [options] Conversion options\n         * @returns {Object.<string,*>} Plain object\n         */\n        QueryPlanNode.toObject = function toObject(message, options) {\n            if (!options)\n                options = {};\n            var object = {};\n            if (message.sequence != null && message.hasOwnProperty(\"sequence\")) {\n                object.sequence = $root.Trace.QueryPlanNode.SequenceNode.toObject(message.sequence, options);\n                if (options.oneofs)\n                    object.node = \"sequence\";\n            }\n            if (message.parallel != null && message.hasOwnProperty(\"parallel\")) {\n                object.parallel = $root.Trace.QueryPlanNode.ParallelNode.toObject(message.parallel, options);\n                if (options.oneofs)\n                    object.node = \"parallel\";\n            }\n            if (message.fetch != null && message.hasOwnProperty(\"fetch\")) {\n                object.fetch = $root.Trace.QueryPlanNode.FetchNode.toObject(message.fetch, options);\n                if (options.oneofs)\n                    object.node = \"fetch\";\n            }\n            if (message.flatten != null && message.hasOwnProperty(\"flatten\")) {\n                object.flatten = $root.Trace.QueryPlanNode.FlattenNode.toObject(message.flatten, options);\n                if (options.oneofs)\n                    object.node = \"flatten\";\n            }\n            return object;\n        };\n\n        /**\n         * Converts this QueryPlanNode to JSON.\n         * @function toJSON\n         * @memberof Trace.QueryPlanNode\n         * @instance\n         * @returns {Object.<string,*>} JSON object\n         */\n        QueryPlanNode.prototype.toJSON = function toJSON() {\n            return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n        };\n\n        QueryPlanNode.SequenceNode = (function() {\n\n            /**\n             * Properties of a SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface ISequenceNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] SequenceNode nodes\n             */\n\n            /**\n             * Constructs a new SequenceNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a SequenceNode.\n             * @implements ISequenceNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             */\n            function SequenceNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * SequenceNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             */\n            SequenceNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new SequenceNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode instance\n             */\n            SequenceNode.create = function create(properties) {\n                return new SequenceNode(properties);\n            };\n\n            /**\n             * Encodes the specified SequenceNode message. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified SequenceNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.SequenceNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.ISequenceNode} message SequenceNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            SequenceNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.SequenceNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a SequenceNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            SequenceNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a SequenceNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            SequenceNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a SequenceNode message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.SequenceNode} SequenceNode\n             */\n            SequenceNode.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.SequenceNode)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.SequenceNode();\n                if (object.nodes) {\n                    if (!Array.isArray(object.nodes))\n                        throw TypeError(\".Trace.QueryPlanNode.SequenceNode.nodes: array expected\");\n                    message.nodes = [];\n                    for (var i = 0; i < object.nodes.length; ++i) {\n                        if (typeof object.nodes[i] !== \"object\")\n                            throw TypeError(\".Trace.QueryPlanNode.SequenceNode.nodes: object expected\");\n                        message.nodes[i] = $root.Trace.QueryPlanNode.fromObject(object.nodes[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a SequenceNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @static\n             * @param {Trace.QueryPlanNode.SequenceNode} message SequenceNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            SequenceNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this SequenceNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.SequenceNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            SequenceNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return SequenceNode;\n        })();\n\n        QueryPlanNode.ParallelNode = (function() {\n\n            /**\n             * Properties of a ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IParallelNode\n             * @property {Array.<Trace.IQueryPlanNode>|null} [nodes] ParallelNode nodes\n             */\n\n            /**\n             * Constructs a new ParallelNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ParallelNode.\n             * @implements IParallelNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             */\n            function ParallelNode(properties) {\n                this.nodes = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ParallelNode nodes.\n             * @member {Array.<Trace.IQueryPlanNode>} nodes\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             */\n            ParallelNode.prototype.nodes = $util.emptyArray;\n\n            /**\n             * Creates a new ParallelNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode instance\n             */\n            ParallelNode.create = function create(properties) {\n                return new ParallelNode(properties);\n            };\n\n            /**\n             * Encodes the specified ParallelNode message. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.nodes != null && message.nodes.length)\n                    for (var i = 0; i < message.nodes.length; ++i)\n                        $root.Trace.QueryPlanNode.encode(message.nodes[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ParallelNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ParallelNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.IParallelNode} message ParallelNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ParallelNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ParallelNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.nodes && message.nodes.length))\n                            message.nodes = [];\n                        message.nodes.push($root.Trace.QueryPlanNode.decode(reader, reader.uint32()));\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ParallelNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ParallelNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ParallelNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ParallelNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.nodes != null && message.hasOwnProperty(\"nodes\")) {\n                    if (!Array.isArray(message.nodes))\n                        return \"nodes: array expected\";\n                    for (var i = 0; i < message.nodes.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.verify(message.nodes[i]);\n                        if (error)\n                            return \"nodes.\" + error;\n                    }\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ParallelNode message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.ParallelNode} ParallelNode\n             */\n            ParallelNode.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.ParallelNode)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.ParallelNode();\n                if (object.nodes) {\n                    if (!Array.isArray(object.nodes))\n                        throw TypeError(\".Trace.QueryPlanNode.ParallelNode.nodes: array expected\");\n                    message.nodes = [];\n                    for (var i = 0; i < object.nodes.length; ++i) {\n                        if (typeof object.nodes[i] !== \"object\")\n                            throw TypeError(\".Trace.QueryPlanNode.ParallelNode.nodes: object expected\");\n                        message.nodes[i] = $root.Trace.QueryPlanNode.fromObject(object.nodes[i]);\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ParallelNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @static\n             * @param {Trace.QueryPlanNode.ParallelNode} message ParallelNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ParallelNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.nodes = [];\n                if (message.nodes && message.nodes.length) {\n                    object.nodes = [];\n                    for (var j = 0; j < message.nodes.length; ++j)\n                        object.nodes[j] = $root.Trace.QueryPlanNode.toObject(message.nodes[j], options);\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ParallelNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ParallelNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ParallelNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ParallelNode;\n        })();\n\n        QueryPlanNode.FetchNode = (function() {\n\n            /**\n             * Properties of a FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFetchNode\n             * @property {string|null} [serviceName] FetchNode serviceName\n             * @property {boolean|null} [traceParsingFailed] FetchNode traceParsingFailed\n             * @property {ITrace|null} [trace] FetchNode trace\n             * @property {number|null} [sentTimeOffset] FetchNode sentTimeOffset\n             * @property {google.protobuf.ITimestamp|null} [sentTime] FetchNode sentTime\n             * @property {google.protobuf.ITimestamp|null} [receivedTime] FetchNode receivedTime\n             */\n\n            /**\n             * Constructs a new FetchNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FetchNode.\n             * @implements IFetchNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             */\n            function FetchNode(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FetchNode serviceName.\n             * @member {string} serviceName\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.serviceName = \"\";\n\n            /**\n             * FetchNode traceParsingFailed.\n             * @member {boolean} traceParsingFailed\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.traceParsingFailed = false;\n\n            /**\n             * FetchNode trace.\n             * @member {ITrace|null|undefined} trace\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.trace = null;\n\n            /**\n             * FetchNode sentTimeOffset.\n             * @member {number} sentTimeOffset\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTimeOffset = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n            /**\n             * FetchNode sentTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} sentTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.sentTime = null;\n\n            /**\n             * FetchNode receivedTime.\n             * @member {google.protobuf.ITimestamp|null|undefined} receivedTime\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             */\n            FetchNode.prototype.receivedTime = null;\n\n            /**\n             * Creates a new FetchNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode instance\n             */\n            FetchNode.create = function create(properties) {\n                return new FetchNode(properties);\n            };\n\n            /**\n             * Encodes the specified FetchNode message. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.serviceName != null && Object.hasOwnProperty.call(message, \"serviceName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.serviceName);\n                if (message.traceParsingFailed != null && Object.hasOwnProperty.call(message, \"traceParsingFailed\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).bool(message.traceParsingFailed);\n                if (message.trace != null && Object.hasOwnProperty.call(message, \"trace\"))\n                    $root.Trace.encode(message.trace, writer.uint32(/* id 3, wireType 2 =*/26).fork()).ldelim();\n                if (message.sentTimeOffset != null && Object.hasOwnProperty.call(message, \"sentTimeOffset\"))\n                    writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.sentTimeOffset);\n                if (message.sentTime != null && Object.hasOwnProperty.call(message, \"sentTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.sentTime, writer.uint32(/* id 5, wireType 2 =*/42).fork()).ldelim();\n                if (message.receivedTime != null && Object.hasOwnProperty.call(message, \"receivedTime\"))\n                    $root.google.protobuf.Timestamp.encode(message.receivedTime, writer.uint32(/* id 6, wireType 2 =*/50).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FetchNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FetchNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFetchNode} message FetchNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FetchNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FetchNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.serviceName = reader.string();\n                        break;\n                    case 2:\n                        message.traceParsingFailed = reader.bool();\n                        break;\n                    case 3:\n                        message.trace = $root.Trace.decode(reader, reader.uint32());\n                        break;\n                    case 4:\n                        message.sentTimeOffset = reader.uint64();\n                        break;\n                    case 5:\n                        message.sentTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    case 6:\n                        message.receivedTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FetchNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FetchNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FetchNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FetchNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    if (!$util.isString(message.serviceName))\n                        return \"serviceName: string expected\";\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    if (typeof message.traceParsingFailed !== \"boolean\")\n                        return \"traceParsingFailed: boolean expected\";\n                if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n                    var error = $root.Trace.verify(message.trace);\n                    if (error)\n                        return \"trace.\" + error;\n                }\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (!$util.isInteger(message.sentTimeOffset) && !(message.sentTimeOffset && $util.isInteger(message.sentTimeOffset.low) && $util.isInteger(message.sentTimeOffset.high)))\n                        return \"sentTimeOffset: integer|Long expected\";\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.sentTime);\n                    if (error)\n                        return \"sentTime.\" + error;\n                }\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\")) {\n                    var error = $root.google.protobuf.Timestamp.verify(message.receivedTime);\n                    if (error)\n                        return \"receivedTime.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FetchNode message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.FetchNode} FetchNode\n             */\n            FetchNode.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.FetchNode)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.FetchNode();\n                if (object.serviceName != null)\n                    message.serviceName = String(object.serviceName);\n                if (object.traceParsingFailed != null)\n                    message.traceParsingFailed = Boolean(object.traceParsingFailed);\n                if (object.trace != null) {\n                    if (typeof object.trace !== \"object\")\n                        throw TypeError(\".Trace.QueryPlanNode.FetchNode.trace: object expected\");\n                    message.trace = $root.Trace.fromObject(object.trace);\n                }\n                if (object.sentTimeOffset != null)\n                    if ($util.Long)\n                        (message.sentTimeOffset = $util.Long.fromValue(object.sentTimeOffset)).unsigned = true;\n                    else if (typeof object.sentTimeOffset === \"string\")\n                        message.sentTimeOffset = parseInt(object.sentTimeOffset, 10);\n                    else if (typeof object.sentTimeOffset === \"number\")\n                        message.sentTimeOffset = object.sentTimeOffset;\n                    else if (typeof object.sentTimeOffset === \"object\")\n                        message.sentTimeOffset = new $util.LongBits(object.sentTimeOffset.low >>> 0, object.sentTimeOffset.high >>> 0).toNumber(true);\n                if (object.sentTime != null) {\n                    if (typeof object.sentTime !== \"object\")\n                        throw TypeError(\".Trace.QueryPlanNode.FetchNode.sentTime: object expected\");\n                    message.sentTime = $root.google.protobuf.Timestamp.fromObject(object.sentTime);\n                }\n                if (object.receivedTime != null) {\n                    if (typeof object.receivedTime !== \"object\")\n                        throw TypeError(\".Trace.QueryPlanNode.FetchNode.receivedTime: object expected\");\n                    message.receivedTime = $root.google.protobuf.Timestamp.fromObject(object.receivedTime);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FetchNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @static\n             * @param {Trace.QueryPlanNode.FetchNode} message FetchNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FetchNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    object.serviceName = \"\";\n                    object.traceParsingFailed = false;\n                    object.trace = null;\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, true);\n                        object.sentTimeOffset = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.sentTimeOffset = options.longs === String ? \"0\" : 0;\n                    object.sentTime = null;\n                    object.receivedTime = null;\n                }\n                if (message.serviceName != null && message.hasOwnProperty(\"serviceName\"))\n                    object.serviceName = message.serviceName;\n                if (message.traceParsingFailed != null && message.hasOwnProperty(\"traceParsingFailed\"))\n                    object.traceParsingFailed = message.traceParsingFailed;\n                if (message.trace != null && message.hasOwnProperty(\"trace\"))\n                    object.trace = $root.Trace.toObject(message.trace, options);\n                if (message.sentTimeOffset != null && message.hasOwnProperty(\"sentTimeOffset\"))\n                    if (typeof message.sentTimeOffset === \"number\")\n                        object.sentTimeOffset = options.longs === String ? String(message.sentTimeOffset) : message.sentTimeOffset;\n                    else\n                        object.sentTimeOffset = options.longs === String ? $util.Long.prototype.toString.call(message.sentTimeOffset) : options.longs === Number ? new $util.LongBits(message.sentTimeOffset.low >>> 0, message.sentTimeOffset.high >>> 0).toNumber(true) : message.sentTimeOffset;\n                if (message.sentTime != null && message.hasOwnProperty(\"sentTime\"))\n                    object.sentTime = $root.google.protobuf.Timestamp.toObject(message.sentTime, options);\n                if (message.receivedTime != null && message.hasOwnProperty(\"receivedTime\"))\n                    object.receivedTime = $root.google.protobuf.Timestamp.toObject(message.receivedTime, options);\n                return object;\n            };\n\n            /**\n             * Converts this FetchNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FetchNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FetchNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FetchNode;\n        })();\n\n        QueryPlanNode.FlattenNode = (function() {\n\n            /**\n             * Properties of a FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @interface IFlattenNode\n             * @property {Array.<Trace.QueryPlanNode.IResponsePathElement>|null} [responsePath] FlattenNode responsePath\n             * @property {Trace.IQueryPlanNode|null} [node] FlattenNode node\n             */\n\n            /**\n             * Constructs a new FlattenNode.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a FlattenNode.\n             * @implements IFlattenNode\n             * @constructor\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             */\n            function FlattenNode(properties) {\n                this.responsePath = [];\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * FlattenNode responsePath.\n             * @member {Array.<Trace.QueryPlanNode.IResponsePathElement>} responsePath\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.responsePath = $util.emptyArray;\n\n            /**\n             * FlattenNode node.\n             * @member {Trace.IQueryPlanNode|null|undefined} node\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             */\n            FlattenNode.prototype.node = null;\n\n            /**\n             * Creates a new FlattenNode instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode instance\n             */\n            FlattenNode.create = function create(properties) {\n                return new FlattenNode(properties);\n            };\n\n            /**\n             * Encodes the specified FlattenNode message. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.responsePath != null && message.responsePath.length)\n                    for (var i = 0; i < message.responsePath.length; ++i)\n                        $root.Trace.QueryPlanNode.ResponsePathElement.encode(message.responsePath[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n                if (message.node != null && Object.hasOwnProperty.call(message, \"node\"))\n                    $root.Trace.QueryPlanNode.encode(message.node, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n                return writer;\n            };\n\n            /**\n             * Encodes the specified FlattenNode message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.FlattenNode.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.IFlattenNode} message FlattenNode message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            FlattenNode.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.FlattenNode();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        if (!(message.responsePath && message.responsePath.length))\n                            message.responsePath = [];\n                        message.responsePath.push($root.Trace.QueryPlanNode.ResponsePathElement.decode(reader, reader.uint32()));\n                        break;\n                    case 2:\n                        message.node = $root.Trace.QueryPlanNode.decode(reader, reader.uint32());\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a FlattenNode message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            FlattenNode.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a FlattenNode message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            FlattenNode.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.responsePath != null && message.hasOwnProperty(\"responsePath\")) {\n                    if (!Array.isArray(message.responsePath))\n                        return \"responsePath: array expected\";\n                    for (var i = 0; i < message.responsePath.length; ++i) {\n                        var error = $root.Trace.QueryPlanNode.ResponsePathElement.verify(message.responsePath[i]);\n                        if (error)\n                            return \"responsePath.\" + error;\n                    }\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\")) {\n                    var error = $root.Trace.QueryPlanNode.verify(message.node);\n                    if (error)\n                        return \"node.\" + error;\n                }\n                return null;\n            };\n\n            /**\n             * Creates a FlattenNode message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.FlattenNode} FlattenNode\n             */\n            FlattenNode.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.FlattenNode)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.FlattenNode();\n                if (object.responsePath) {\n                    if (!Array.isArray(object.responsePath))\n                        throw TypeError(\".Trace.QueryPlanNode.FlattenNode.responsePath: array expected\");\n                    message.responsePath = [];\n                    for (var i = 0; i < object.responsePath.length; ++i) {\n                        if (typeof object.responsePath[i] !== \"object\")\n                            throw TypeError(\".Trace.QueryPlanNode.FlattenNode.responsePath: object expected\");\n                        message.responsePath[i] = $root.Trace.QueryPlanNode.ResponsePathElement.fromObject(object.responsePath[i]);\n                    }\n                }\n                if (object.node != null) {\n                    if (typeof object.node !== \"object\")\n                        throw TypeError(\".Trace.QueryPlanNode.FlattenNode.node: object expected\");\n                    message.node = $root.Trace.QueryPlanNode.fromObject(object.node);\n                }\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a FlattenNode message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @static\n             * @param {Trace.QueryPlanNode.FlattenNode} message FlattenNode\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            FlattenNode.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.arrays || options.defaults)\n                    object.responsePath = [];\n                if (options.defaults)\n                    object.node = null;\n                if (message.responsePath && message.responsePath.length) {\n                    object.responsePath = [];\n                    for (var j = 0; j < message.responsePath.length; ++j)\n                        object.responsePath[j] = $root.Trace.QueryPlanNode.ResponsePathElement.toObject(message.responsePath[j], options);\n                }\n                if (message.node != null && message.hasOwnProperty(\"node\"))\n                    object.node = $root.Trace.QueryPlanNode.toObject(message.node, options);\n                return object;\n            };\n\n            /**\n             * Converts this FlattenNode to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.FlattenNode\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            FlattenNode.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return FlattenNode;\n        })();\n\n        QueryPlanNode.ResponsePathElement = (function() {\n\n            /**\n             * Properties of a ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @interface IResponsePathElement\n             * @property {string|null} [fieldName] ResponsePathElement fieldName\n             * @property {number|null} [index] ResponsePathElement index\n             */\n\n            /**\n             * Constructs a new ResponsePathElement.\n             * @memberof Trace.QueryPlanNode\n             * @classdesc Represents a ResponsePathElement.\n             * @implements IResponsePathElement\n             * @constructor\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             */\n            function ResponsePathElement(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * ResponsePathElement fieldName.\n             * @member {string} fieldName\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.fieldName = \"\";\n\n            /**\n             * ResponsePathElement index.\n             * @member {number} index\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            ResponsePathElement.prototype.index = 0;\n\n            // OneOf field names bound to virtual getters and setters\n            var $oneOfFields;\n\n            /**\n             * ResponsePathElement id.\n             * @member {\"fieldName\"|\"index\"|undefined} id\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             */\n            Object.defineProperty(ResponsePathElement.prototype, \"id\", {\n                get: $util.oneOfGetter($oneOfFields = [\"fieldName\", \"index\"]),\n                set: $util.oneOfSetter($oneOfFields)\n            });\n\n            /**\n             * Creates a new ResponsePathElement instance using the specified properties.\n             * @function create\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement=} [properties] Properties to set\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement instance\n             */\n            ResponsePathElement.create = function create(properties) {\n                return new ResponsePathElement(properties);\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.fieldName != null && Object.hasOwnProperty.call(message, \"fieldName\"))\n                    writer.uint32(/* id 1, wireType 2 =*/10).string(message.fieldName);\n                if (message.index != null && Object.hasOwnProperty.call(message, \"index\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).uint32(message.index);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified ResponsePathElement message, length delimited. Does not implicitly {@link Trace.QueryPlanNode.ResponsePathElement.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.IResponsePathElement} message ResponsePathElement message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            ResponsePathElement.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer.\n             * @function decode\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.fieldName = reader.string();\n                        break;\n                    case 2:\n                        message.index = reader.uint32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a ResponsePathElement message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            ResponsePathElement.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a ResponsePathElement message.\n             * @function verify\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            ResponsePathElement.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                var properties = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    properties.id = 1;\n                    if (!$util.isString(message.fieldName))\n                        return \"fieldName: string expected\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    if (properties.id === 1)\n                        return \"id: multiple values\";\n                    properties.id = 1;\n                    if (!$util.isInteger(message.index))\n                        return \"index: integer expected\";\n                }\n                return null;\n            };\n\n            /**\n             * Creates a ResponsePathElement message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {Trace.QueryPlanNode.ResponsePathElement} ResponsePathElement\n             */\n            ResponsePathElement.fromObject = function fromObject(object) {\n                if (object instanceof $root.Trace.QueryPlanNode.ResponsePathElement)\n                    return object;\n                var message = new $root.Trace.QueryPlanNode.ResponsePathElement();\n                if (object.fieldName != null)\n                    message.fieldName = String(object.fieldName);\n                if (object.index != null)\n                    message.index = object.index >>> 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a ResponsePathElement message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @static\n             * @param {Trace.QueryPlanNode.ResponsePathElement} message ResponsePathElement\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            ResponsePathElement.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (message.fieldName != null && message.hasOwnProperty(\"fieldName\")) {\n                    object.fieldName = message.fieldName;\n                    if (options.oneofs)\n                        object.id = \"fieldName\";\n                }\n                if (message.index != null && message.hasOwnProperty(\"index\")) {\n                    object.index = message.index;\n                    if (options.oneofs)\n                        object.id = \"index\";\n                }\n                return object;\n            };\n\n            /**\n             * Converts this ResponsePathElement to JSON.\n             * @function toJSON\n             * @memberof Trace.QueryPlanNode.ResponsePathElement\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            ResponsePathElement.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return ResponsePathElement;\n        })();\n\n        return QueryPlanNode;\n    })();\n\n    return Trace;\n})();\n\n$root.ReportHeader = (function() {\n\n    /**\n     * Properties of a ReportHeader.\n     * @exports IReportHeader\n     * @interface IReportHeader\n     * @property {string|null} [hostname] ReportHeader hostname\n     * @property {string|null} [agentVersion] ReportHeader agentVersion\n     * @property {string|null} [serviceVersion] ReportHeader serviceVersion\n     * @property {string|null} [runtimeVersion] ReportHeader runtimeVersion\n     * @property {string|null} [uname] ReportHeader uname\n     * @property {string|null} [schemaTag] ReportHeader schemaTag\n     * @property {string|null} [executableSchemaId] ReportHeader executableSchemaId\n     */\n\n    /**\n     * Constructs a new ReportHeader.\n     * @exports ReportHeader\n     * @classdesc Represents a ReportHeader.\n     * @implements IReportHeader\n     * @constructor\n     * @param {IReportHeader=} [properties] Properties to set\n     */\n    function ReportHeader(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ReportHeader hostname.\n     * @member {string} hostname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.hostname = \"\";\n\n    /**\n     * ReportHeader agentVersion.\n     * @member {string} agentVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.agentVersion = \"\";\n\n    /**\n     * ReportHeader serviceVersion.\n     * @member {string} serviceVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.serviceVersion = \"\";\n\n    /**\n     * ReportHeader runtimeVersion.\n     * @member {string} runtimeVersion\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.runtimeVersion = \"\";\n\n    /**\n     * ReportHeader uname.\n     * @member {string} uname\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.uname = \"\";\n\n    /**\n     * ReportHeader schemaTag.\n     * @member {string} schemaTag\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.schemaTag = \"\";\n\n    /**\n     * ReportHeader executableSchemaId.\n     * @member {string} executableSchemaId\n     * @memberof ReportHeader\n     * @instance\n     */\n    ReportHeader.prototype.executableSchemaId = \"\";\n\n    /**\n     * Creates a new ReportHeader instance using the specified properties.\n     * @function create\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader=} [properties] Properties to set\n     * @returns {ReportHeader} ReportHeader instance\n     */\n    ReportHeader.create = function create(properties) {\n        return new ReportHeader(properties);\n    };\n\n    /**\n     * Encodes the specified ReportHeader message. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encode\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.hostname != null && Object.hasOwnProperty.call(message, \"hostname\"))\n            writer.uint32(/* id 5, wireType 2 =*/42).string(message.hostname);\n        if (message.agentVersion != null && Object.hasOwnProperty.call(message, \"agentVersion\"))\n            writer.uint32(/* id 6, wireType 2 =*/50).string(message.agentVersion);\n        if (message.serviceVersion != null && Object.hasOwnProperty.call(message, \"serviceVersion\"))\n            writer.uint32(/* id 7, wireType 2 =*/58).string(message.serviceVersion);\n        if (message.runtimeVersion != null && Object.hasOwnProperty.call(message, \"runtimeVersion\"))\n            writer.uint32(/* id 8, wireType 2 =*/66).string(message.runtimeVersion);\n        if (message.uname != null && Object.hasOwnProperty.call(message, \"uname\"))\n            writer.uint32(/* id 9, wireType 2 =*/74).string(message.uname);\n        if (message.schemaTag != null && Object.hasOwnProperty.call(message, \"schemaTag\"))\n            writer.uint32(/* id 10, wireType 2 =*/82).string(message.schemaTag);\n        if (message.executableSchemaId != null && Object.hasOwnProperty.call(message, \"executableSchemaId\"))\n            writer.uint32(/* id 11, wireType 2 =*/90).string(message.executableSchemaId);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ReportHeader message, length delimited. Does not implicitly {@link ReportHeader.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {IReportHeader} message ReportHeader message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ReportHeader.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer.\n     * @function decode\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ReportHeader();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 5:\n                message.hostname = reader.string();\n                break;\n            case 6:\n                message.agentVersion = reader.string();\n                break;\n            case 7:\n                message.serviceVersion = reader.string();\n                break;\n            case 8:\n                message.runtimeVersion = reader.string();\n                break;\n            case 9:\n                message.uname = reader.string();\n                break;\n            case 10:\n                message.schemaTag = reader.string();\n                break;\n            case 11:\n                message.executableSchemaId = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ReportHeader message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ReportHeader\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ReportHeader} ReportHeader\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ReportHeader.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ReportHeader message.\n     * @function verify\n     * @memberof ReportHeader\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ReportHeader.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            if (!$util.isString(message.hostname))\n                return \"hostname: string expected\";\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            if (!$util.isString(message.agentVersion))\n                return \"agentVersion: string expected\";\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            if (!$util.isString(message.serviceVersion))\n                return \"serviceVersion: string expected\";\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            if (!$util.isString(message.runtimeVersion))\n                return \"runtimeVersion: string expected\";\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            if (!$util.isString(message.uname))\n                return \"uname: string expected\";\n        if (message.schemaTag != null && message.hasOwnProperty(\"schemaTag\"))\n            if (!$util.isString(message.schemaTag))\n                return \"schemaTag: string expected\";\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            if (!$util.isString(message.executableSchemaId))\n                return \"executableSchemaId: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a ReportHeader message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ReportHeader\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ReportHeader} ReportHeader\n     */\n    ReportHeader.fromObject = function fromObject(object) {\n        if (object instanceof $root.ReportHeader)\n            return object;\n        var message = new $root.ReportHeader();\n        if (object.hostname != null)\n            message.hostname = String(object.hostname);\n        if (object.agentVersion != null)\n            message.agentVersion = String(object.agentVersion);\n        if (object.serviceVersion != null)\n            message.serviceVersion = String(object.serviceVersion);\n        if (object.runtimeVersion != null)\n            message.runtimeVersion = String(object.runtimeVersion);\n        if (object.uname != null)\n            message.uname = String(object.uname);\n        if (object.schemaTag != null)\n            message.schemaTag = String(object.schemaTag);\n        if (object.executableSchemaId != null)\n            message.executableSchemaId = String(object.executableSchemaId);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ReportHeader message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ReportHeader\n     * @static\n     * @param {ReportHeader} message ReportHeader\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ReportHeader.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.hostname = \"\";\n            object.agentVersion = \"\";\n            object.serviceVersion = \"\";\n            object.runtimeVersion = \"\";\n            object.uname = \"\";\n            object.schemaTag = \"\";\n            object.executableSchemaId = \"\";\n        }\n        if (message.hostname != null && message.hasOwnProperty(\"hostname\"))\n            object.hostname = message.hostname;\n        if (message.agentVersion != null && message.hasOwnProperty(\"agentVersion\"))\n            object.agentVersion = message.agentVersion;\n        if (message.serviceVersion != null && message.hasOwnProperty(\"serviceVersion\"))\n            object.serviceVersion = message.serviceVersion;\n        if (message.runtimeVersion != null && message.hasOwnProperty(\"runtimeVersion\"))\n            object.runtimeVersion = message.runtimeVersion;\n        if (message.uname != null && message.hasOwnProperty(\"uname\"))\n            object.uname = message.uname;\n        if (message.schemaTag != null && message.hasOwnProperty(\"schemaTag\"))\n            object.schemaTag = message.schemaTag;\n        if (message.executableSchemaId != null && message.hasOwnProperty(\"executableSchemaId\"))\n            object.executableSchemaId = message.executableSchemaId;\n        return object;\n    };\n\n    /**\n     * Converts this ReportHeader to JSON.\n     * @function toJSON\n     * @memberof ReportHeader\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ReportHeader.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ReportHeader;\n})();\n\n$root.PathErrorStats = (function() {\n\n    /**\n     * Properties of a PathErrorStats.\n     * @exports IPathErrorStats\n     * @interface IPathErrorStats\n     * @property {Object.<string,IPathErrorStats>|null} [children] PathErrorStats children\n     * @property {number|null} [errorsCount] PathErrorStats errorsCount\n     * @property {number|null} [requestsWithErrorsCount] PathErrorStats requestsWithErrorsCount\n     */\n\n    /**\n     * Constructs a new PathErrorStats.\n     * @exports PathErrorStats\n     * @classdesc Represents a PathErrorStats.\n     * @implements IPathErrorStats\n     * @constructor\n     * @param {IPathErrorStats=} [properties] Properties to set\n     */\n    function PathErrorStats(properties) {\n        this.children = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * PathErrorStats children.\n     * @member {Object.<string,IPathErrorStats>} children\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.children = $util.emptyObject;\n\n    /**\n     * PathErrorStats errorsCount.\n     * @member {number} errorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * PathErrorStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof PathErrorStats\n     * @instance\n     */\n    PathErrorStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new PathErrorStats instance using the specified properties.\n     * @function create\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats=} [properties] Properties to set\n     * @returns {PathErrorStats} PathErrorStats instance\n     */\n    PathErrorStats.create = function create(properties) {\n        return new PathErrorStats(properties);\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encode\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.children != null && Object.hasOwnProperty.call(message, \"children\"))\n            for (var keys = Object.keys(message.children), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 1, wireType 2 =*/10).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.PathErrorStats.encode(message.children[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.requestsWithErrorsCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified PathErrorStats message, length delimited. Does not implicitly {@link PathErrorStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {IPathErrorStats} message PathErrorStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    PathErrorStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.PathErrorStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                reader.skip().pos++;\n                if (message.children === $util.emptyObject)\n                    message.children = {};\n                key = reader.string();\n                reader.pos++;\n                message.children[key] = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a PathErrorStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof PathErrorStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {PathErrorStats} PathErrorStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    PathErrorStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a PathErrorStats message.\n     * @function verify\n     * @memberof PathErrorStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    PathErrorStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.children != null && message.hasOwnProperty(\"children\")) {\n            if (!$util.isObject(message.children))\n                return \"children: object expected\";\n            var key = Object.keys(message.children);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.PathErrorStats.verify(message.children[key[i]]);\n                if (error)\n                    return \"children.\" + error;\n            }\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a PathErrorStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof PathErrorStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {PathErrorStats} PathErrorStats\n     */\n    PathErrorStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.PathErrorStats)\n            return object;\n        var message = new $root.PathErrorStats();\n        if (object.children) {\n            if (typeof object.children !== \"object\")\n                throw TypeError(\".PathErrorStats.children: object expected\");\n            message.children = {};\n            for (var keys = Object.keys(object.children), i = 0; i < keys.length; ++i) {\n                if (typeof object.children[keys[i]] !== \"object\")\n                    throw TypeError(\".PathErrorStats.children: object expected\");\n                message.children[keys[i]] = $root.PathErrorStats.fromObject(object.children[keys[i]]);\n            }\n        }\n        if (object.errorsCount != null)\n            if ($util.Long)\n                (message.errorsCount = $util.Long.fromValue(object.errorsCount)).unsigned = true;\n            else if (typeof object.errorsCount === \"string\")\n                message.errorsCount = parseInt(object.errorsCount, 10);\n            else if (typeof object.errorsCount === \"number\")\n                message.errorsCount = object.errorsCount;\n            else if (typeof object.errorsCount === \"object\")\n                message.errorsCount = new $util.LongBits(object.errorsCount.low >>> 0, object.errorsCount.high >>> 0).toNumber(true);\n        if (object.requestsWithErrorsCount != null)\n            if ($util.Long)\n                (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;\n            else if (typeof object.requestsWithErrorsCount === \"string\")\n                message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);\n            else if (typeof object.requestsWithErrorsCount === \"number\")\n                message.requestsWithErrorsCount = object.requestsWithErrorsCount;\n            else if (typeof object.requestsWithErrorsCount === \"object\")\n                message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a PathErrorStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof PathErrorStats\n     * @static\n     * @param {PathErrorStats} message PathErrorStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    PathErrorStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.children = {};\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.errorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n        }\n        var keys2;\n        if (message.children && (keys2 = Object.keys(message.children)).length) {\n            object.children = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.children[keys2[j]] = $root.PathErrorStats.toObject(message.children[keys2[j]], options);\n        }\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        return object;\n    };\n\n    /**\n     * Converts this PathErrorStats to JSON.\n     * @function toJSON\n     * @memberof PathErrorStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    PathErrorStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return PathErrorStats;\n})();\n\n$root.QueryLatencyStats = (function() {\n\n    /**\n     * Properties of a QueryLatencyStats.\n     * @exports IQueryLatencyStats\n     * @interface IQueryLatencyStats\n     * @property {Array.<number>|null} [latencyCount] QueryLatencyStats latencyCount\n     * @property {number|null} [requestCount] QueryLatencyStats requestCount\n     * @property {number|null} [cacheHits] QueryLatencyStats cacheHits\n     * @property {number|null} [persistedQueryHits] QueryLatencyStats persistedQueryHits\n     * @property {number|null} [persistedQueryMisses] QueryLatencyStats persistedQueryMisses\n     * @property {Array.<number>|null} [cacheLatencyCount] QueryLatencyStats cacheLatencyCount\n     * @property {IPathErrorStats|null} [rootErrorStats] QueryLatencyStats rootErrorStats\n     * @property {number|null} [requestsWithErrorsCount] QueryLatencyStats requestsWithErrorsCount\n     * @property {Array.<number>|null} [publicCacheTtlCount] QueryLatencyStats publicCacheTtlCount\n     * @property {Array.<number>|null} [privateCacheTtlCount] QueryLatencyStats privateCacheTtlCount\n     * @property {number|null} [registeredOperationCount] QueryLatencyStats registeredOperationCount\n     * @property {number|null} [forbiddenOperationCount] QueryLatencyStats forbiddenOperationCount\n     */\n\n    /**\n     * Constructs a new QueryLatencyStats.\n     * @exports QueryLatencyStats\n     * @classdesc Represents a QueryLatencyStats.\n     * @implements IQueryLatencyStats\n     * @constructor\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     */\n    function QueryLatencyStats(properties) {\n        this.latencyCount = [];\n        this.cacheLatencyCount = [];\n        this.publicCacheTtlCount = [];\n        this.privateCacheTtlCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * QueryLatencyStats latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats requestCount.\n     * @member {number} requestCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats cacheHits.\n     * @member {number} cacheHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheHits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats persistedQueryHits.\n     * @member {number} persistedQueryHits\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryHits = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats persistedQueryMisses.\n     * @member {number} persistedQueryMisses\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.persistedQueryMisses = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats cacheLatencyCount.\n     * @member {Array.<number>} cacheLatencyCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.cacheLatencyCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats rootErrorStats.\n     * @member {IPathErrorStats|null|undefined} rootErrorStats\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.rootErrorStats = null;\n\n    /**\n     * QueryLatencyStats requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats publicCacheTtlCount.\n     * @member {Array.<number>} publicCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.publicCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats privateCacheTtlCount.\n     * @member {Array.<number>} privateCacheTtlCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.privateCacheTtlCount = $util.emptyArray;\n\n    /**\n     * QueryLatencyStats registeredOperationCount.\n     * @member {number} registeredOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.registeredOperationCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * QueryLatencyStats forbiddenOperationCount.\n     * @member {number} forbiddenOperationCount\n     * @memberof QueryLatencyStats\n     * @instance\n     */\n    QueryLatencyStats.prototype.forbiddenOperationCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * Creates a new QueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats=} [properties] Properties to set\n     * @returns {QueryLatencyStats} QueryLatencyStats instance\n     */\n    QueryLatencyStats.create = function create(properties) {\n        return new QueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.latencyCount != null && message.latencyCount.length) {\n            writer.uint32(/* id 1, wireType 2 =*/10).fork();\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                writer.int64(message.latencyCount[i]);\n            writer.ldelim();\n        }\n        if (message.requestCount != null && Object.hasOwnProperty.call(message, \"requestCount\"))\n            writer.uint32(/* id 2, wireType 0 =*/16).uint64(message.requestCount);\n        if (message.cacheHits != null && Object.hasOwnProperty.call(message, \"cacheHits\"))\n            writer.uint32(/* id 3, wireType 0 =*/24).uint64(message.cacheHits);\n        if (message.persistedQueryHits != null && Object.hasOwnProperty.call(message, \"persistedQueryHits\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.persistedQueryHits);\n        if (message.persistedQueryMisses != null && Object.hasOwnProperty.call(message, \"persistedQueryMisses\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.persistedQueryMisses);\n        if (message.cacheLatencyCount != null && message.cacheLatencyCount.length) {\n            writer.uint32(/* id 6, wireType 2 =*/50).fork();\n            for (var i = 0; i < message.cacheLatencyCount.length; ++i)\n                writer.int64(message.cacheLatencyCount[i]);\n            writer.ldelim();\n        }\n        if (message.rootErrorStats != null && Object.hasOwnProperty.call(message, \"rootErrorStats\"))\n            $root.PathErrorStats.encode(message.rootErrorStats, writer.uint32(/* id 7, wireType 2 =*/58).fork()).ldelim();\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 8, wireType 0 =*/64).uint64(message.requestsWithErrorsCount);\n        if (message.publicCacheTtlCount != null && message.publicCacheTtlCount.length) {\n            writer.uint32(/* id 9, wireType 2 =*/74).fork();\n            for (var i = 0; i < message.publicCacheTtlCount.length; ++i)\n                writer.int64(message.publicCacheTtlCount[i]);\n            writer.ldelim();\n        }\n        if (message.privateCacheTtlCount != null && message.privateCacheTtlCount.length) {\n            writer.uint32(/* id 10, wireType 2 =*/82).fork();\n            for (var i = 0; i < message.privateCacheTtlCount.length; ++i)\n                writer.int64(message.privateCacheTtlCount[i]);\n            writer.ldelim();\n        }\n        if (message.registeredOperationCount != null && Object.hasOwnProperty.call(message, \"registeredOperationCount\"))\n            writer.uint32(/* id 11, wireType 0 =*/88).uint64(message.registeredOperationCount);\n        if (message.forbiddenOperationCount != null && Object.hasOwnProperty.call(message, \"forbiddenOperationCount\"))\n            writer.uint32(/* id 12, wireType 0 =*/96).uint64(message.forbiddenOperationCount);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified QueryLatencyStats message, length delimited. Does not implicitly {@link QueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {IQueryLatencyStats} message QueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    QueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.QueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.int64());\n                } else\n                    message.latencyCount.push(reader.int64());\n                break;\n            case 2:\n                message.requestCount = reader.uint64();\n                break;\n            case 3:\n                message.cacheHits = reader.uint64();\n                break;\n            case 4:\n                message.persistedQueryHits = reader.uint64();\n                break;\n            case 5:\n                message.persistedQueryMisses = reader.uint64();\n                break;\n            case 6:\n                if (!(message.cacheLatencyCount && message.cacheLatencyCount.length))\n                    message.cacheLatencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.cacheLatencyCount.push(reader.int64());\n                } else\n                    message.cacheLatencyCount.push(reader.int64());\n                break;\n            case 7:\n                message.rootErrorStats = $root.PathErrorStats.decode(reader, reader.uint32());\n                break;\n            case 8:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 9:\n                if (!(message.publicCacheTtlCount && message.publicCacheTtlCount.length))\n                    message.publicCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.publicCacheTtlCount.push(reader.int64());\n                } else\n                    message.publicCacheTtlCount.push(reader.int64());\n                break;\n            case 10:\n                if (!(message.privateCacheTtlCount && message.privateCacheTtlCount.length))\n                    message.privateCacheTtlCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.privateCacheTtlCount.push(reader.int64());\n                } else\n                    message.privateCacheTtlCount.push(reader.int64());\n                break;\n            case 11:\n                message.registeredOperationCount = reader.uint64();\n                break;\n            case 12:\n                message.forbiddenOperationCount = reader.uint64();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a QueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    QueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a QueryLatencyStats message.\n     * @function verify\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    QueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            if (!Array.isArray(message.latencyCount))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (!$util.isInteger(message.requestCount) && !(message.requestCount && $util.isInteger(message.requestCount.low) && $util.isInteger(message.requestCount.high)))\n                return \"requestCount: integer|Long expected\";\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (!$util.isInteger(message.cacheHits) && !(message.cacheHits && $util.isInteger(message.cacheHits.low) && $util.isInteger(message.cacheHits.high)))\n                return \"cacheHits: integer|Long expected\";\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (!$util.isInteger(message.persistedQueryHits) && !(message.persistedQueryHits && $util.isInteger(message.persistedQueryHits.low) && $util.isInteger(message.persistedQueryHits.high)))\n                return \"persistedQueryHits: integer|Long expected\";\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (!$util.isInteger(message.persistedQueryMisses) && !(message.persistedQueryMisses && $util.isInteger(message.persistedQueryMisses.low) && $util.isInteger(message.persistedQueryMisses.high)))\n                return \"persistedQueryMisses: integer|Long expected\";\n        if (message.cacheLatencyCount != null && message.hasOwnProperty(\"cacheLatencyCount\")) {\n            if (!Array.isArray(message.cacheLatencyCount))\n                return \"cacheLatencyCount: array expected\";\n            for (var i = 0; i < message.cacheLatencyCount.length; ++i)\n                if (!$util.isInteger(message.cacheLatencyCount[i]) && !(message.cacheLatencyCount[i] && $util.isInteger(message.cacheLatencyCount[i].low) && $util.isInteger(message.cacheLatencyCount[i].high)))\n                    return \"cacheLatencyCount: integer|Long[] expected\";\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\")) {\n            var error = $root.PathErrorStats.verify(message.rootErrorStats);\n            if (error)\n                return \"rootErrorStats.\" + error;\n        }\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.publicCacheTtlCount != null && message.hasOwnProperty(\"publicCacheTtlCount\")) {\n            if (!Array.isArray(message.publicCacheTtlCount))\n                return \"publicCacheTtlCount: array expected\";\n            for (var i = 0; i < message.publicCacheTtlCount.length; ++i)\n                if (!$util.isInteger(message.publicCacheTtlCount[i]) && !(message.publicCacheTtlCount[i] && $util.isInteger(message.publicCacheTtlCount[i].low) && $util.isInteger(message.publicCacheTtlCount[i].high)))\n                    return \"publicCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.privateCacheTtlCount != null && message.hasOwnProperty(\"privateCacheTtlCount\")) {\n            if (!Array.isArray(message.privateCacheTtlCount))\n                return \"privateCacheTtlCount: array expected\";\n            for (var i = 0; i < message.privateCacheTtlCount.length; ++i)\n                if (!$util.isInteger(message.privateCacheTtlCount[i]) && !(message.privateCacheTtlCount[i] && $util.isInteger(message.privateCacheTtlCount[i].low) && $util.isInteger(message.privateCacheTtlCount[i].high)))\n                    return \"privateCacheTtlCount: integer|Long[] expected\";\n        }\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (!$util.isInteger(message.registeredOperationCount) && !(message.registeredOperationCount && $util.isInteger(message.registeredOperationCount.low) && $util.isInteger(message.registeredOperationCount.high)))\n                return \"registeredOperationCount: integer|Long expected\";\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (!$util.isInteger(message.forbiddenOperationCount) && !(message.forbiddenOperationCount && $util.isInteger(message.forbiddenOperationCount.low) && $util.isInteger(message.forbiddenOperationCount.high)))\n                return \"forbiddenOperationCount: integer|Long expected\";\n        return null;\n    };\n\n    /**\n     * Creates a QueryLatencyStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {QueryLatencyStats} QueryLatencyStats\n     */\n    QueryLatencyStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.QueryLatencyStats)\n            return object;\n        var message = new $root.QueryLatencyStats();\n        if (object.latencyCount) {\n            if (!Array.isArray(object.latencyCount))\n                throw TypeError(\".QueryLatencyStats.latencyCount: array expected\");\n            message.latencyCount = [];\n            for (var i = 0; i < object.latencyCount.length; ++i)\n                if ($util.Long)\n                    (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;\n                else if (typeof object.latencyCount[i] === \"string\")\n                    message.latencyCount[i] = parseInt(object.latencyCount[i], 10);\n                else if (typeof object.latencyCount[i] === \"number\")\n                    message.latencyCount[i] = object.latencyCount[i];\n                else if (typeof object.latencyCount[i] === \"object\")\n                    message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n        }\n        if (object.requestCount != null)\n            if ($util.Long)\n                (message.requestCount = $util.Long.fromValue(object.requestCount)).unsigned = true;\n            else if (typeof object.requestCount === \"string\")\n                message.requestCount = parseInt(object.requestCount, 10);\n            else if (typeof object.requestCount === \"number\")\n                message.requestCount = object.requestCount;\n            else if (typeof object.requestCount === \"object\")\n                message.requestCount = new $util.LongBits(object.requestCount.low >>> 0, object.requestCount.high >>> 0).toNumber(true);\n        if (object.cacheHits != null)\n            if ($util.Long)\n                (message.cacheHits = $util.Long.fromValue(object.cacheHits)).unsigned = true;\n            else if (typeof object.cacheHits === \"string\")\n                message.cacheHits = parseInt(object.cacheHits, 10);\n            else if (typeof object.cacheHits === \"number\")\n                message.cacheHits = object.cacheHits;\n            else if (typeof object.cacheHits === \"object\")\n                message.cacheHits = new $util.LongBits(object.cacheHits.low >>> 0, object.cacheHits.high >>> 0).toNumber(true);\n        if (object.persistedQueryHits != null)\n            if ($util.Long)\n                (message.persistedQueryHits = $util.Long.fromValue(object.persistedQueryHits)).unsigned = true;\n            else if (typeof object.persistedQueryHits === \"string\")\n                message.persistedQueryHits = parseInt(object.persistedQueryHits, 10);\n            else if (typeof object.persistedQueryHits === \"number\")\n                message.persistedQueryHits = object.persistedQueryHits;\n            else if (typeof object.persistedQueryHits === \"object\")\n                message.persistedQueryHits = new $util.LongBits(object.persistedQueryHits.low >>> 0, object.persistedQueryHits.high >>> 0).toNumber(true);\n        if (object.persistedQueryMisses != null)\n            if ($util.Long)\n                (message.persistedQueryMisses = $util.Long.fromValue(object.persistedQueryMisses)).unsigned = true;\n            else if (typeof object.persistedQueryMisses === \"string\")\n                message.persistedQueryMisses = parseInt(object.persistedQueryMisses, 10);\n            else if (typeof object.persistedQueryMisses === \"number\")\n                message.persistedQueryMisses = object.persistedQueryMisses;\n            else if (typeof object.persistedQueryMisses === \"object\")\n                message.persistedQueryMisses = new $util.LongBits(object.persistedQueryMisses.low >>> 0, object.persistedQueryMisses.high >>> 0).toNumber(true);\n        if (object.cacheLatencyCount) {\n            if (!Array.isArray(object.cacheLatencyCount))\n                throw TypeError(\".QueryLatencyStats.cacheLatencyCount: array expected\");\n            message.cacheLatencyCount = [];\n            for (var i = 0; i < object.cacheLatencyCount.length; ++i)\n                if ($util.Long)\n                    (message.cacheLatencyCount[i] = $util.Long.fromValue(object.cacheLatencyCount[i])).unsigned = false;\n                else if (typeof object.cacheLatencyCount[i] === \"string\")\n                    message.cacheLatencyCount[i] = parseInt(object.cacheLatencyCount[i], 10);\n                else if (typeof object.cacheLatencyCount[i] === \"number\")\n                    message.cacheLatencyCount[i] = object.cacheLatencyCount[i];\n                else if (typeof object.cacheLatencyCount[i] === \"object\")\n                    message.cacheLatencyCount[i] = new $util.LongBits(object.cacheLatencyCount[i].low >>> 0, object.cacheLatencyCount[i].high >>> 0).toNumber();\n        }\n        if (object.rootErrorStats != null) {\n            if (typeof object.rootErrorStats !== \"object\")\n                throw TypeError(\".QueryLatencyStats.rootErrorStats: object expected\");\n            message.rootErrorStats = $root.PathErrorStats.fromObject(object.rootErrorStats);\n        }\n        if (object.requestsWithErrorsCount != null)\n            if ($util.Long)\n                (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;\n            else if (typeof object.requestsWithErrorsCount === \"string\")\n                message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);\n            else if (typeof object.requestsWithErrorsCount === \"number\")\n                message.requestsWithErrorsCount = object.requestsWithErrorsCount;\n            else if (typeof object.requestsWithErrorsCount === \"object\")\n                message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n        if (object.publicCacheTtlCount) {\n            if (!Array.isArray(object.publicCacheTtlCount))\n                throw TypeError(\".QueryLatencyStats.publicCacheTtlCount: array expected\");\n            message.publicCacheTtlCount = [];\n            for (var i = 0; i < object.publicCacheTtlCount.length; ++i)\n                if ($util.Long)\n                    (message.publicCacheTtlCount[i] = $util.Long.fromValue(object.publicCacheTtlCount[i])).unsigned = false;\n                else if (typeof object.publicCacheTtlCount[i] === \"string\")\n                    message.publicCacheTtlCount[i] = parseInt(object.publicCacheTtlCount[i], 10);\n                else if (typeof object.publicCacheTtlCount[i] === \"number\")\n                    message.publicCacheTtlCount[i] = object.publicCacheTtlCount[i];\n                else if (typeof object.publicCacheTtlCount[i] === \"object\")\n                    message.publicCacheTtlCount[i] = new $util.LongBits(object.publicCacheTtlCount[i].low >>> 0, object.publicCacheTtlCount[i].high >>> 0).toNumber();\n        }\n        if (object.privateCacheTtlCount) {\n            if (!Array.isArray(object.privateCacheTtlCount))\n                throw TypeError(\".QueryLatencyStats.privateCacheTtlCount: array expected\");\n            message.privateCacheTtlCount = [];\n            for (var i = 0; i < object.privateCacheTtlCount.length; ++i)\n                if ($util.Long)\n                    (message.privateCacheTtlCount[i] = $util.Long.fromValue(object.privateCacheTtlCount[i])).unsigned = false;\n                else if (typeof object.privateCacheTtlCount[i] === \"string\")\n                    message.privateCacheTtlCount[i] = parseInt(object.privateCacheTtlCount[i], 10);\n                else if (typeof object.privateCacheTtlCount[i] === \"number\")\n                    message.privateCacheTtlCount[i] = object.privateCacheTtlCount[i];\n                else if (typeof object.privateCacheTtlCount[i] === \"object\")\n                    message.privateCacheTtlCount[i] = new $util.LongBits(object.privateCacheTtlCount[i].low >>> 0, object.privateCacheTtlCount[i].high >>> 0).toNumber();\n        }\n        if (object.registeredOperationCount != null)\n            if ($util.Long)\n                (message.registeredOperationCount = $util.Long.fromValue(object.registeredOperationCount)).unsigned = true;\n            else if (typeof object.registeredOperationCount === \"string\")\n                message.registeredOperationCount = parseInt(object.registeredOperationCount, 10);\n            else if (typeof object.registeredOperationCount === \"number\")\n                message.registeredOperationCount = object.registeredOperationCount;\n            else if (typeof object.registeredOperationCount === \"object\")\n                message.registeredOperationCount = new $util.LongBits(object.registeredOperationCount.low >>> 0, object.registeredOperationCount.high >>> 0).toNumber(true);\n        if (object.forbiddenOperationCount != null)\n            if ($util.Long)\n                (message.forbiddenOperationCount = $util.Long.fromValue(object.forbiddenOperationCount)).unsigned = true;\n            else if (typeof object.forbiddenOperationCount === \"string\")\n                message.forbiddenOperationCount = parseInt(object.forbiddenOperationCount, 10);\n            else if (typeof object.forbiddenOperationCount === \"number\")\n                message.forbiddenOperationCount = object.forbiddenOperationCount;\n            else if (typeof object.forbiddenOperationCount === \"object\")\n                message.forbiddenOperationCount = new $util.LongBits(object.forbiddenOperationCount.low >>> 0, object.forbiddenOperationCount.high >>> 0).toNumber(true);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a QueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof QueryLatencyStats\n     * @static\n     * @param {QueryLatencyStats} message QueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    QueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.latencyCount = [];\n            object.cacheLatencyCount = [];\n            object.publicCacheTtlCount = [];\n            object.privateCacheTtlCount = [];\n        }\n        if (options.defaults) {\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.cacheHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.cacheHits = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.persistedQueryHits = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.persistedQueryHits = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.persistedQueryMisses = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.persistedQueryMisses = options.longs === String ? \"0\" : 0;\n            object.rootErrorStats = null;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.registeredOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.registeredOperationCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.forbiddenOperationCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.forbiddenOperationCount = options.longs === String ? \"0\" : 0;\n        }\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        if (message.requestCount != null && message.hasOwnProperty(\"requestCount\"))\n            if (typeof message.requestCount === \"number\")\n                object.requestCount = options.longs === String ? String(message.requestCount) : message.requestCount;\n            else\n                object.requestCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestCount) : options.longs === Number ? new $util.LongBits(message.requestCount.low >>> 0, message.requestCount.high >>> 0).toNumber(true) : message.requestCount;\n        if (message.cacheHits != null && message.hasOwnProperty(\"cacheHits\"))\n            if (typeof message.cacheHits === \"number\")\n                object.cacheHits = options.longs === String ? String(message.cacheHits) : message.cacheHits;\n            else\n                object.cacheHits = options.longs === String ? $util.Long.prototype.toString.call(message.cacheHits) : options.longs === Number ? new $util.LongBits(message.cacheHits.low >>> 0, message.cacheHits.high >>> 0).toNumber(true) : message.cacheHits;\n        if (message.persistedQueryHits != null && message.hasOwnProperty(\"persistedQueryHits\"))\n            if (typeof message.persistedQueryHits === \"number\")\n                object.persistedQueryHits = options.longs === String ? String(message.persistedQueryHits) : message.persistedQueryHits;\n            else\n                object.persistedQueryHits = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryHits) : options.longs === Number ? new $util.LongBits(message.persistedQueryHits.low >>> 0, message.persistedQueryHits.high >>> 0).toNumber(true) : message.persistedQueryHits;\n        if (message.persistedQueryMisses != null && message.hasOwnProperty(\"persistedQueryMisses\"))\n            if (typeof message.persistedQueryMisses === \"number\")\n                object.persistedQueryMisses = options.longs === String ? String(message.persistedQueryMisses) : message.persistedQueryMisses;\n            else\n                object.persistedQueryMisses = options.longs === String ? $util.Long.prototype.toString.call(message.persistedQueryMisses) : options.longs === Number ? new $util.LongBits(message.persistedQueryMisses.low >>> 0, message.persistedQueryMisses.high >>> 0).toNumber(true) : message.persistedQueryMisses;\n        if (message.cacheLatencyCount && message.cacheLatencyCount.length) {\n            object.cacheLatencyCount = [];\n            for (var j = 0; j < message.cacheLatencyCount.length; ++j)\n                if (typeof message.cacheLatencyCount[j] === \"number\")\n                    object.cacheLatencyCount[j] = options.longs === String ? String(message.cacheLatencyCount[j]) : message.cacheLatencyCount[j];\n                else\n                    object.cacheLatencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.cacheLatencyCount[j]) : options.longs === Number ? new $util.LongBits(message.cacheLatencyCount[j].low >>> 0, message.cacheLatencyCount[j].high >>> 0).toNumber() : message.cacheLatencyCount[j];\n        }\n        if (message.rootErrorStats != null && message.hasOwnProperty(\"rootErrorStats\"))\n            object.rootErrorStats = $root.PathErrorStats.toObject(message.rootErrorStats, options);\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.publicCacheTtlCount && message.publicCacheTtlCount.length) {\n            object.publicCacheTtlCount = [];\n            for (var j = 0; j < message.publicCacheTtlCount.length; ++j)\n                if (typeof message.publicCacheTtlCount[j] === \"number\")\n                    object.publicCacheTtlCount[j] = options.longs === String ? String(message.publicCacheTtlCount[j]) : message.publicCacheTtlCount[j];\n                else\n                    object.publicCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.publicCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.publicCacheTtlCount[j].low >>> 0, message.publicCacheTtlCount[j].high >>> 0).toNumber() : message.publicCacheTtlCount[j];\n        }\n        if (message.privateCacheTtlCount && message.privateCacheTtlCount.length) {\n            object.privateCacheTtlCount = [];\n            for (var j = 0; j < message.privateCacheTtlCount.length; ++j)\n                if (typeof message.privateCacheTtlCount[j] === \"number\")\n                    object.privateCacheTtlCount[j] = options.longs === String ? String(message.privateCacheTtlCount[j]) : message.privateCacheTtlCount[j];\n                else\n                    object.privateCacheTtlCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.privateCacheTtlCount[j]) : options.longs === Number ? new $util.LongBits(message.privateCacheTtlCount[j].low >>> 0, message.privateCacheTtlCount[j].high >>> 0).toNumber() : message.privateCacheTtlCount[j];\n        }\n        if (message.registeredOperationCount != null && message.hasOwnProperty(\"registeredOperationCount\"))\n            if (typeof message.registeredOperationCount === \"number\")\n                object.registeredOperationCount = options.longs === String ? String(message.registeredOperationCount) : message.registeredOperationCount;\n            else\n                object.registeredOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.registeredOperationCount) : options.longs === Number ? new $util.LongBits(message.registeredOperationCount.low >>> 0, message.registeredOperationCount.high >>> 0).toNumber(true) : message.registeredOperationCount;\n        if (message.forbiddenOperationCount != null && message.hasOwnProperty(\"forbiddenOperationCount\"))\n            if (typeof message.forbiddenOperationCount === \"number\")\n                object.forbiddenOperationCount = options.longs === String ? String(message.forbiddenOperationCount) : message.forbiddenOperationCount;\n            else\n                object.forbiddenOperationCount = options.longs === String ? $util.Long.prototype.toString.call(message.forbiddenOperationCount) : options.longs === Number ? new $util.LongBits(message.forbiddenOperationCount.low >>> 0, message.forbiddenOperationCount.high >>> 0).toNumber(true) : message.forbiddenOperationCount;\n        return object;\n    };\n\n    /**\n     * Converts this QueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof QueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    QueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return QueryLatencyStats;\n})();\n\n$root.StatsContext = (function() {\n\n    /**\n     * Properties of a StatsContext.\n     * @exports IStatsContext\n     * @interface IStatsContext\n     * @property {string|null} [clientReferenceId] StatsContext clientReferenceId\n     * @property {string|null} [clientName] StatsContext clientName\n     * @property {string|null} [clientVersion] StatsContext clientVersion\n     */\n\n    /**\n     * Constructs a new StatsContext.\n     * @exports StatsContext\n     * @classdesc Represents a StatsContext.\n     * @implements IStatsContext\n     * @constructor\n     * @param {IStatsContext=} [properties] Properties to set\n     */\n    function StatsContext(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * StatsContext clientReferenceId.\n     * @member {string} clientReferenceId\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientReferenceId = \"\";\n\n    /**\n     * StatsContext clientName.\n     * @member {string} clientName\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientName = \"\";\n\n    /**\n     * StatsContext clientVersion.\n     * @member {string} clientVersion\n     * @memberof StatsContext\n     * @instance\n     */\n    StatsContext.prototype.clientVersion = \"\";\n\n    /**\n     * Creates a new StatsContext instance using the specified properties.\n     * @function create\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext=} [properties] Properties to set\n     * @returns {StatsContext} StatsContext instance\n     */\n    StatsContext.create = function create(properties) {\n        return new StatsContext(properties);\n    };\n\n    /**\n     * Encodes the specified StatsContext message. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encode\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.clientReferenceId != null && Object.hasOwnProperty.call(message, \"clientReferenceId\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.clientReferenceId);\n        if (message.clientName != null && Object.hasOwnProperty.call(message, \"clientName\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.clientName);\n        if (message.clientVersion != null && Object.hasOwnProperty.call(message, \"clientVersion\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.clientVersion);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified StatsContext message, length delimited. Does not implicitly {@link StatsContext.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {IStatsContext} message StatsContext message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    StatsContext.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer.\n     * @function decode\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.StatsContext();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.clientReferenceId = reader.string();\n                break;\n            case 2:\n                message.clientName = reader.string();\n                break;\n            case 3:\n                message.clientVersion = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a StatsContext message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof StatsContext\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {StatsContext} StatsContext\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    StatsContext.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a StatsContext message.\n     * @function verify\n     * @memberof StatsContext\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    StatsContext.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\"))\n            if (!$util.isString(message.clientReferenceId))\n                return \"clientReferenceId: string expected\";\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            if (!$util.isString(message.clientName))\n                return \"clientName: string expected\";\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            if (!$util.isString(message.clientVersion))\n                return \"clientVersion: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a StatsContext message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof StatsContext\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {StatsContext} StatsContext\n     */\n    StatsContext.fromObject = function fromObject(object) {\n        if (object instanceof $root.StatsContext)\n            return object;\n        var message = new $root.StatsContext();\n        if (object.clientReferenceId != null)\n            message.clientReferenceId = String(object.clientReferenceId);\n        if (object.clientName != null)\n            message.clientName = String(object.clientName);\n        if (object.clientVersion != null)\n            message.clientVersion = String(object.clientVersion);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a StatsContext message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof StatsContext\n     * @static\n     * @param {StatsContext} message StatsContext\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    StatsContext.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.clientReferenceId = \"\";\n            object.clientName = \"\";\n            object.clientVersion = \"\";\n        }\n        if (message.clientReferenceId != null && message.hasOwnProperty(\"clientReferenceId\"))\n            object.clientReferenceId = message.clientReferenceId;\n        if (message.clientName != null && message.hasOwnProperty(\"clientName\"))\n            object.clientName = message.clientName;\n        if (message.clientVersion != null && message.hasOwnProperty(\"clientVersion\"))\n            object.clientVersion = message.clientVersion;\n        return object;\n    };\n\n    /**\n     * Converts this StatsContext to JSON.\n     * @function toJSON\n     * @memberof StatsContext\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    StatsContext.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return StatsContext;\n})();\n\n$root.ContextualizedQueryLatencyStats = (function() {\n\n    /**\n     * Properties of a ContextualizedQueryLatencyStats.\n     * @exports IContextualizedQueryLatencyStats\n     * @interface IContextualizedQueryLatencyStats\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedQueryLatencyStats queryLatencyStats\n     * @property {IStatsContext|null} [context] ContextualizedQueryLatencyStats context\n     */\n\n    /**\n     * Constructs a new ContextualizedQueryLatencyStats.\n     * @exports ContextualizedQueryLatencyStats\n     * @classdesc Represents a ContextualizedQueryLatencyStats.\n     * @implements IContextualizedQueryLatencyStats\n     * @constructor\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     */\n    function ContextualizedQueryLatencyStats(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedQueryLatencyStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedQueryLatencyStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     */\n    ContextualizedQueryLatencyStats.prototype.context = null;\n\n    /**\n     * Creates a new ContextualizedQueryLatencyStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats=} [properties] Properties to set\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats instance\n     */\n    ContextualizedQueryLatencyStats.create = function create(properties) {\n        return new ContextualizedQueryLatencyStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedQueryLatencyStats message, length delimited. Does not implicitly {@link ContextualizedQueryLatencyStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {IContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedQueryLatencyStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedQueryLatencyStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedQueryLatencyStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedQueryLatencyStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedQueryLatencyStats message.\n     * @function verify\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedQueryLatencyStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ContextualizedQueryLatencyStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ContextualizedQueryLatencyStats} ContextualizedQueryLatencyStats\n     */\n    ContextualizedQueryLatencyStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.ContextualizedQueryLatencyStats)\n            return object;\n        var message = new $root.ContextualizedQueryLatencyStats();\n        if (object.queryLatencyStats != null) {\n            if (typeof object.queryLatencyStats !== \"object\")\n                throw TypeError(\".ContextualizedQueryLatencyStats.queryLatencyStats: object expected\");\n            message.queryLatencyStats = $root.QueryLatencyStats.fromObject(object.queryLatencyStats);\n        }\n        if (object.context != null) {\n            if (typeof object.context !== \"object\")\n                throw TypeError(\".ContextualizedQueryLatencyStats.context: object expected\");\n            message.context = $root.StatsContext.fromObject(object.context);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedQueryLatencyStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedQueryLatencyStats\n     * @static\n     * @param {ContextualizedQueryLatencyStats} message ContextualizedQueryLatencyStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedQueryLatencyStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.queryLatencyStats = null;\n            object.context = null;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedQueryLatencyStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedQueryLatencyStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedQueryLatencyStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedQueryLatencyStats;\n})();\n\n$root.ContextualizedTypeStats = (function() {\n\n    /**\n     * Properties of a ContextualizedTypeStats.\n     * @exports IContextualizedTypeStats\n     * @interface IContextualizedTypeStats\n     * @property {IStatsContext|null} [context] ContextualizedTypeStats context\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedTypeStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedTypeStats.\n     * @exports ContextualizedTypeStats\n     * @classdesc Represents a ContextualizedTypeStats.\n     * @implements IContextualizedTypeStats\n     * @constructor\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     */\n    function ContextualizedTypeStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedTypeStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.context = null;\n\n    /**\n     * ContextualizedTypeStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedTypeStats\n     * @instance\n     */\n    ContextualizedTypeStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedTypeStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats=} [properties] Properties to set\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats instance\n     */\n    ContextualizedTypeStats.create = function create(properties) {\n        return new ContextualizedTypeStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 2, wireType 2 =*/18).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedTypeStats message, length delimited. Does not implicitly {@link ContextualizedTypeStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {IContextualizedTypeStats} message ContextualizedTypeStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedTypeStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedTypeStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedTypeStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedTypeStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedTypeStats message.\n     * @function verify\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedTypeStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ContextualizedTypeStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ContextualizedTypeStats} ContextualizedTypeStats\n     */\n    ContextualizedTypeStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.ContextualizedTypeStats)\n            return object;\n        var message = new $root.ContextualizedTypeStats();\n        if (object.context != null) {\n            if (typeof object.context !== \"object\")\n                throw TypeError(\".ContextualizedTypeStats.context: object expected\");\n            message.context = $root.StatsContext.fromObject(object.context);\n        }\n        if (object.perTypeStat) {\n            if (typeof object.perTypeStat !== \"object\")\n                throw TypeError(\".ContextualizedTypeStats.perTypeStat: object expected\");\n            message.perTypeStat = {};\n            for (var keys = Object.keys(object.perTypeStat), i = 0; i < keys.length; ++i) {\n                if (typeof object.perTypeStat[keys[i]] !== \"object\")\n                    throw TypeError(\".ContextualizedTypeStats.perTypeStat: object expected\");\n                message.perTypeStat[keys[i]] = $root.TypeStat.fromObject(object.perTypeStat[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedTypeStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedTypeStats\n     * @static\n     * @param {ContextualizedTypeStats} message ContextualizedTypeStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedTypeStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults)\n            object.context = null;\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        var keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedTypeStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedTypeStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedTypeStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedTypeStats;\n})();\n\n$root.FieldStat = (function() {\n\n    /**\n     * Properties of a FieldStat.\n     * @exports IFieldStat\n     * @interface IFieldStat\n     * @property {string|null} [returnType] FieldStat returnType\n     * @property {number|null} [errorsCount] FieldStat errorsCount\n     * @property {number|null} [count] FieldStat count\n     * @property {number|null} [requestsWithErrorsCount] FieldStat requestsWithErrorsCount\n     * @property {Array.<number>|null} [latencyCount] FieldStat latencyCount\n     */\n\n    /**\n     * Constructs a new FieldStat.\n     * @exports FieldStat\n     * @classdesc Represents a FieldStat.\n     * @implements IFieldStat\n     * @constructor\n     * @param {IFieldStat=} [properties] Properties to set\n     */\n    function FieldStat(properties) {\n        this.latencyCount = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * FieldStat returnType.\n     * @member {string} returnType\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.returnType = \"\";\n\n    /**\n     * FieldStat errorsCount.\n     * @member {number} errorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.errorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat count.\n     * @member {number} count\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.count = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat requestsWithErrorsCount.\n     * @member {number} requestsWithErrorsCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.requestsWithErrorsCount = $util.Long ? $util.Long.fromBits(0,0,true) : 0;\n\n    /**\n     * FieldStat latencyCount.\n     * @member {Array.<number>} latencyCount\n     * @memberof FieldStat\n     * @instance\n     */\n    FieldStat.prototype.latencyCount = $util.emptyArray;\n\n    /**\n     * Creates a new FieldStat instance using the specified properties.\n     * @function create\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat=} [properties] Properties to set\n     * @returns {FieldStat} FieldStat instance\n     */\n    FieldStat.create = function create(properties) {\n        return new FieldStat(properties);\n    };\n\n    /**\n     * Encodes the specified FieldStat message. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encode\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.returnType);\n        if (message.errorsCount != null && Object.hasOwnProperty.call(message, \"errorsCount\"))\n            writer.uint32(/* id 4, wireType 0 =*/32).uint64(message.errorsCount);\n        if (message.count != null && Object.hasOwnProperty.call(message, \"count\"))\n            writer.uint32(/* id 5, wireType 0 =*/40).uint64(message.count);\n        if (message.requestsWithErrorsCount != null && Object.hasOwnProperty.call(message, \"requestsWithErrorsCount\"))\n            writer.uint32(/* id 6, wireType 0 =*/48).uint64(message.requestsWithErrorsCount);\n        if (message.latencyCount != null && message.latencyCount.length) {\n            writer.uint32(/* id 8, wireType 2 =*/66).fork();\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                writer.int64(message.latencyCount[i]);\n            writer.ldelim();\n        }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified FieldStat message, length delimited. Does not implicitly {@link FieldStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {IFieldStat} message FieldStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    FieldStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.FieldStat();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                message.returnType = reader.string();\n                break;\n            case 4:\n                message.errorsCount = reader.uint64();\n                break;\n            case 5:\n                message.count = reader.uint64();\n                break;\n            case 6:\n                message.requestsWithErrorsCount = reader.uint64();\n                break;\n            case 8:\n                if (!(message.latencyCount && message.latencyCount.length))\n                    message.latencyCount = [];\n                if ((tag & 7) === 2) {\n                    var end2 = reader.uint32() + reader.pos;\n                    while (reader.pos < end2)\n                        message.latencyCount.push(reader.int64());\n                } else\n                    message.latencyCount.push(reader.int64());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a FieldStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof FieldStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {FieldStat} FieldStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    FieldStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a FieldStat message.\n     * @function verify\n     * @memberof FieldStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    FieldStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (!$util.isInteger(message.errorsCount) && !(message.errorsCount && $util.isInteger(message.errorsCount.low) && $util.isInteger(message.errorsCount.high)))\n                return \"errorsCount: integer|Long expected\";\n        if (message.count != null && message.hasOwnProperty(\"count\"))\n            if (!$util.isInteger(message.count) && !(message.count && $util.isInteger(message.count.low) && $util.isInteger(message.count.high)))\n                return \"count: integer|Long expected\";\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (!$util.isInteger(message.requestsWithErrorsCount) && !(message.requestsWithErrorsCount && $util.isInteger(message.requestsWithErrorsCount.low) && $util.isInteger(message.requestsWithErrorsCount.high)))\n                return \"requestsWithErrorsCount: integer|Long expected\";\n        if (message.latencyCount != null && message.hasOwnProperty(\"latencyCount\")) {\n            if (!Array.isArray(message.latencyCount))\n                return \"latencyCount: array expected\";\n            for (var i = 0; i < message.latencyCount.length; ++i)\n                if (!$util.isInteger(message.latencyCount[i]) && !(message.latencyCount[i] && $util.isInteger(message.latencyCount[i].low) && $util.isInteger(message.latencyCount[i].high)))\n                    return \"latencyCount: integer|Long[] expected\";\n        }\n        return null;\n    };\n\n    /**\n     * Creates a FieldStat message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof FieldStat\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {FieldStat} FieldStat\n     */\n    FieldStat.fromObject = function fromObject(object) {\n        if (object instanceof $root.FieldStat)\n            return object;\n        var message = new $root.FieldStat();\n        if (object.returnType != null)\n            message.returnType = String(object.returnType);\n        if (object.errorsCount != null)\n            if ($util.Long)\n                (message.errorsCount = $util.Long.fromValue(object.errorsCount)).unsigned = true;\n            else if (typeof object.errorsCount === \"string\")\n                message.errorsCount = parseInt(object.errorsCount, 10);\n            else if (typeof object.errorsCount === \"number\")\n                message.errorsCount = object.errorsCount;\n            else if (typeof object.errorsCount === \"object\")\n                message.errorsCount = new $util.LongBits(object.errorsCount.low >>> 0, object.errorsCount.high >>> 0).toNumber(true);\n        if (object.count != null)\n            if ($util.Long)\n                (message.count = $util.Long.fromValue(object.count)).unsigned = true;\n            else if (typeof object.count === \"string\")\n                message.count = parseInt(object.count, 10);\n            else if (typeof object.count === \"number\")\n                message.count = object.count;\n            else if (typeof object.count === \"object\")\n                message.count = new $util.LongBits(object.count.low >>> 0, object.count.high >>> 0).toNumber(true);\n        if (object.requestsWithErrorsCount != null)\n            if ($util.Long)\n                (message.requestsWithErrorsCount = $util.Long.fromValue(object.requestsWithErrorsCount)).unsigned = true;\n            else if (typeof object.requestsWithErrorsCount === \"string\")\n                message.requestsWithErrorsCount = parseInt(object.requestsWithErrorsCount, 10);\n            else if (typeof object.requestsWithErrorsCount === \"number\")\n                message.requestsWithErrorsCount = object.requestsWithErrorsCount;\n            else if (typeof object.requestsWithErrorsCount === \"object\")\n                message.requestsWithErrorsCount = new $util.LongBits(object.requestsWithErrorsCount.low >>> 0, object.requestsWithErrorsCount.high >>> 0).toNumber(true);\n        if (object.latencyCount) {\n            if (!Array.isArray(object.latencyCount))\n                throw TypeError(\".FieldStat.latencyCount: array expected\");\n            message.latencyCount = [];\n            for (var i = 0; i < object.latencyCount.length; ++i)\n                if ($util.Long)\n                    (message.latencyCount[i] = $util.Long.fromValue(object.latencyCount[i])).unsigned = false;\n                else if (typeof object.latencyCount[i] === \"string\")\n                    message.latencyCount[i] = parseInt(object.latencyCount[i], 10);\n                else if (typeof object.latencyCount[i] === \"number\")\n                    message.latencyCount[i] = object.latencyCount[i];\n                else if (typeof object.latencyCount[i] === \"object\")\n                    message.latencyCount[i] = new $util.LongBits(object.latencyCount[i].low >>> 0, object.latencyCount[i].high >>> 0).toNumber();\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a FieldStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof FieldStat\n     * @static\n     * @param {FieldStat} message FieldStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    FieldStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.latencyCount = [];\n        if (options.defaults) {\n            object.returnType = \"\";\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.errorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.errorsCount = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.count = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.count = options.longs === String ? \"0\" : 0;\n            if ($util.Long) {\n                var long = new $util.Long(0, 0, true);\n                object.requestsWithErrorsCount = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n            } else\n                object.requestsWithErrorsCount = options.longs === String ? \"0\" : 0;\n        }\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        if (message.errorsCount != null && message.hasOwnProperty(\"errorsCount\"))\n            if (typeof message.errorsCount === \"number\")\n                object.errorsCount = options.longs === String ? String(message.errorsCount) : message.errorsCount;\n            else\n                object.errorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.errorsCount) : options.longs === Number ? new $util.LongBits(message.errorsCount.low >>> 0, message.errorsCount.high >>> 0).toNumber(true) : message.errorsCount;\n        if (message.count != null && message.hasOwnProperty(\"count\"))\n            if (typeof message.count === \"number\")\n                object.count = options.longs === String ? String(message.count) : message.count;\n            else\n                object.count = options.longs === String ? $util.Long.prototype.toString.call(message.count) : options.longs === Number ? new $util.LongBits(message.count.low >>> 0, message.count.high >>> 0).toNumber(true) : message.count;\n        if (message.requestsWithErrorsCount != null && message.hasOwnProperty(\"requestsWithErrorsCount\"))\n            if (typeof message.requestsWithErrorsCount === \"number\")\n                object.requestsWithErrorsCount = options.longs === String ? String(message.requestsWithErrorsCount) : message.requestsWithErrorsCount;\n            else\n                object.requestsWithErrorsCount = options.longs === String ? $util.Long.prototype.toString.call(message.requestsWithErrorsCount) : options.longs === Number ? new $util.LongBits(message.requestsWithErrorsCount.low >>> 0, message.requestsWithErrorsCount.high >>> 0).toNumber(true) : message.requestsWithErrorsCount;\n        if (message.latencyCount && message.latencyCount.length) {\n            object.latencyCount = [];\n            for (var j = 0; j < message.latencyCount.length; ++j)\n                if (typeof message.latencyCount[j] === \"number\")\n                    object.latencyCount[j] = options.longs === String ? String(message.latencyCount[j]) : message.latencyCount[j];\n                else\n                    object.latencyCount[j] = options.longs === String ? $util.Long.prototype.toString.call(message.latencyCount[j]) : options.longs === Number ? new $util.LongBits(message.latencyCount[j].low >>> 0, message.latencyCount[j].high >>> 0).toNumber() : message.latencyCount[j];\n        }\n        return object;\n    };\n\n    /**\n     * Converts this FieldStat to JSON.\n     * @function toJSON\n     * @memberof FieldStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    FieldStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return FieldStat;\n})();\n\n$root.TypeStat = (function() {\n\n    /**\n     * Properties of a TypeStat.\n     * @exports ITypeStat\n     * @interface ITypeStat\n     * @property {Object.<string,IFieldStat>|null} [perFieldStat] TypeStat perFieldStat\n     */\n\n    /**\n     * Constructs a new TypeStat.\n     * @exports TypeStat\n     * @classdesc Represents a TypeStat.\n     * @implements ITypeStat\n     * @constructor\n     * @param {ITypeStat=} [properties] Properties to set\n     */\n    function TypeStat(properties) {\n        this.perFieldStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TypeStat perFieldStat.\n     * @member {Object.<string,IFieldStat>} perFieldStat\n     * @memberof TypeStat\n     * @instance\n     */\n    TypeStat.prototype.perFieldStat = $util.emptyObject;\n\n    /**\n     * Creates a new TypeStat instance using the specified properties.\n     * @function create\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat=} [properties] Properties to set\n     * @returns {TypeStat} TypeStat instance\n     */\n    TypeStat.create = function create(properties) {\n        return new TypeStat(properties);\n    };\n\n    /**\n     * Encodes the specified TypeStat message. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encode\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.perFieldStat != null && Object.hasOwnProperty.call(message, \"perFieldStat\"))\n            for (var keys = Object.keys(message.perFieldStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.FieldStat.encode(message.perFieldStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TypeStat message, length delimited. Does not implicitly {@link TypeStat.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {ITypeStat} message TypeStat message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TypeStat.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer.\n     * @function decode\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TypeStat(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 3:\n                reader.skip().pos++;\n                if (message.perFieldStat === $util.emptyObject)\n                    message.perFieldStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perFieldStat[key] = $root.FieldStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TypeStat message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TypeStat\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TypeStat} TypeStat\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TypeStat.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TypeStat message.\n     * @function verify\n     * @memberof TypeStat\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TypeStat.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.perFieldStat != null && message.hasOwnProperty(\"perFieldStat\")) {\n            if (!$util.isObject(message.perFieldStat))\n                return \"perFieldStat: object expected\";\n            var key = Object.keys(message.perFieldStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.FieldStat.verify(message.perFieldStat[key[i]]);\n                if (error)\n                    return \"perFieldStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a TypeStat message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TypeStat\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TypeStat} TypeStat\n     */\n    TypeStat.fromObject = function fromObject(object) {\n        if (object instanceof $root.TypeStat)\n            return object;\n        var message = new $root.TypeStat();\n        if (object.perFieldStat) {\n            if (typeof object.perFieldStat !== \"object\")\n                throw TypeError(\".TypeStat.perFieldStat: object expected\");\n            message.perFieldStat = {};\n            for (var keys = Object.keys(object.perFieldStat), i = 0; i < keys.length; ++i) {\n                if (typeof object.perFieldStat[keys[i]] !== \"object\")\n                    throw TypeError(\".TypeStat.perFieldStat: object expected\");\n                message.perFieldStat[keys[i]] = $root.FieldStat.fromObject(object.perFieldStat[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TypeStat message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TypeStat\n     * @static\n     * @param {TypeStat} message TypeStat\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TypeStat.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perFieldStat = {};\n        var keys2;\n        if (message.perFieldStat && (keys2 = Object.keys(message.perFieldStat)).length) {\n            object.perFieldStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perFieldStat[keys2[j]] = $root.FieldStat.toObject(message.perFieldStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TypeStat to JSON.\n     * @function toJSON\n     * @memberof TypeStat\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TypeStat.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TypeStat;\n})();\n\n$root.Field = (function() {\n\n    /**\n     * Properties of a Field.\n     * @exports IField\n     * @interface IField\n     * @property {string|null} [name] Field name\n     * @property {string|null} [returnType] Field returnType\n     */\n\n    /**\n     * Constructs a new Field.\n     * @exports Field\n     * @classdesc Represents a Field.\n     * @implements IField\n     * @constructor\n     * @param {IField=} [properties] Properties to set\n     */\n    function Field(properties) {\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Field name.\n     * @member {string} name\n     * @memberof Field\n     * @instance\n     */\n    Field.prototype.name = \"\";\n\n    /**\n     * Field returnType.\n     * @member {string} returnType\n     * @memberof Field\n     * @instance\n     */\n    Field.prototype.returnType = \"\";\n\n    /**\n     * Creates a new Field instance using the specified properties.\n     * @function create\n     * @memberof Field\n     * @static\n     * @param {IField=} [properties] Properties to set\n     * @returns {Field} Field instance\n     */\n    Field.create = function create(properties) {\n        return new Field(properties);\n    };\n\n    /**\n     * Encodes the specified Field message. Does not implicitly {@link Field.verify|verify} messages.\n     * @function encode\n     * @memberof Field\n     * @static\n     * @param {IField} message Field message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Field.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 2, wireType 2 =*/18).string(message.name);\n        if (message.returnType != null && Object.hasOwnProperty.call(message, \"returnType\"))\n            writer.uint32(/* id 3, wireType 2 =*/26).string(message.returnType);\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Field message, length delimited. Does not implicitly {@link Field.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Field\n     * @static\n     * @param {IField} message Field message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Field.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Field message from the specified reader or buffer.\n     * @function decode\n     * @memberof Field\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Field} Field\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Field.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Field();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 2:\n                message.name = reader.string();\n                break;\n            case 3:\n                message.returnType = reader.string();\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Field message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Field\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Field} Field\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Field.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Field message.\n     * @function verify\n     * @memberof Field\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Field.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            if (!$util.isString(message.returnType))\n                return \"returnType: string expected\";\n        return null;\n    };\n\n    /**\n     * Creates a Field message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Field\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Field} Field\n     */\n    Field.fromObject = function fromObject(object) {\n        if (object instanceof $root.Field)\n            return object;\n        var message = new $root.Field();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.returnType != null)\n            message.returnType = String(object.returnType);\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Field message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Field\n     * @static\n     * @param {Field} message Field\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Field.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.defaults) {\n            object.name = \"\";\n            object.returnType = \"\";\n        }\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.returnType != null && message.hasOwnProperty(\"returnType\"))\n            object.returnType = message.returnType;\n        return object;\n    };\n\n    /**\n     * Converts this Field to JSON.\n     * @function toJSON\n     * @memberof Field\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Field.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Field;\n})();\n\n$root.Type = (function() {\n\n    /**\n     * Properties of a Type.\n     * @exports IType\n     * @interface IType\n     * @property {string|null} [name] Type name\n     * @property {Array.<IField>|null} [field] Type field\n     */\n\n    /**\n     * Constructs a new Type.\n     * @exports Type\n     * @classdesc Represents a Type.\n     * @implements IType\n     * @constructor\n     * @param {IType=} [properties] Properties to set\n     */\n    function Type(properties) {\n        this.field = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Type name.\n     * @member {string} name\n     * @memberof Type\n     * @instance\n     */\n    Type.prototype.name = \"\";\n\n    /**\n     * Type field.\n     * @member {Array.<IField>} field\n     * @memberof Type\n     * @instance\n     */\n    Type.prototype.field = $util.emptyArray;\n\n    /**\n     * Creates a new Type instance using the specified properties.\n     * @function create\n     * @memberof Type\n     * @static\n     * @param {IType=} [properties] Properties to set\n     * @returns {Type} Type instance\n     */\n    Type.create = function create(properties) {\n        return new Type(properties);\n    };\n\n    /**\n     * Encodes the specified Type message. Does not implicitly {@link Type.verify|verify} messages.\n     * @function encode\n     * @memberof Type\n     * @static\n     * @param {IType} message Type message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Type.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.name != null && Object.hasOwnProperty.call(message, \"name\"))\n            writer.uint32(/* id 1, wireType 2 =*/10).string(message.name);\n        if (message.field != null && message.field.length)\n            for (var i = 0; i < message.field.length; ++i)\n                $root.Field.encode(message.field[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Type message, length delimited. Does not implicitly {@link Type.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Type\n     * @static\n     * @param {IType} message Type message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Type.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Type message from the specified reader or buffer.\n     * @function decode\n     * @memberof Type\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Type} Type\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Type.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Type();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.name = reader.string();\n                break;\n            case 2:\n                if (!(message.field && message.field.length))\n                    message.field = [];\n                message.field.push($root.Field.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Type message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Type\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Type} Type\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Type.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Type message.\n     * @function verify\n     * @memberof Type\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Type.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            if (!$util.isString(message.name))\n                return \"name: string expected\";\n        if (message.field != null && message.hasOwnProperty(\"field\")) {\n            if (!Array.isArray(message.field))\n                return \"field: array expected\";\n            for (var i = 0; i < message.field.length; ++i) {\n                var error = $root.Field.verify(message.field[i]);\n                if (error)\n                    return \"field.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Type message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Type\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Type} Type\n     */\n    Type.fromObject = function fromObject(object) {\n        if (object instanceof $root.Type)\n            return object;\n        var message = new $root.Type();\n        if (object.name != null)\n            message.name = String(object.name);\n        if (object.field) {\n            if (!Array.isArray(object.field))\n                throw TypeError(\".Type.field: array expected\");\n            message.field = [];\n            for (var i = 0; i < object.field.length; ++i) {\n                if (typeof object.field[i] !== \"object\")\n                    throw TypeError(\".Type.field: object expected\");\n                message.field[i] = $root.Field.fromObject(object.field[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Type message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Type\n     * @static\n     * @param {Type} message Type\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Type.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults)\n            object.field = [];\n        if (options.defaults)\n            object.name = \"\";\n        if (message.name != null && message.hasOwnProperty(\"name\"))\n            object.name = message.name;\n        if (message.field && message.field.length) {\n            object.field = [];\n            for (var j = 0; j < message.field.length; ++j)\n                object.field[j] = $root.Field.toObject(message.field[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Type to JSON.\n     * @function toJSON\n     * @memberof Type\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Type.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Type;\n})();\n\n$root.Report = (function() {\n\n    /**\n     * Properties of a Report.\n     * @exports IReport\n     * @interface IReport\n     * @property {IReportHeader|null} [header] Report header\n     * @property {Object.<string,ITracesAndStats>|null} [tracesPerQuery] Report tracesPerQuery\n     * @property {google.protobuf.ITimestamp|null} [endTime] Report endTime\n     */\n\n    /**\n     * Constructs a new Report.\n     * @exports Report\n     * @classdesc Represents a Report.\n     * @implements IReport\n     * @constructor\n     * @param {IReport=} [properties] Properties to set\n     */\n    function Report(properties) {\n        this.tracesPerQuery = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * Report header.\n     * @member {IReportHeader|null|undefined} header\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.header = null;\n\n    /**\n     * Report tracesPerQuery.\n     * @member {Object.<string,ITracesAndStats>} tracesPerQuery\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.tracesPerQuery = $util.emptyObject;\n\n    /**\n     * Report endTime.\n     * @member {google.protobuf.ITimestamp|null|undefined} endTime\n     * @memberof Report\n     * @instance\n     */\n    Report.prototype.endTime = null;\n\n    /**\n     * Creates a new Report instance using the specified properties.\n     * @function create\n     * @memberof Report\n     * @static\n     * @param {IReport=} [properties] Properties to set\n     * @returns {Report} Report instance\n     */\n    Report.create = function create(properties) {\n        return new Report(properties);\n    };\n\n    /**\n     * Encodes the specified Report message. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encode\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.header != null && Object.hasOwnProperty.call(message, \"header\"))\n            $root.ReportHeader.encode(message.header, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.endTime != null && Object.hasOwnProperty.call(message, \"endTime\"))\n            $root.google.protobuf.Timestamp.encode(message.endTime, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.tracesPerQuery != null && Object.hasOwnProperty.call(message, \"tracesPerQuery\"))\n            for (var keys = Object.keys(message.tracesPerQuery), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 5, wireType 2 =*/42).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TracesAndStats.encode(message.tracesPerQuery[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified Report message, length delimited. Does not implicitly {@link Report.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof Report\n     * @static\n     * @param {IReport} message Report message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    Report.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer.\n     * @function decode\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.Report(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.header = $root.ReportHeader.decode(reader, reader.uint32());\n                break;\n            case 5:\n                reader.skip().pos++;\n                if (message.tracesPerQuery === $util.emptyObject)\n                    message.tracesPerQuery = {};\n                key = reader.string();\n                reader.pos++;\n                message.tracesPerQuery[key] = $root.TracesAndStats.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.endTime = $root.google.protobuf.Timestamp.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a Report message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof Report\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {Report} Report\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    Report.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a Report message.\n     * @function verify\n     * @memberof Report\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    Report.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.header != null && message.hasOwnProperty(\"header\")) {\n            var error = $root.ReportHeader.verify(message.header);\n            if (error)\n                return \"header.\" + error;\n        }\n        if (message.tracesPerQuery != null && message.hasOwnProperty(\"tracesPerQuery\")) {\n            if (!$util.isObject(message.tracesPerQuery))\n                return \"tracesPerQuery: object expected\";\n            var key = Object.keys(message.tracesPerQuery);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TracesAndStats.verify(message.tracesPerQuery[key[i]]);\n                if (error)\n                    return \"tracesPerQuery.\" + error;\n            }\n        }\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\")) {\n            var error = $root.google.protobuf.Timestamp.verify(message.endTime);\n            if (error)\n                return \"endTime.\" + error;\n        }\n        return null;\n    };\n\n    /**\n     * Creates a Report message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof Report\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {Report} Report\n     */\n    Report.fromObject = function fromObject(object) {\n        if (object instanceof $root.Report)\n            return object;\n        var message = new $root.Report();\n        if (object.header != null) {\n            if (typeof object.header !== \"object\")\n                throw TypeError(\".Report.header: object expected\");\n            message.header = $root.ReportHeader.fromObject(object.header);\n        }\n        if (object.tracesPerQuery) {\n            if (typeof object.tracesPerQuery !== \"object\")\n                throw TypeError(\".Report.tracesPerQuery: object expected\");\n            message.tracesPerQuery = {};\n            for (var keys = Object.keys(object.tracesPerQuery), i = 0; i < keys.length; ++i) {\n                if (typeof object.tracesPerQuery[keys[i]] !== \"object\")\n                    throw TypeError(\".Report.tracesPerQuery: object expected\");\n                message.tracesPerQuery[keys[i]] = $root.TracesAndStats.fromObject(object.tracesPerQuery[keys[i]]);\n            }\n        }\n        if (object.endTime != null) {\n            if (typeof object.endTime !== \"object\")\n                throw TypeError(\".Report.endTime: object expected\");\n            message.endTime = $root.google.protobuf.Timestamp.fromObject(object.endTime);\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a Report message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof Report\n     * @static\n     * @param {Report} message Report\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    Report.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.tracesPerQuery = {};\n        if (options.defaults) {\n            object.header = null;\n            object.endTime = null;\n        }\n        if (message.header != null && message.hasOwnProperty(\"header\"))\n            object.header = $root.ReportHeader.toObject(message.header, options);\n        if (message.endTime != null && message.hasOwnProperty(\"endTime\"))\n            object.endTime = $root.google.protobuf.Timestamp.toObject(message.endTime, options);\n        var keys2;\n        if (message.tracesPerQuery && (keys2 = Object.keys(message.tracesPerQuery)).length) {\n            object.tracesPerQuery = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.tracesPerQuery[keys2[j]] = $root.TracesAndStats.toObject(message.tracesPerQuery[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this Report to JSON.\n     * @function toJSON\n     * @memberof Report\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    Report.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return Report;\n})();\n\n$root.ContextualizedStats = (function() {\n\n    /**\n     * Properties of a ContextualizedStats.\n     * @exports IContextualizedStats\n     * @interface IContextualizedStats\n     * @property {IStatsContext|null} [context] ContextualizedStats context\n     * @property {IQueryLatencyStats|null} [queryLatencyStats] ContextualizedStats queryLatencyStats\n     * @property {Object.<string,ITypeStat>|null} [perTypeStat] ContextualizedStats perTypeStat\n     */\n\n    /**\n     * Constructs a new ContextualizedStats.\n     * @exports ContextualizedStats\n     * @classdesc Represents a ContextualizedStats.\n     * @implements IContextualizedStats\n     * @constructor\n     * @param {IContextualizedStats=} [properties] Properties to set\n     */\n    function ContextualizedStats(properties) {\n        this.perTypeStat = {};\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * ContextualizedStats context.\n     * @member {IStatsContext|null|undefined} context\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.context = null;\n\n    /**\n     * ContextualizedStats queryLatencyStats.\n     * @member {IQueryLatencyStats|null|undefined} queryLatencyStats\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.queryLatencyStats = null;\n\n    /**\n     * ContextualizedStats perTypeStat.\n     * @member {Object.<string,ITypeStat>} perTypeStat\n     * @memberof ContextualizedStats\n     * @instance\n     */\n    ContextualizedStats.prototype.perTypeStat = $util.emptyObject;\n\n    /**\n     * Creates a new ContextualizedStats instance using the specified properties.\n     * @function create\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats=} [properties] Properties to set\n     * @returns {ContextualizedStats} ContextualizedStats instance\n     */\n    ContextualizedStats.create = function create(properties) {\n        return new ContextualizedStats(properties);\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.context != null && Object.hasOwnProperty.call(message, \"context\"))\n            $root.StatsContext.encode(message.context, writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.queryLatencyStats != null && Object.hasOwnProperty.call(message, \"queryLatencyStats\"))\n            $root.QueryLatencyStats.encode(message.queryLatencyStats, writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        if (message.perTypeStat != null && Object.hasOwnProperty.call(message, \"perTypeStat\"))\n            for (var keys = Object.keys(message.perTypeStat), i = 0; i < keys.length; ++i) {\n                writer.uint32(/* id 3, wireType 2 =*/26).fork().uint32(/* id 1, wireType 2 =*/10).string(keys[i]);\n                $root.TypeStat.encode(message.perTypeStat[keys[i]], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim().ldelim();\n            }\n        return writer;\n    };\n\n    /**\n     * Encodes the specified ContextualizedStats message, length delimited. Does not implicitly {@link ContextualizedStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {IContextualizedStats} message ContextualizedStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    ContextualizedStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.ContextualizedStats(), key;\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                message.context = $root.StatsContext.decode(reader, reader.uint32());\n                break;\n            case 2:\n                message.queryLatencyStats = $root.QueryLatencyStats.decode(reader, reader.uint32());\n                break;\n            case 3:\n                reader.skip().pos++;\n                if (message.perTypeStat === $util.emptyObject)\n                    message.perTypeStat = {};\n                key = reader.string();\n                reader.pos++;\n                message.perTypeStat[key] = $root.TypeStat.decode(reader, reader.uint32());\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a ContextualizedStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof ContextualizedStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {ContextualizedStats} ContextualizedStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    ContextualizedStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a ContextualizedStats message.\n     * @function verify\n     * @memberof ContextualizedStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    ContextualizedStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.context != null && message.hasOwnProperty(\"context\")) {\n            var error = $root.StatsContext.verify(message.context);\n            if (error)\n                return \"context.\" + error;\n        }\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\")) {\n            var error = $root.QueryLatencyStats.verify(message.queryLatencyStats);\n            if (error)\n                return \"queryLatencyStats.\" + error;\n        }\n        if (message.perTypeStat != null && message.hasOwnProperty(\"perTypeStat\")) {\n            if (!$util.isObject(message.perTypeStat))\n                return \"perTypeStat: object expected\";\n            var key = Object.keys(message.perTypeStat);\n            for (var i = 0; i < key.length; ++i) {\n                var error = $root.TypeStat.verify(message.perTypeStat[key[i]]);\n                if (error)\n                    return \"perTypeStat.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a ContextualizedStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof ContextualizedStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {ContextualizedStats} ContextualizedStats\n     */\n    ContextualizedStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.ContextualizedStats)\n            return object;\n        var message = new $root.ContextualizedStats();\n        if (object.context != null) {\n            if (typeof object.context !== \"object\")\n                throw TypeError(\".ContextualizedStats.context: object expected\");\n            message.context = $root.StatsContext.fromObject(object.context);\n        }\n        if (object.queryLatencyStats != null) {\n            if (typeof object.queryLatencyStats !== \"object\")\n                throw TypeError(\".ContextualizedStats.queryLatencyStats: object expected\");\n            message.queryLatencyStats = $root.QueryLatencyStats.fromObject(object.queryLatencyStats);\n        }\n        if (object.perTypeStat) {\n            if (typeof object.perTypeStat !== \"object\")\n                throw TypeError(\".ContextualizedStats.perTypeStat: object expected\");\n            message.perTypeStat = {};\n            for (var keys = Object.keys(object.perTypeStat), i = 0; i < keys.length; ++i) {\n                if (typeof object.perTypeStat[keys[i]] !== \"object\")\n                    throw TypeError(\".ContextualizedStats.perTypeStat: object expected\");\n                message.perTypeStat[keys[i]] = $root.TypeStat.fromObject(object.perTypeStat[keys[i]]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a ContextualizedStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof ContextualizedStats\n     * @static\n     * @param {ContextualizedStats} message ContextualizedStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    ContextualizedStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.objects || options.defaults)\n            object.perTypeStat = {};\n        if (options.defaults) {\n            object.context = null;\n            object.queryLatencyStats = null;\n        }\n        if (message.context != null && message.hasOwnProperty(\"context\"))\n            object.context = $root.StatsContext.toObject(message.context, options);\n        if (message.queryLatencyStats != null && message.hasOwnProperty(\"queryLatencyStats\"))\n            object.queryLatencyStats = $root.QueryLatencyStats.toObject(message.queryLatencyStats, options);\n        var keys2;\n        if (message.perTypeStat && (keys2 = Object.keys(message.perTypeStat)).length) {\n            object.perTypeStat = {};\n            for (var j = 0; j < keys2.length; ++j)\n                object.perTypeStat[keys2[j]] = $root.TypeStat.toObject(message.perTypeStat[keys2[j]], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this ContextualizedStats to JSON.\n     * @function toJSON\n     * @memberof ContextualizedStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    ContextualizedStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return ContextualizedStats;\n})();\n\n$root.TracesAndStats = (function() {\n\n    /**\n     * Properties of a TracesAndStats.\n     * @exports ITracesAndStats\n     * @interface ITracesAndStats\n     * @property {Array.<ITrace>|null} [trace] TracesAndStats trace\n     * @property {Array.<IContextualizedStats>|null} [statsWithContext] TracesAndStats statsWithContext\n     */\n\n    /**\n     * Constructs a new TracesAndStats.\n     * @exports TracesAndStats\n     * @classdesc Represents a TracesAndStats.\n     * @implements ITracesAndStats\n     * @constructor\n     * @param {ITracesAndStats=} [properties] Properties to set\n     */\n    function TracesAndStats(properties) {\n        this.trace = [];\n        this.statsWithContext = [];\n        if (properties)\n            for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                if (properties[keys[i]] != null)\n                    this[keys[i]] = properties[keys[i]];\n    }\n\n    /**\n     * TracesAndStats trace.\n     * @member {Array.<ITrace>} trace\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.trace = $util.emptyArray;\n\n    /**\n     * TracesAndStats statsWithContext.\n     * @member {Array.<IContextualizedStats>} statsWithContext\n     * @memberof TracesAndStats\n     * @instance\n     */\n    TracesAndStats.prototype.statsWithContext = $util.emptyArray;\n\n    /**\n     * Creates a new TracesAndStats instance using the specified properties.\n     * @function create\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats=} [properties] Properties to set\n     * @returns {TracesAndStats} TracesAndStats instance\n     */\n    TracesAndStats.create = function create(properties) {\n        return new TracesAndStats(properties);\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encode\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encode = function encode(message, writer) {\n        if (!writer)\n            writer = $Writer.create();\n        if (message.trace != null && message.trace.length)\n            for (var i = 0; i < message.trace.length; ++i)\n                $root.Trace.encode(message.trace[i], writer.uint32(/* id 1, wireType 2 =*/10).fork()).ldelim();\n        if (message.statsWithContext != null && message.statsWithContext.length)\n            for (var i = 0; i < message.statsWithContext.length; ++i)\n                $root.ContextualizedStats.encode(message.statsWithContext[i], writer.uint32(/* id 2, wireType 2 =*/18).fork()).ldelim();\n        return writer;\n    };\n\n    /**\n     * Encodes the specified TracesAndStats message, length delimited. Does not implicitly {@link TracesAndStats.verify|verify} messages.\n     * @function encodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {ITracesAndStats} message TracesAndStats message or plain object to encode\n     * @param {$protobuf.Writer} [writer] Writer to encode to\n     * @returns {$protobuf.Writer} Writer\n     */\n    TracesAndStats.encodeDelimited = function encodeDelimited(message, writer) {\n        return this.encode(message, writer).ldelim();\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer.\n     * @function decode\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @param {number} [length] Message length if known beforehand\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decode = function decode(reader, length) {\n        if (!(reader instanceof $Reader))\n            reader = $Reader.create(reader);\n        var end = length === undefined ? reader.len : reader.pos + length, message = new $root.TracesAndStats();\n        while (reader.pos < end) {\n            var tag = reader.uint32();\n            switch (tag >>> 3) {\n            case 1:\n                if (!(message.trace && message.trace.length))\n                    message.trace = [];\n                message.trace.push($root.Trace.decode(reader, reader.uint32()));\n                break;\n            case 2:\n                if (!(message.statsWithContext && message.statsWithContext.length))\n                    message.statsWithContext = [];\n                message.statsWithContext.push($root.ContextualizedStats.decode(reader, reader.uint32()));\n                break;\n            default:\n                reader.skipType(tag & 7);\n                break;\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Decodes a TracesAndStats message from the specified reader or buffer, length delimited.\n     * @function decodeDelimited\n     * @memberof TracesAndStats\n     * @static\n     * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n     * @returns {TracesAndStats} TracesAndStats\n     * @throws {Error} If the payload is not a reader or valid buffer\n     * @throws {$protobuf.util.ProtocolError} If required fields are missing\n     */\n    TracesAndStats.decodeDelimited = function decodeDelimited(reader) {\n        if (!(reader instanceof $Reader))\n            reader = new $Reader(reader);\n        return this.decode(reader, reader.uint32());\n    };\n\n    /**\n     * Verifies a TracesAndStats message.\n     * @function verify\n     * @memberof TracesAndStats\n     * @static\n     * @param {Object.<string,*>} message Plain object to verify\n     * @returns {string|null} `null` if valid, otherwise the reason why it is not\n     */\n    TracesAndStats.verify = function verify(message) {\n        if (typeof message !== \"object\" || message === null)\n            return \"object expected\";\n        if (message.trace != null && message.hasOwnProperty(\"trace\")) {\n            if (!Array.isArray(message.trace))\n                return \"trace: array expected\";\n            for (var i = 0; i < message.trace.length; ++i) {\n                var error = $root.Trace.verify(message.trace[i]);\n                if (error)\n                    return \"trace.\" + error;\n            }\n        }\n        if (message.statsWithContext != null && message.hasOwnProperty(\"statsWithContext\")) {\n            if (!Array.isArray(message.statsWithContext))\n                return \"statsWithContext: array expected\";\n            for (var i = 0; i < message.statsWithContext.length; ++i) {\n                var error = $root.ContextualizedStats.verify(message.statsWithContext[i]);\n                if (error)\n                    return \"statsWithContext.\" + error;\n            }\n        }\n        return null;\n    };\n\n    /**\n     * Creates a TracesAndStats message from a plain object. Also converts values to their respective internal types.\n     * @function fromObject\n     * @memberof TracesAndStats\n     * @static\n     * @param {Object.<string,*>} object Plain object\n     * @returns {TracesAndStats} TracesAndStats\n     */\n    TracesAndStats.fromObject = function fromObject(object) {\n        if (object instanceof $root.TracesAndStats)\n            return object;\n        var message = new $root.TracesAndStats();\n        if (object.trace) {\n            if (!Array.isArray(object.trace))\n                throw TypeError(\".TracesAndStats.trace: array expected\");\n            message.trace = [];\n            for (var i = 0; i < object.trace.length; ++i) {\n                if (typeof object.trace[i] !== \"object\")\n                    throw TypeError(\".TracesAndStats.trace: object expected\");\n                message.trace[i] = $root.Trace.fromObject(object.trace[i]);\n            }\n        }\n        if (object.statsWithContext) {\n            if (!Array.isArray(object.statsWithContext))\n                throw TypeError(\".TracesAndStats.statsWithContext: array expected\");\n            message.statsWithContext = [];\n            for (var i = 0; i < object.statsWithContext.length; ++i) {\n                if (typeof object.statsWithContext[i] !== \"object\")\n                    throw TypeError(\".TracesAndStats.statsWithContext: object expected\");\n                message.statsWithContext[i] = $root.ContextualizedStats.fromObject(object.statsWithContext[i]);\n            }\n        }\n        return message;\n    };\n\n    /**\n     * Creates a plain object from a TracesAndStats message. Also converts values to other types if specified.\n     * @function toObject\n     * @memberof TracesAndStats\n     * @static\n     * @param {TracesAndStats} message TracesAndStats\n     * @param {$protobuf.IConversionOptions} [options] Conversion options\n     * @returns {Object.<string,*>} Plain object\n     */\n    TracesAndStats.toObject = function toObject(message, options) {\n        if (!options)\n            options = {};\n        var object = {};\n        if (options.arrays || options.defaults) {\n            object.trace = [];\n            object.statsWithContext = [];\n        }\n        if (message.trace && message.trace.length) {\n            object.trace = [];\n            for (var j = 0; j < message.trace.length; ++j)\n                object.trace[j] = $root.Trace.toObject(message.trace[j], options);\n        }\n        if (message.statsWithContext && message.statsWithContext.length) {\n            object.statsWithContext = [];\n            for (var j = 0; j < message.statsWithContext.length; ++j)\n                object.statsWithContext[j] = $root.ContextualizedStats.toObject(message.statsWithContext[j], options);\n        }\n        return object;\n    };\n\n    /**\n     * Converts this TracesAndStats to JSON.\n     * @function toJSON\n     * @memberof TracesAndStats\n     * @instance\n     * @returns {Object.<string,*>} JSON object\n     */\n    TracesAndStats.prototype.toJSON = function toJSON() {\n        return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n    };\n\n    return TracesAndStats;\n})();\n\n$root.google = (function() {\n\n    /**\n     * Namespace google.\n     * @exports google\n     * @namespace\n     */\n    var google = {};\n\n    google.protobuf = (function() {\n\n        /**\n         * Namespace protobuf.\n         * @memberof google\n         * @namespace\n         */\n        var protobuf = {};\n\n        protobuf.Timestamp = (function() {\n\n            /**\n             * Properties of a Timestamp.\n             * @memberof google.protobuf\n             * @interface ITimestamp\n             * @property {number|null} [seconds] Timestamp seconds\n             * @property {number|null} [nanos] Timestamp nanos\n             */\n\n            /**\n             * Constructs a new Timestamp.\n             * @memberof google.protobuf\n             * @classdesc Represents a Timestamp.\n             * @implements ITimestamp\n             * @constructor\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             */\n            function Timestamp(properties) {\n                if (properties)\n                    for (var keys = Object.keys(properties), i = 0; i < keys.length; ++i)\n                        if (properties[keys[i]] != null)\n                            this[keys[i]] = properties[keys[i]];\n            }\n\n            /**\n             * Timestamp seconds.\n             * @member {number} seconds\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.seconds = $util.Long ? $util.Long.fromBits(0,0,false) : 0;\n\n            /**\n             * Timestamp nanos.\n             * @member {number} nanos\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             */\n            Timestamp.prototype.nanos = 0;\n\n            /**\n             * Creates a new Timestamp instance using the specified properties.\n             * @function create\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp=} [properties] Properties to set\n             * @returns {google.protobuf.Timestamp} Timestamp instance\n             */\n            Timestamp.create = function create(properties) {\n                return new Timestamp(properties);\n            };\n\n            /**\n             * Encodes the specified Timestamp message. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encode = function encode(message, writer) {\n                if (!writer)\n                    writer = $Writer.create();\n                if (message.seconds != null && Object.hasOwnProperty.call(message, \"seconds\"))\n                    writer.uint32(/* id 1, wireType 0 =*/8).int64(message.seconds);\n                if (message.nanos != null && Object.hasOwnProperty.call(message, \"nanos\"))\n                    writer.uint32(/* id 2, wireType 0 =*/16).int32(message.nanos);\n                return writer;\n            };\n\n            /**\n             * Encodes the specified Timestamp message, length delimited. Does not implicitly {@link google.protobuf.Timestamp.verify|verify} messages.\n             * @function encodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.ITimestamp} message Timestamp message or plain object to encode\n             * @param {$protobuf.Writer} [writer] Writer to encode to\n             * @returns {$protobuf.Writer} Writer\n             */\n            Timestamp.encodeDelimited = function encodeDelimited(message, writer) {\n                return this.encode(message, writer).ldelim();\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer.\n             * @function decode\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @param {number} [length] Message length if known beforehand\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decode = function decode(reader, length) {\n                if (!(reader instanceof $Reader))\n                    reader = $Reader.create(reader);\n                var end = length === undefined ? reader.len : reader.pos + length, message = new $root.google.protobuf.Timestamp();\n                while (reader.pos < end) {\n                    var tag = reader.uint32();\n                    switch (tag >>> 3) {\n                    case 1:\n                        message.seconds = reader.int64();\n                        break;\n                    case 2:\n                        message.nanos = reader.int32();\n                        break;\n                    default:\n                        reader.skipType(tag & 7);\n                        break;\n                    }\n                }\n                return message;\n            };\n\n            /**\n             * Decodes a Timestamp message from the specified reader or buffer, length delimited.\n             * @function decodeDelimited\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {$protobuf.Reader|Uint8Array} reader Reader or buffer to decode from\n             * @returns {google.protobuf.Timestamp} Timestamp\n             * @throws {Error} If the payload is not a reader or valid buffer\n             * @throws {$protobuf.util.ProtocolError} If required fields are missing\n             */\n            Timestamp.decodeDelimited = function decodeDelimited(reader) {\n                if (!(reader instanceof $Reader))\n                    reader = new $Reader(reader);\n                return this.decode(reader, reader.uint32());\n            };\n\n            /**\n             * Verifies a Timestamp message.\n             * @function verify\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} message Plain object to verify\n             * @returns {string|null} `null` if valid, otherwise the reason why it is not\n             */\n            Timestamp.verify = function verify(message) {\n                if (typeof message !== \"object\" || message === null)\n                    return \"object expected\";\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (!$util.isInteger(message.seconds) && !(message.seconds && $util.isInteger(message.seconds.low) && $util.isInteger(message.seconds.high)))\n                        return \"seconds: integer|Long expected\";\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    if (!$util.isInteger(message.nanos))\n                        return \"nanos: integer expected\";\n                return null;\n            };\n\n            /**\n             * Creates a Timestamp message from a plain object. Also converts values to their respective internal types.\n             * @function fromObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {Object.<string,*>} object Plain object\n             * @returns {google.protobuf.Timestamp} Timestamp\n             */\n            Timestamp.fromObject = function fromObject(object) {\n                if (object instanceof $root.google.protobuf.Timestamp)\n                    return object;\n                var message = new $root.google.protobuf.Timestamp();\n                if (object.seconds != null)\n                    if ($util.Long)\n                        (message.seconds = $util.Long.fromValue(object.seconds)).unsigned = false;\n                    else if (typeof object.seconds === \"string\")\n                        message.seconds = parseInt(object.seconds, 10);\n                    else if (typeof object.seconds === \"number\")\n                        message.seconds = object.seconds;\n                    else if (typeof object.seconds === \"object\")\n                        message.seconds = new $util.LongBits(object.seconds.low >>> 0, object.seconds.high >>> 0).toNumber();\n                if (object.nanos != null)\n                    message.nanos = object.nanos | 0;\n                return message;\n            };\n\n            /**\n             * Creates a plain object from a Timestamp message. Also converts values to other types if specified.\n             * @function toObject\n             * @memberof google.protobuf.Timestamp\n             * @static\n             * @param {google.protobuf.Timestamp} message Timestamp\n             * @param {$protobuf.IConversionOptions} [options] Conversion options\n             * @returns {Object.<string,*>} Plain object\n             */\n            Timestamp.toObject = function toObject(message, options) {\n                if (!options)\n                    options = {};\n                var object = {};\n                if (options.defaults) {\n                    if ($util.Long) {\n                        var long = new $util.Long(0, 0, false);\n                        object.seconds = options.longs === String ? long.toString() : options.longs === Number ? long.toNumber() : long;\n                    } else\n                        object.seconds = options.longs === String ? \"0\" : 0;\n                    object.nanos = 0;\n                }\n                if (message.seconds != null && message.hasOwnProperty(\"seconds\"))\n                    if (typeof message.seconds === \"number\")\n                        object.seconds = options.longs === String ? String(message.seconds) : message.seconds;\n                    else\n                        object.seconds = options.longs === String ? $util.Long.prototype.toString.call(message.seconds) : options.longs === Number ? new $util.LongBits(message.seconds.low >>> 0, message.seconds.high >>> 0).toNumber() : message.seconds;\n                if (message.nanos != null && message.hasOwnProperty(\"nanos\"))\n                    object.nanos = message.nanos;\n                return object;\n            };\n\n            /**\n             * Converts this Timestamp to JSON.\n             * @function toJSON\n             * @memberof google.protobuf.Timestamp\n             * @instance\n             * @returns {Object.<string,*>} JSON object\n             */\n            Timestamp.prototype.toJSON = function toJSON() {\n                return this.constructor.toObject(this, $protobuf.util.toJSONOptions);\n            };\n\n            return Timestamp;\n        })();\n\n        return protobuf;\n    })();\n\n    return google;\n})();\n\nmodule.exports = $root;\n"]},"metadata":{},"sourceType":"script"}