{"ast":null,"code":"import _taggedTemplateLiteral from\"/Users/josephdeguzman/Documents/CSE/brainiac-react-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral\";var _templateObject;import React from'react';import gql from'graphql-tag';import{useQuery}from'@apollo/client';import PlatformCard from'../components/PlatformCard';import{Container,Col,Row}from'react-bootstrap';import{stripIgnoredCharacters}from'graphql';import{jsx as _jsx}from\"react/jsx-runtime\";import{jsxs as _jsxs}from\"react/jsx-runtime\";function ExplorePage(){console.log(useQuery(FETCH_PLATFORMS_QUERY));var _useQuery=useQuery(FETCH_PLATFORMS_QUERY),loading=_useQuery.loading,data=_useQuery.data;if(loading){return\"loading\";}else{console.log(data);var platforms=data.getPlatforms;return/*#__PURE__*/_jsxs(\"div\",{children:[/*#__PURE__*/_jsx(\"h1\",{children:\"Explore\"}),/*#__PURE__*/_jsx(Container,{children:/*#__PURE__*/_jsx(Row,{children:loading?/*#__PURE__*/_jsx(\"h1\",{children:\"Loading...\"}):platforms&&platforms.map(function(platform){return/*#__PURE__*/_jsx(Col,{children:/*#__PURE__*/_jsx(PlatformCard,{platform:platform})});})})})]});}}var FETCH_PLATFORMS_QUERY=gql(_templateObject||(_templateObject=_taggedTemplateLiteral([\"\\n{\\n    getPlatforms{\\n        platformID name creatorName\\n    }\\n}   \\n\"])));export default ExplorePage;","map":{"version":3,"sources":["/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/pages/ExplorePage.js"],"names":["React","gql","useQuery","PlatformCard","Container","Col","Row","stripIgnoredCharacters","ExplorePage","console","log","FETCH_PLATFORMS_QUERY","loading","data","platforms","getPlatforms","map","platform"],"mappings":"iNAAA,MAAOA,CAAAA,KAAP,KAAkB,OAAlB,CACA,MAAOC,CAAAA,GAAP,KAAgB,aAAhB,CACA,OAASC,QAAT,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,YAAP,KAAyB,4BAAzB,CACA,OAAQC,SAAR,CAAmBC,GAAnB,CAAwBC,GAAxB,KAAkC,iBAAlC,CACA,OAASC,sBAAT,KAAuC,SAAvC,C,wFAGA,QAASC,CAAAA,WAAT,EAAuB,CACnBC,OAAO,CAACC,GAAR,CAAYR,QAAQ,CAACS,qBAAD,CAApB,EADmB,cAEMT,QAAQ,CAACS,qBAAD,CAFd,CAEXC,OAFW,WAEXA,OAFW,CAEFC,IAFE,WAEFA,IAFE,CAGnB,GAAID,OAAJ,CAAa,CAAC,MAAO,SAAP,CAAiB,CAA/B,IACK,CACLH,OAAO,CAACC,GAAR,CAAYG,IAAZ,EACA,GAAMC,CAAAA,SAAS,CAAGD,IAAI,CAACE,YAAvB,CACA,mBACI,oCACI,+BADJ,cAGI,KAAC,SAAD,wBACI,KAAC,GAAD,WAAMH,OAAO,cAAI,kCAAJ,CACTE,SAAS,EAAIA,SAAS,CAACE,GAAV,CAAc,SAACC,QAAD,qBACvB,KAAC,GAAD,wBACI,KAAC,YAAD,EAAc,QAAQ,CAAEA,QAAxB,EADJ,EADuB,EAAd,CADjB,EADJ,EAHJ,GADJ,CAgBiB,CACpB,CAED,GAAMN,CAAAA,qBAAqB,CAAGV,GAAH,2IAA3B,CAQA,cAAeO,CAAAA,WAAf","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client'\nimport PlatformCard from '../components/PlatformCard'\nimport {Container, Col, Row} from 'react-bootstrap'\nimport { stripIgnoredCharacters } from 'graphql';\n\n\nfunction ExplorePage() {\n    console.log(useQuery(FETCH_PLATFORMS_QUERY));\n    const { loading, data} = useQuery(FETCH_PLATFORMS_QUERY);\n    if (loading) {return \"loading\"}\n    else {\n    console.log(data);\n    const platforms = data.getPlatforms\n    return (\n        <div>\n            <h1>Explore</h1>\n            \n            <Container>\n                <Row>{loading ? (<h1>Loading...</h1>) : (\n                    platforms && platforms.map((platform) =>(\n                        <Col > \n                            <PlatformCard platform={platform}/>\n                        </Col>\n                    ))\n                )}\n                </Row> \n            </Container>\n        </div>\n    );\n                    }\n}\n\nconst FETCH_PLATFORMS_QUERY = gql`\n{\n    getPlatforms{\n        platformID name creatorName\n    }\n}   \n`;\n\nexport default ExplorePage;\n\n"]},"metadata":{},"sourceType":"module"}