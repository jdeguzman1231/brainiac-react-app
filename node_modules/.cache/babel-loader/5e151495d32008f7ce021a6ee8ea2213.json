{"ast":null,"code":"var _jsxFileName = \"/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/pages/LoginPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport { Form, Button } from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag';\nimport { useForm } from '../util/hooks';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction LoginPage(props) {\n  _s();\n\n  const [errors, setErrors] = useState({});\n  const {\n    handleChange,\n    onSubmit,\n    values\n  } = useForm(loginUserCallback, {\n    email: '',\n    password: ''\n  });\n  const [loginUser, {\n    loading\n  }] = useMutation(LOGIN_USER, {\n    update(proxy, result) {\n      console.log(result);\n      props.history.push('/');\n    },\n\n    onError(err) {\n      console.log(err);\n    },\n\n    variables: {\n      username: values.username,\n      email: values.email,\n      name: values.name,\n      password: values.password\n    }\n  });\n\n  function loginUserCallback() {\n    loginUser();\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"form-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Login Page\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Welcome back! Log in below to begin.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 13\n    }, this), /*#__PURE__*/_jsxDEV(Form, {\n      onSubmit: onSubmit,\n      noValidate: true,\n      children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"email\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"email\",\n          placeholder: \"Email\",\n          onChange: handleChange,\n          name: \"email\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 44,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n        controlId: \"password\",\n        children: /*#__PURE__*/_jsxDEV(Form.Control, {\n          type: \"password\",\n          placeholder: \"Password\",\n          onChange: handleChange,\n          name: \"password\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 56,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 54,\n        columnNumber: 18\n      }, this), /*#__PURE__*/_jsxDEV(Button, {\n        variant: \"primary\",\n        type: \"submit\",\n        children: \"Login\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 13\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 9\n  }, this);\n}\n\n_s(LoginPage, \"6dz56DW/fAnAdStN+m3fnO07EGs=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = LoginPage;\nconst LOGIN_USER = gql`\n    mutation login(\n        $email: String!\n        $password: String!\n    ) {\n        login(\n            email: $email\n            password: $password\n        ) {\n            username\n            token\n        }\n     }\n `;\nexport default LoginPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"LoginPage\");","map":{"version":3,"sources":["/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/pages/LoginPage.js"],"names":["React","useState","Form","Button","useMutation","gql","useForm","LoginPage","props","errors","setErrors","handleChange","onSubmit","values","loginUserCallback","email","password","loginUser","loading","LOGIN_USER","update","proxy","result","console","log","history","push","onError","err","variables","username","name"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,QAAf,QAA8B,OAA9B;AACA,SAAQC,IAAR,EAAcC,MAAd,QAA2B,iBAA3B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAOC,GAAP,MAAgB,aAAhB;AAEA,SAAUC,OAAV,QAAyB,eAAzB;;;AAEA,SAASC,SAAT,CAAmBC,KAAnB,EAA0B;AAAA;;AACtB,QAAM,CAAEC,MAAF,EAAUC,SAAV,IAAwBT,QAAQ,CAAC,EAAD,CAAtC;AAEA,QAAM;AAAEU,IAAAA,YAAF;AAAgBC,IAAAA,QAAhB;AAA0BC,IAAAA;AAA1B,MAAqCP,OAAO,CAACQ,iBAAD,EAAoB;AAClEC,IAAAA,KAAK,EAAE,EAD2D;AAElEC,IAAAA,QAAQ,EAAE;AAFwD,GAApB,CAAlD;AAKA,QAAM,CAACC,SAAD,EAAY;AAACC,IAAAA;AAAD,GAAZ,IAAyBd,WAAW,CAACe,UAAD,EAAa;AACnDC,IAAAA,MAAM,CAACC,KAAD,EAAQC,MAAR,EAAgB;AAClBC,MAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;AACAd,MAAAA,KAAK,CAACiB,OAAN,CAAcC,IAAd,CAAmB,GAAnB;AACF,KAJiD;;AAKnDC,IAAAA,OAAO,CAACC,GAAD,EAAM;AACTL,MAAAA,OAAO,CAACC,GAAR,CAAYI,GAAZ;AACH,KAPkD;;AAQnDC,IAAAA,SAAS,EAAE;AACPC,MAAAA,QAAQ,EAAEjB,MAAM,CAACiB,QADV;AAEPf,MAAAA,KAAK,EAAEF,MAAM,CAACE,KAFP;AAGPgB,MAAAA,IAAI,EAAElB,MAAM,CAACkB,IAHN;AAIPf,MAAAA,QAAQ,EAAEH,MAAM,CAACG;AAJV;AARwC,GAAb,CAA1C;;AAgBA,WAASF,iBAAT,GAA6B;AACzBG,IAAAA,SAAS;AACZ;;AAGD,sBACI;AAAK,IAAA,SAAS,EAAC,gBAAf;AAAA,4BACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,eAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,YAFJ,eAGI,QAAC,IAAD;AAAM,MAAA,QAAQ,EAAEL,QAAhB;AAA0B,MAAA,UAAU,MAApC;AAAA,8BACI,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,OAAtB;AAAA,+BAEI,QAAC,IAAD,CAAM,OAAN;AACA,UAAA,IAAI,EAAC,OADL;AAEA,UAAA,WAAW,EAAC,OAFZ;AAGA,UAAA,QAAQ,EAAID,YAHZ;AAIA,UAAA,IAAI,EAAG;AAJP;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cADJ,eAaK,QAAC,IAAD,CAAM,KAAN;AAAY,QAAA,SAAS,EAAC,UAAtB;AAAA,+BAEI,QAAC,IAAD,CAAM,OAAN;AAAc,UAAA,IAAI,EAAC,UAAnB;AACD,UAAA,WAAW,EAAC,UADX;AAED,UAAA,QAAQ,EAAIA,YAFX;AAGD,UAAA,IAAI,EAAG;AAHN;AAAA;AAAA;AAAA;AAAA;AAFJ;AAAA;AAAA;AAAA;AAAA,cAbL,eAuBI,QAAC,MAAD;AAAQ,QAAA,OAAO,EAAC,SAAhB;AAA0B,QAAA,IAAI,EAAC,QAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAvBJ;AAAA;AAAA;AAAA;AAAA;AAAA,YAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAiCH;;GA9DQJ,S;UAGsCD,O,EAKZF,W;;;KAR1BG,S;AAgET,MAAMY,UAAU,GAAGd,GAAI;AACvB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAbA;AAeA,eAAeE,SAAf","sourcesContent":["import React, {useState} from 'react';\nimport {Form, Button} from 'react-bootstrap';\nimport { useMutation } from '@apollo/client';\nimport gql from 'graphql-tag'\n\nimport  { useForm } from '../util/hooks';\n\nfunction LoginPage(props) { \n    const [ errors, setErrors ] = useState({});\n    \n    const { handleChange, onSubmit, values } = useForm(loginUserCallback, {\n        email: '',\n        password: ''\n    }) \n\n    const [loginUser, {loading}] = useMutation(LOGIN_USER, {\n        update(proxy, result) {\n            console.log(result)\n            props.history.push('/')\n         },\n        onError(err) {\n            console.log(err)\n        },\n        variables: {\n            username: values.username,\n            email: values.email,\n            name: values.name, \n            password: values.password\n        }\n    })\n\n    function loginUserCallback() {\n        loginUser()\n    }\n\n    \n    return (\n        <div className=\"form-container\">\n            <h1>Login Page</h1>\n            <p>Welcome back! Log in below to begin.</p>\n            <Form onSubmit={onSubmit} noValidate>\n                <Form.Group controlId=\"email\">\n                    {/* <Form.Label>Email address</Form.Label> */}\n                    <Form.Control \n                    type=\"email\" \n                    placeholder=\"Email\" \n                    onChange = {handleChange}\n                    name = \"email\"/>\n                    {/* <Form.Text className=\"text-muted\">\n                    We'll never share your email with anyone else.\n                    </Form.Text> */}\n                </Form.Group>\n\n                 <Form.Group controlId=\"password\">\n                     {/* <Form.Label>Password</Form.Label> */}\n                     <Form.Control type=\"password\" \n                    placeholder=\"Password\"\n                    onChange = {handleChange}\n                    name = \"password\"/>\n                </Form.Group>\n                {/* <Form.Group controlId=\"formBasicCheckbox\">\n                    <Form.Check type=\"checkbox\" label=\"Check me out\" />\n                </Form.Group> */}\n                <Button variant=\"primary\" type=\"submit\">\n                    Login\n                </Button>\n            </Form>\n        </div>\n    );\n}\n\nconst LOGIN_USER = gql`\n    mutation login(\n        $email: String!\n        $password: String!\n    ) {\n        login(\n            email: $email\n            password: $password\n        ) {\n            username\n            token\n        }\n     }\n `\n\nexport default LoginPage;"]},"metadata":{},"sourceType":"module"}