{"ast":null,"code":"var _jsxFileName = \"/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/pages/GamePage.js\",\n    _s = $RefreshSig$();\n\nimport React from 'react';\nimport gql from 'graphql-tag';\nimport { useQuery } from '@apollo/client';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction GamePage(props) {\n  _s();\n\n  const ggameID = props.match.params.gameID;\n  const gameID = parseInt(ggameID, 10);\n  const {\n    loading,\n    data\n  } = useQuery(FETCH_GAME_QUERY, {\n    variables: {\n      gameID,\n      gameID\n    }\n  });\n\n  if (loading) {\n    return \"loading\";\n  } else {\n    console.log(data);\n    const game = data.getGame;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: game.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 17,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: game.description\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 18,\n        columnNumber: 17\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        children: [\"by \", game.creatorName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 19,\n        columnNumber: 17\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 16,\n      columnNumber: 13\n    }, this);\n  }\n}\n\n_s(GamePage, \"9pFRn7foN/48Q3NdTGCGZxzPNZY=\", false, function () {\n  return [useQuery];\n});\n\n_c = GamePage;\nconst FETCH_GAME_QUERY = gql`\n    query($gameID: Int!){\n        getGame(gameID: $gameID){\n            name\n            creatorName\n            description\n            parentPlatform\n        }\n    }\n`;\nexport default GamePage;\n\nvar _c;\n\n$RefreshReg$(_c, \"GamePage\");","map":{"version":3,"sources":["/Users/josephdeguzman/Documents/CSE/brainiac-react-app/src/pages/GamePage.js"],"names":["React","gql","useQuery","GamePage","props","ggameID","match","params","gameID","parseInt","loading","data","FETCH_GAME_QUERY","variables","console","log","game","getGame","name","description","creatorName"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,GAAP,MAAgB,aAAhB;AACA,SAAQC,QAAR,QAAuB,gBAAvB;;;AAEA,SAASC,QAAT,CAAkBC,KAAlB,EAAwB;AAAA;;AACpB,QAAMC,OAAO,GAACD,KAAK,CAACE,KAAN,CAAYC,MAAZ,CAAmBC,MAAjC;AACA,QAAMA,MAAM,GAAGC,QAAQ,CAAEJ,OAAF,EAAW,EAAX,CAAvB;AACA,QAAM;AAAEK,IAAAA,OAAF;AAAWC,IAAAA;AAAX,MAAmBT,QAAQ,CAACU,gBAAD,EAAmB;AAChDC,IAAAA,SAAS,EAAE;AAACL,MAAAA,MAAD;AAASA,MAAAA;AAAT;AADqC,GAAnB,CAAjC;;AAGA,MAAIE,OAAJ,EAAa;AAAC,WAAO,SAAP;AAAiB,GAA/B,MACI;AACAI,IAAAA,OAAO,CAACC,GAAR,CAAYJ,IAAZ;AACA,UAAMK,IAAI,GAAGL,IAAI,CAACM,OAAlB;AACA,wBACI;AAAA,8BACI;AAAA,kBAAKD,IAAI,CAACE;AAAV;AAAA;AAAA;AAAA;AAAA,cADJ,eAEI;AAAA,kBAAKF,IAAI,CAACG;AAAV;AAAA;AAAA;AAAA;AAAA,cAFJ,eAGI;AAAA,0BAAQH,IAAI,CAACI,WAAb;AAAA;AAAA;AAAA;AAAA;AAAA,cAHJ;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ;AAOH;AACJ;;GAlBQjB,Q;UAGoBD,Q;;;KAHpBC,Q;AAoBT,MAAMS,gBAAgB,GAAGX,GAAI;AAC7B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CATA;AAWA,eAAeE,QAAf","sourcesContent":["import React from 'react';\nimport gql from 'graphql-tag'\nimport {useQuery} from '@apollo/client'\n\nfunction GamePage(props){\n    const ggameID=props.match.params.gameID;\n    const gameID = parseInt (ggameID, 10);\n    const { loading, data} = useQuery(FETCH_GAME_QUERY, {\n        variables: {gameID, gameID},\n    });\n    if (loading) {return \"loading\"}\n    else{\n        console.log(data)\n        const game = data.getGame\n        return(\n            <div>\n                <h1>{game.name}</h1>\n                <h3>{game.description}</h3>\n                <h3>by {game.creatorName}</h3>\n            </div> \n        )\n    }\n}\n\nconst FETCH_GAME_QUERY = gql`\n    query($gameID: Int!){\n        getGame(gameID: $gameID){\n            name\n            creatorName\n            description\n            parentPlatform\n        }\n    }\n`;\n\nexport default GamePage;"]},"metadata":{},"sourceType":"module"}