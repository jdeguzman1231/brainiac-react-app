{"ast":null,"code":"var _jsxFileName = \"/Users/darrenjiang/Desktop/brainiac Client/src/pages/PlatformSettingsPage.js\",\n    _s = $RefreshSig$();\n\nimport React, { useContext, useState } from 'react';\nimport gql from 'graphql-tag';\nimport { Container, Col, Row, FormGroup, Form, Button } from 'react-bootstrap';\nimport { useMutation, useQuery } from '@apollo/client';\nimport { useForm } from '../util/hooks';\nimport { AuthContext } from '../context/auth';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction PlatformSettingsPage(props) {\n  _s();\n\n  //const context = useContext(AuthContext);\n  //const pplatformID = props.match.params.platformID;\n  //var platformID = parseInt(pplatformID, 10);\n  //const { loading, data: pdata } = useQuery(FETCH_PLATFORM_QUERY, {\n  //variables: { platformID: platformID },\n  //});\n  const {\n    handleChange,\n    onSubmit,\n    values\n  } = useForm(update_platform_info, {\n    name: '',\n    description: '',\n    private: true\n  });\n  const [errors, setErrors] = useState({});\n  const [updatePlatform] = useMutation(EDIT_PLATFORM, {\n    update(proxy, result) {\n      context.login(result.data.updatePlatform); //return to platform page\n    },\n\n    onError(err) {\n      console.log(err);\n    },\n\n    variables: {\n      name: values.name,\n      description: values.description,\n      private: values.private\n    }\n  });\n  console.log(\"platform settings\");\n\n  function update_platform_info() {\n    updatePlatform();\n  }\n\n  if (loading) {\n    return loading;\n  } else {\n    const platform = pdata.getPlatform;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: \"Platform Settings\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"h1\", {\n        style: {\n          textAlign: 'center'\n        },\n        children: [\"Platform by \", platform.creatorName]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(Container, {\n        children: [/*#__PURE__*/_jsxDEV(Form, {\n          children: [/*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"new_name\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Platform Name\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 52,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              type: \"text\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 53,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 51,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"new_description\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Platform Description\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 57,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Control, {\n              as: \"textarea\",\n              rows: 3\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 58,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 56,\n            columnNumber: 21\n          }, this), /*#__PURE__*/_jsxDEV(Form.Group, {\n            controlId: \"privacy\",\n            children: [/*#__PURE__*/_jsxDEV(Form.Label, {\n              children: \"Privacy\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 62,\n              columnNumber: 25\n            }, this), /*#__PURE__*/_jsxDEV(Form.Check, {\n              id: \"privSwitch\",\n              type: \"switch\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 63,\n              columnNumber: 25\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 61,\n            columnNumber: 21\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(Button, {\n          type: \"submit\",\n          class: \"btn btn-primary\",\n          children: \"Submit\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 49,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 9\n    }, this);\n  }\n}\n\n_s(PlatformSettingsPage, \"or0OORKtY3eg53qiwaBMdiRLEFg=\", false, function () {\n  return [useForm, useMutation];\n});\n\n_c = PlatformSettingsPage;\nconst EDIT_PLATFORM = gql`\n    mutation(\n        $name: String!\n        $description: String!\n        $private: Boolean!\n        ){\n            editPlatform(\n                name: $name\n                description: $description\n                private: $private\n            )\n        }\n`;\nconst FETCH_PLATFORM_QUERY = gql`\n    query($platformID: Int!){\n        getPlatform(platformID: $platformID){\n            name\n            creatorName\n            description\n            games\n        }\n    }  \n`;\nexport default PlatformSettingsPage;\n\nvar _c;\n\n$RefreshReg$(_c, \"PlatformSettingsPage\");","map":{"version":3,"sources":["/Users/darrenjiang/Desktop/brainiac Client/src/pages/PlatformSettingsPage.js"],"names":["React","useContext","useState","gql","Container","Col","Row","FormGroup","Form","Button","useMutation","useQuery","useForm","AuthContext","PlatformSettingsPage","props","handleChange","onSubmit","values","update_platform_info","name","description","private","errors","setErrors","updatePlatform","EDIT_PLATFORM","update","proxy","result","context","login","data","onError","err","console","log","variables","loading","platform","pdata","getPlatform","textAlign","creatorName","FETCH_PLATFORM_QUERY"],"mappings":"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","sourcesContent":["import React, {useContext, useState} from 'react';\nimport gql from 'graphql-tag';\nimport {Container, Col, Row, FormGroup, Form, Button} from 'react-bootstrap';\nimport {useMutation, useQuery} from '@apollo/client';\nimport  { useForm } from '../util/hooks';\nimport { AuthContext } from '../context/auth'\n\n\n\nfunction PlatformSettingsPage(props){\n    //const context = useContext(AuthContext);\n    //const pplatformID = props.match.params.platformID;\n    //var platformID = parseInt(pplatformID, 10);\n    //const { loading, data: pdata } = useQuery(FETCH_PLATFORM_QUERY, {\n        //variables: { platformID: platformID },\n    //});\n    const { handleChange, onSubmit, values } = useForm(update_platform_info, {\n        name: '',\n        description: '',\n        private: true\n    }) \n    const [ errors, setErrors ] = useState({});\n    const [updatePlatform] = useMutation(EDIT_PLATFORM, {\n        update(proxy, result){\n            context.login(result.data.updatePlatform);\n            //return to platform page\n        },\n        onError(err){\n            console.log(err);\n        },\n        variables:{\n            name: values.name,\n            description: values.description,\n            private: values.private\n        }\n\n    })\n    console.log(\"platform settings\");\n    function update_platform_info(){\n        updatePlatform()\n    }\n    if(loading){return loading}\n    else{\n        const platform = pdata.getPlatform\n    return(\n        <div>\n            <h1 style={{textAlign:'center'}}>Platform Settings</h1>\n            <h1 style={{textAlign:'center'}}>Platform by {platform.creatorName}</h1>\n            <Container>\n                <Form>\n                <Form.Group controlId = \"new_name\">\n                        <Form.Label>Platform Name</Form.Label>\n                        <Form.Control type = \"text\">\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId = \"new_description\">\n                        <Form.Label>Platform Description</Form.Label>\n                        <Form.Control as = \"textarea\" rows={3}>\n                        </Form.Control>\n                    </Form.Group>\n                    <Form.Group controlId = \"privacy\">\n                        <Form.Label>Privacy</Form.Label>\n                        <Form.Check id = \"privSwitch\"type=\"switch\"></Form.Check>\n                    </Form.Group>\n                </Form>\n                <Button type=\"submit\" class=\"btn btn-primary\">\n                        Submit\n                </Button>\n            </Container>\n        </div>\n        );\n    }\n}\n\nconst EDIT_PLATFORM = gql`\n    mutation(\n        $name: String!\n        $description: String!\n        $private: Boolean!\n        ){\n            editPlatform(\n                name: $name\n                description: $description\n                private: $private\n            )\n        }\n`\nconst FETCH_PLATFORM_QUERY = gql`\n    query($platformID: Int!){\n        getPlatform(platformID: $platformID){\n            name\n            creatorName\n            description\n            games\n        }\n    }  \n`;\n\n\nexport default PlatformSettingsPage;"]},"metadata":{},"sourceType":"module"}